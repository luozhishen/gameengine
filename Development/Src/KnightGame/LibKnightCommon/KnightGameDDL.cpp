////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED. DO NOT MODIFY! //
////////////////////////////////////////////////

#include "KnightGameDDL.h"

namespace DDL
{
	template<>
	bool BufferReader::Read<DATATEST_INNER_OBJECT_CONFIG>(DATATEST_INNER_OBJECT_CONFIG& Value)
	{
		if(!Read<_U32>(Value.IntValue)) return false;
		if(!Read<_F32>(Value.FloatValue)) return false;
		if(!ReadString<DATATEST_RESOURCE_URL_MAX>(Value.StrValue)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<DATATEST_INNER_OBJECT_CONFIG>(const DATATEST_INNER_OBJECT_CONFIG& Value)
	{
		if(!Write<_U32>(Value.IntValue)) return false;
		if(!Write<_F32>(Value.FloatValue)) return false;
		if(!WriteString<DATATEST_RESOURCE_URL_MAX>(Value.StrValue)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_DATATEST_INNER_OBJECT_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<DATATEST_INNER_OBJECT_CONFIG>(*((DATATEST_INNER_OBJECT_CONFIG*)data));
	}

	static bool _struct_DATATEST_INNER_OBJECT_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<DATATEST_INNER_OBJECT_CONFIG>(*((const DATATEST_INNER_OBJECT_CONFIG*)data));
	}

	static FIELD_INFO _struct_DATATEST_INNER_OBJECT_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "IntValue", 0, (_U16)ATLAS_OFFSETOF(DATATEST_INNER_OBJECT_CONFIG, IntValue), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "FloatValue", 0, (_U16)ATLAS_OFFSETOF(DATATEST_INNER_OBJECT_CONFIG, FloatValue), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_STRING, "StrValue", 0, (_U16)ATLAS_OFFSETOF(DATATEST_INNER_OBJECT_CONFIG, StrValue), NULL, (_U16)DATATEST_RESOURCE_URL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<DATATEST_RESOURCE_URL_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_DATATEST_INNER_OBJECT_CONFIG_info = { NULL, "DATATEST_INNER_OBJECT_CONFIG", sizeof(DATATEST_INNER_OBJECT_CONFIG), 3, _struct_DATATEST_INNER_OBJECT_CONFIG_fieldinfo, _struct_DATATEST_INNER_OBJECT_CONFIG_readproc, _struct_DATATEST_INNER_OBJECT_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<DATATEST_INNER_OBJECT_CONFIG>()
	{
		return &_rfl_struct_DATATEST_INNER_OBJECT_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<DATATEST_INNER_STRUCT_CONFIG>(DATATEST_INNER_STRUCT_CONFIG& Value)
	{
		if(!Read<_U32>(Value.StructIntValue)) return false;
		if(!ReadArray<_F32, DATATEST_ARRAY_ELEMENT_MAX>(Value.StructArrFloatValue)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<DATATEST_INNER_STRUCT_CONFIG>(const DATATEST_INNER_STRUCT_CONFIG& Value)
	{
		if(!Write<_U32>(Value.StructIntValue)) return false;
		if(!WriteArray<_F32, DATATEST_ARRAY_ELEMENT_MAX>(Value.StructArrFloatValue)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_DATATEST_INNER_STRUCT_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<DATATEST_INNER_STRUCT_CONFIG>(*((DATATEST_INNER_STRUCT_CONFIG*)data));
	}

	static bool _struct_DATATEST_INNER_STRUCT_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<DATATEST_INNER_STRUCT_CONFIG>(*((const DATATEST_INNER_STRUCT_CONFIG*)data));
	}

	static FIELD_INFO _struct_DATATEST_INNER_STRUCT_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "StructIntValue", 0, (_U16)ATLAS_OFFSETOF(DATATEST_INNER_STRUCT_CONFIG, StructIntValue), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32|TYPE_ARRAY, "StructArrFloatValue", 0, (_U16)ATLAS_OFFSETOF(DATATEST_INNER_STRUCT_CONFIG, StructArrFloatValue), NULL, (_U16)-1, (_U16)DATATEST_ARRAY_ELEMENT_MAX, (_U16)((size_t)(&((DDL::Array<_F32, DATATEST_ARRAY_ELEMENT_MAX>*)NULL)->_Array)), (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_DATATEST_INNER_STRUCT_CONFIG_info = { NULL, "DATATEST_INNER_STRUCT_CONFIG", sizeof(DATATEST_INNER_STRUCT_CONFIG), 2, _struct_DATATEST_INNER_STRUCT_CONFIG_fieldinfo, _struct_DATATEST_INNER_STRUCT_CONFIG_readproc, _struct_DATATEST_INNER_STRUCT_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<DATATEST_INNER_STRUCT_CONFIG>()
	{
		return &_rfl_struct_DATATEST_INNER_STRUCT_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<DATATEST_BASE_CONFIG>(DATATEST_BASE_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!ReadString<DATATEST_RESOURCE_URL_MAX>(Value.ResourceURL)) return false;
		if(!Read<_U32>(Value.IntValue)) return false;
		if(!Read<_F32>(Value.FloatValue)) return false;
		if(!Read<_U8>(Value.EnumValue)) return false;
		if(!ReadString<DATATEST_RESOURCE_URL_MAX>(Value.StrValue)) return false;
		if(!Read<DATATEST_INNER_OBJECT_CONFIG>(Value.ObjectInnerValue)) return false;
		if(!Read<DATATEST_INNER_STRUCT_CONFIG>(Value.StructValue)) return false;
		if(!ReadArray<_U32, DATATEST_ARRAY_ELEMENT_MAX>(Value.ArrIntValue)) return false;
		if(!ReadArray<DATATEST_INNER_STRUCT_CONFIG, DATATEST_ARRAY_ELEMENT_MAX>(Value.ArrStructValue)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<DATATEST_BASE_CONFIG>(const DATATEST_BASE_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!WriteString<DATATEST_RESOURCE_URL_MAX>(Value.ResourceURL)) return false;
		if(!Write<_U32>(Value.IntValue)) return false;
		if(!Write<_F32>(Value.FloatValue)) return false;
		if(!Write<_U8>(Value.EnumValue)) return false;
		if(!WriteString<DATATEST_RESOURCE_URL_MAX>(Value.StrValue)) return false;
		if(!Write<DATATEST_INNER_OBJECT_CONFIG>(Value.ObjectInnerValue)) return false;
		if(!Write<DATATEST_INNER_STRUCT_CONFIG>(Value.StructValue)) return false;
		if(!WriteArray<_U32, DATATEST_ARRAY_ELEMENT_MAX>(Value.ArrIntValue)) return false;
		if(!WriteArray<DATATEST_INNER_STRUCT_CONFIG, DATATEST_ARRAY_ELEMENT_MAX>(Value.ArrStructValue)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_DATATEST_BASE_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<DATATEST_BASE_CONFIG>(*((DATATEST_BASE_CONFIG*)data));
	}

	static bool _struct_DATATEST_BASE_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<DATATEST_BASE_CONFIG>(*((const DATATEST_BASE_CONFIG*)data));
	}

	static FIELD_INFO _struct_DATATEST_BASE_CONFIG_fieldinfo[] =
	{
		{TYPE_STRING, "ResourceURL", 0, (_U16)ATLAS_OFFSETOF(DATATEST_BASE_CONFIG, ResourceURL), NULL, (_U16)DATATEST_RESOURCE_URL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<DATATEST_RESOURCE_URL_MAX>), NULL},
		{TYPE_U32, "IntValue", 0, (_U16)ATLAS_OFFSETOF(DATATEST_BASE_CONFIG, IntValue), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "FloatValue", 0, (_U16)ATLAS_OFFSETOF(DATATEST_BASE_CONFIG, FloatValue), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U8, "EnumValue", 0, (_U16)ATLAS_OFFSETOF(DATATEST_BASE_CONFIG, EnumValue), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "StrValue", 0, (_U16)ATLAS_OFFSETOF(DATATEST_BASE_CONFIG, StrValue), NULL, (_U16)DATATEST_RESOURCE_URL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<DATATEST_RESOURCE_URL_MAX>), NULL},
		{TYPE_STRUCT, "ObjectInnerValue", 0, (_U16)ATLAS_OFFSETOF(DATATEST_BASE_CONFIG, ObjectInnerValue), &_rfl_struct_DATATEST_INNER_OBJECT_CONFIG_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(DATATEST_INNER_OBJECT_CONFIG), NULL},
		{TYPE_STRUCT, "StructValue", 0, (_U16)ATLAS_OFFSETOF(DATATEST_BASE_CONFIG, StructValue), &_rfl_struct_DATATEST_INNER_STRUCT_CONFIG_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(DATATEST_INNER_STRUCT_CONFIG), NULL},
		{TYPE_U32|TYPE_ARRAY, "ArrIntValue", 0, (_U16)ATLAS_OFFSETOF(DATATEST_BASE_CONFIG, ArrIntValue), NULL, (_U16)-1, (_U16)DATATEST_ARRAY_ELEMENT_MAX, (_U16)((size_t)(&((DDL::Array<_U32, DATATEST_ARRAY_ELEMENT_MAX>*)NULL)->_Array)), (_U16)sizeof(_U32), NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "ArrStructValue", 0, (_U16)ATLAS_OFFSETOF(DATATEST_BASE_CONFIG, ArrStructValue), &_rfl_struct_DATATEST_INNER_STRUCT_CONFIG_info, (_U16)-1, (_U16)DATATEST_ARRAY_ELEMENT_MAX, (_U16)((size_t)(&((DDL::Array<DATATEST_INNER_STRUCT_CONFIG, DATATEST_ARRAY_ELEMENT_MAX>*)NULL)->_Array)), (_U16)sizeof(DATATEST_INNER_STRUCT_CONFIG), NULL},
	};
	STRUCT_INFO _rfl_struct_DATATEST_BASE_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "DATATEST_BASE_CONFIG", sizeof(DATATEST_BASE_CONFIG), 9, _struct_DATATEST_BASE_CONFIG_fieldinfo, _struct_DATATEST_BASE_CONFIG_readproc, _struct_DATATEST_BASE_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<DATATEST_BASE_CONFIG>()
	{
		return &_rfl_struct_DATATEST_BASE_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_ATTRIBUTE_MODIFY_SETTING>(KNIGHT_ATTRIBUTE_MODIFY_SETTING& Value)
	{
		if(!Read<_U8>(Value.AttributeType)) return false;
		if(!Read<_F32>(Value.Value)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_ATTRIBUTE_MODIFY_SETTING>(const KNIGHT_ATTRIBUTE_MODIFY_SETTING& Value)
	{
		if(!Write<_U8>(Value.AttributeType)) return false;
		if(!Write<_F32>(Value.Value)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_ATTRIBUTE_MODIFY_SETTING_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_ATTRIBUTE_MODIFY_SETTING>(*((KNIGHT_ATTRIBUTE_MODIFY_SETTING*)data));
	}

	static bool _struct_KNIGHT_ATTRIBUTE_MODIFY_SETTING_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_ATTRIBUTE_MODIFY_SETTING>(*((const KNIGHT_ATTRIBUTE_MODIFY_SETTING*)data));
	}

	static FIELD_INFO _struct_KNIGHT_ATTRIBUTE_MODIFY_SETTING_fieldinfo[] =
	{
		{TYPE_U8, "AttributeType", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_ATTRIBUTE_MODIFY_SETTING, AttributeType), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_F32, "Value", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_ATTRIBUTE_MODIFY_SETTING, Value), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_ATTRIBUTE_MODIFY_SETTING_info = { NULL, "KNIGHT_ATTRIBUTE_MODIFY_SETTING", sizeof(KNIGHT_ATTRIBUTE_MODIFY_SETTING), 2, _struct_KNIGHT_ATTRIBUTE_MODIFY_SETTING_fieldinfo, _struct_KNIGHT_ATTRIBUTE_MODIFY_SETTING_readproc, _struct_KNIGHT_ATTRIBUTE_MODIFY_SETTING_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_ATTRIBUTE_MODIFY_SETTING>()
	{
		return &_rfl_struct_KNIGHT_ATTRIBUTE_MODIFY_SETTING_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_CALC_CONFIG>(KNIGHT_CALC_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!ReadString<KNIGHT_RESOURCE_URL_MAX>(Value.ResourceURL)) return false;
		if(!Read<_F32>(Value.Influence)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_CALC_CONFIG>(const KNIGHT_CALC_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!WriteString<KNIGHT_RESOURCE_URL_MAX>(Value.ResourceURL)) return false;
		if(!Write<_F32>(Value.Influence)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_CALC_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_CALC_CONFIG>(*((KNIGHT_CALC_CONFIG*)data));
	}

	static bool _struct_KNIGHT_CALC_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_CALC_CONFIG>(*((const KNIGHT_CALC_CONFIG*)data));
	}

	static FIELD_INFO _struct_KNIGHT_CALC_CONFIG_fieldinfo[] =
	{
		{TYPE_STRING, "ResourceURL", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_CALC_CONFIG, ResourceURL), NULL, (_U16)KNIGHT_RESOURCE_URL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<KNIGHT_RESOURCE_URL_MAX>), NULL},
		{TYPE_F32, "Influence", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_CALC_CONFIG, Influence), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_CALC_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "KNIGHT_CALC_CONFIG", sizeof(KNIGHT_CALC_CONFIG), 2, _struct_KNIGHT_CALC_CONFIG_fieldinfo, _struct_KNIGHT_CALC_CONFIG_readproc, _struct_KNIGHT_CALC_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_CALC_CONFIG>()
	{
		return &_rfl_struct_KNIGHT_CALC_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_SKILL_CONFIG>(KNIGHT_SKILL_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!ReadString<KNIGHT_RESOURCE_URL_MAX>(Value.ResourceURL)) return false;
		if(!ReadString<KNIGHT_DESCRIPTION_MAX>(Value.RealName)) return false;
		if(!ReadString<KNIGHT_DESCRIPTION_MAX>(Value.Desc)) return false;
		if(!Read<_U32>(Value.Level)) return false;
		if(!Read<_U8>(Value.Target)) return false;
		if(!ReadStringArray<KNIGHT_ID_MAX, KNIGHT_ARRAY_ELEMENT_MAX>(Value.BuffIDs)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_SKILL_CONFIG>(const KNIGHT_SKILL_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!WriteString<KNIGHT_RESOURCE_URL_MAX>(Value.ResourceURL)) return false;
		if(!WriteString<KNIGHT_DESCRIPTION_MAX>(Value.RealName)) return false;
		if(!WriteString<KNIGHT_DESCRIPTION_MAX>(Value.Desc)) return false;
		if(!Write<_U32>(Value.Level)) return false;
		if(!Write<_U8>(Value.Target)) return false;
		if(!WriteStringArray<KNIGHT_ID_MAX, KNIGHT_ARRAY_ELEMENT_MAX>(Value.BuffIDs)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_SKILL_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_SKILL_CONFIG>(*((KNIGHT_SKILL_CONFIG*)data));
	}

	static bool _struct_KNIGHT_SKILL_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_SKILL_CONFIG>(*((const KNIGHT_SKILL_CONFIG*)data));
	}

	static FIELD_INFO _struct_KNIGHT_SKILL_CONFIG_fieldinfo[] =
	{
		{TYPE_STRING, "ResourceURL", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_SKILL_CONFIG, ResourceURL), NULL, (_U16)KNIGHT_RESOURCE_URL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<KNIGHT_RESOURCE_URL_MAX>), NULL},
		{TYPE_STRING, "RealName", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_SKILL_CONFIG, RealName), NULL, (_U16)KNIGHT_DESCRIPTION_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<KNIGHT_DESCRIPTION_MAX>), NULL},
		{TYPE_STRING, "Desc", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_SKILL_CONFIG, Desc), NULL, (_U16)KNIGHT_DESCRIPTION_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<KNIGHT_DESCRIPTION_MAX>), NULL},
		{TYPE_U32, "Level", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_SKILL_CONFIG, Level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "Target", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_SKILL_CONFIG, Target), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING|TYPE_ARRAY, "BuffIDs", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_SKILL_CONFIG, BuffIDs), NULL, (_U16)KNIGHT_ID_MAX, (_U16)KNIGHT_ARRAY_ELEMENT_MAX, (_U16)((size_t)(&((DDL::Array<DDL::String<KNIGHT_ID_MAX>, KNIGHT_ARRAY_ELEMENT_MAX>*)NULL)->_Array)), (_U16)sizeof(DDL::String<KNIGHT_ID_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_SKILL_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "KNIGHT_SKILL_CONFIG", sizeof(KNIGHT_SKILL_CONFIG), 6, _struct_KNIGHT_SKILL_CONFIG_fieldinfo, _struct_KNIGHT_SKILL_CONFIG_readproc, _struct_KNIGHT_SKILL_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_SKILL_CONFIG>()
	{
		return &_rfl_struct_KNIGHT_SKILL_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_SKILL_ACTIVE_CONFIG>(KNIGHT_SKILL_ACTIVE_CONFIG& Value)
	{
		if(!BufferReader::Read<KNIGHT_SKILL_CONFIG>(Value)) return false;
		if(!Read<_U8>(Value.Element)) return false;
		if(!Read<_U8>(Value.FormulaType)) return false;
		if(!Read<_S32>(Value.AveValue)) return false;
		if(!Read<_S32>(Value.Range)) return false;
		if(!Read<_F32>(Value.FormulaRatio)) return false;
		if(!Read<_F32>(Value.Probability)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_SKILL_ACTIVE_CONFIG>(const KNIGHT_SKILL_ACTIVE_CONFIG& Value)
	{
		if(!BufferWriter::Write<KNIGHT_SKILL_CONFIG>(Value)) return false;
		if(!Write<_U8>(Value.Element)) return false;
		if(!Write<_U8>(Value.FormulaType)) return false;
		if(!Write<_S32>(Value.AveValue)) return false;
		if(!Write<_S32>(Value.Range)) return false;
		if(!Write<_F32>(Value.FormulaRatio)) return false;
		if(!Write<_F32>(Value.Probability)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_SKILL_ACTIVE_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_SKILL_ACTIVE_CONFIG>(*((KNIGHT_SKILL_ACTIVE_CONFIG*)data));
	}

	static bool _struct_KNIGHT_SKILL_ACTIVE_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_SKILL_ACTIVE_CONFIG>(*((const KNIGHT_SKILL_ACTIVE_CONFIG*)data));
	}

	static FIELD_INFO _struct_KNIGHT_SKILL_ACTIVE_CONFIG_fieldinfo[] =
	{
		{TYPE_U8, "Element", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_SKILL_ACTIVE_CONFIG, Element), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "FormulaType", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_SKILL_ACTIVE_CONFIG, FormulaType), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_S32, "AveValue", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_SKILL_ACTIVE_CONFIG, AveValue), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "Range", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_SKILL_ACTIVE_CONFIG, Range), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_F32, "FormulaRatio", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_SKILL_ACTIVE_CONFIG, FormulaRatio), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "Probability", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_SKILL_ACTIVE_CONFIG, Probability), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_SKILL_ACTIVE_CONFIG_info = { &_rfl_struct_KNIGHT_SKILL_CONFIG_info, "KNIGHT_SKILL_ACTIVE_CONFIG", sizeof(KNIGHT_SKILL_ACTIVE_CONFIG), 6, _struct_KNIGHT_SKILL_ACTIVE_CONFIG_fieldinfo, _struct_KNIGHT_SKILL_ACTIVE_CONFIG_readproc, _struct_KNIGHT_SKILL_ACTIVE_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_SKILL_ACTIVE_CONFIG>()
	{
		return &_rfl_struct_KNIGHT_SKILL_ACTIVE_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_BUFF_CONFIG>(KNIGHT_BUFF_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!ReadString<KNIGHT_RESOURCE_URL_MAX>(Value.ResourceURL)) return false;
		if(!ReadString<KNIGHT_DESCRIPTION_MAX>(Value.RealName)) return false;
		if(!ReadString<KNIGHT_DESCRIPTION_MAX>(Value.Desc)) return false;
		if(!Read<_S32>(Value.Duration)) return false;
		if(!Read<_U8>(Value.IconType)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_BUFF_CONFIG>(const KNIGHT_BUFF_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!WriteString<KNIGHT_RESOURCE_URL_MAX>(Value.ResourceURL)) return false;
		if(!WriteString<KNIGHT_DESCRIPTION_MAX>(Value.RealName)) return false;
		if(!WriteString<KNIGHT_DESCRIPTION_MAX>(Value.Desc)) return false;
		if(!Write<_S32>(Value.Duration)) return false;
		if(!Write<_U8>(Value.IconType)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_BUFF_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_BUFF_CONFIG>(*((KNIGHT_BUFF_CONFIG*)data));
	}

	static bool _struct_KNIGHT_BUFF_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_BUFF_CONFIG>(*((const KNIGHT_BUFF_CONFIG*)data));
	}

	static FIELD_INFO _struct_KNIGHT_BUFF_CONFIG_fieldinfo[] =
	{
		{TYPE_STRING, "ResourceURL", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_CONFIG, ResourceURL), NULL, (_U16)KNIGHT_RESOURCE_URL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<KNIGHT_RESOURCE_URL_MAX>), NULL},
		{TYPE_STRING, "RealName", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_CONFIG, RealName), NULL, (_U16)KNIGHT_DESCRIPTION_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<KNIGHT_DESCRIPTION_MAX>), NULL},
		{TYPE_STRING, "Desc", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_CONFIG, Desc), NULL, (_U16)KNIGHT_DESCRIPTION_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<KNIGHT_DESCRIPTION_MAX>), NULL},
		{TYPE_S32, "Duration", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_CONFIG, Duration), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_U8, "IconType", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_CONFIG, IconType), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_BUFF_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "KNIGHT_BUFF_CONFIG", sizeof(KNIGHT_BUFF_CONFIG), 5, _struct_KNIGHT_BUFF_CONFIG_fieldinfo, _struct_KNIGHT_BUFF_CONFIG_readproc, _struct_KNIGHT_BUFF_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_BUFF_CONFIG>()
	{
		return &_rfl_struct_KNIGHT_BUFF_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_BUFF_STATS>(KNIGHT_BUFF_STATS& Value)
	{
		if(!BufferReader::Read<KNIGHT_BUFF_CONFIG>(Value)) return false;
		if(!ReadArray<KNIGHT_ATTRIBUTE_MODIFY_SETTING, KNIGHT_ARRAY_ELEMENT_MAX>(Value.AttrModSetting)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_BUFF_STATS>(const KNIGHT_BUFF_STATS& Value)
	{
		if(!BufferWriter::Write<KNIGHT_BUFF_CONFIG>(Value)) return false;
		if(!WriteArray<KNIGHT_ATTRIBUTE_MODIFY_SETTING, KNIGHT_ARRAY_ELEMENT_MAX>(Value.AttrModSetting)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_BUFF_STATS_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_BUFF_STATS>(*((KNIGHT_BUFF_STATS*)data));
	}

	static bool _struct_KNIGHT_BUFF_STATS_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_BUFF_STATS>(*((const KNIGHT_BUFF_STATS*)data));
	}

	static FIELD_INFO _struct_KNIGHT_BUFF_STATS_fieldinfo[] =
	{
		{TYPE_STRUCT|TYPE_ARRAY, "AttrModSetting", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_STATS, AttrModSetting), &_rfl_struct_KNIGHT_ATTRIBUTE_MODIFY_SETTING_info, (_U16)-1, (_U16)KNIGHT_ARRAY_ELEMENT_MAX, (_U16)((size_t)(&((DDL::Array<KNIGHT_ATTRIBUTE_MODIFY_SETTING, KNIGHT_ARRAY_ELEMENT_MAX>*)NULL)->_Array)), (_U16)sizeof(KNIGHT_ATTRIBUTE_MODIFY_SETTING), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_BUFF_STATS_info = { &_rfl_struct_KNIGHT_BUFF_CONFIG_info, "KNIGHT_BUFF_STATS", sizeof(KNIGHT_BUFF_STATS), 1, _struct_KNIGHT_BUFF_STATS_fieldinfo, _struct_KNIGHT_BUFF_STATS_readproc, _struct_KNIGHT_BUFF_STATS_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_BUFF_STATS>()
	{
		return &_rfl_struct_KNIGHT_BUFF_STATS_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_ELEM_DAMAGE_CORRECTION>(KNIGHT_ELEM_DAMAGE_CORRECTION& Value)
	{
		if(!Read<_U8>(Value.ElementType)) return false;
		if(!Read<_F32>(Value.Ratio)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_ELEM_DAMAGE_CORRECTION>(const KNIGHT_ELEM_DAMAGE_CORRECTION& Value)
	{
		if(!Write<_U8>(Value.ElementType)) return false;
		if(!Write<_F32>(Value.Ratio)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_ELEM_DAMAGE_CORRECTION_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_ELEM_DAMAGE_CORRECTION>(*((KNIGHT_ELEM_DAMAGE_CORRECTION*)data));
	}

	static bool _struct_KNIGHT_ELEM_DAMAGE_CORRECTION_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_ELEM_DAMAGE_CORRECTION>(*((const KNIGHT_ELEM_DAMAGE_CORRECTION*)data));
	}

	static FIELD_INFO _struct_KNIGHT_ELEM_DAMAGE_CORRECTION_fieldinfo[] =
	{
		{TYPE_U8, "ElementType", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_ELEM_DAMAGE_CORRECTION, ElementType), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_F32, "Ratio", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_ELEM_DAMAGE_CORRECTION, Ratio), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_ELEM_DAMAGE_CORRECTION_info = { NULL, "KNIGHT_ELEM_DAMAGE_CORRECTION", sizeof(KNIGHT_ELEM_DAMAGE_CORRECTION), 2, _struct_KNIGHT_ELEM_DAMAGE_CORRECTION_fieldinfo, _struct_KNIGHT_ELEM_DAMAGE_CORRECTION_readproc, _struct_KNIGHT_ELEM_DAMAGE_CORRECTION_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_ELEM_DAMAGE_CORRECTION>()
	{
		return &_rfl_struct_KNIGHT_ELEM_DAMAGE_CORRECTION_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_WEAPON_CORRECTION>(KNIGHT_WEAPON_CORRECTION& Value)
	{
		if(!Read<_U8>(Value.WeaponType)) return false;
		if(!Read<_F32>(Value.Ratio)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_WEAPON_CORRECTION>(const KNIGHT_WEAPON_CORRECTION& Value)
	{
		if(!Write<_U8>(Value.WeaponType)) return false;
		if(!Write<_F32>(Value.Ratio)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_WEAPON_CORRECTION_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_WEAPON_CORRECTION>(*((KNIGHT_WEAPON_CORRECTION*)data));
	}

	static bool _struct_KNIGHT_WEAPON_CORRECTION_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_WEAPON_CORRECTION>(*((const KNIGHT_WEAPON_CORRECTION*)data));
	}

	static FIELD_INFO _struct_KNIGHT_WEAPON_CORRECTION_fieldinfo[] =
	{
		{TYPE_U8, "WeaponType", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_WEAPON_CORRECTION, WeaponType), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_F32, "Ratio", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_WEAPON_CORRECTION, Ratio), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_WEAPON_CORRECTION_info = { NULL, "KNIGHT_WEAPON_CORRECTION", sizeof(KNIGHT_WEAPON_CORRECTION), 2, _struct_KNIGHT_WEAPON_CORRECTION_fieldinfo, _struct_KNIGHT_WEAPON_CORRECTION_readproc, _struct_KNIGHT_WEAPON_CORRECTION_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_WEAPON_CORRECTION>()
	{
		return &_rfl_struct_KNIGHT_WEAPON_CORRECTION_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_BUFF_DAMAGE_CORRECTION>(KNIGHT_BUFF_DAMAGE_CORRECTION& Value)
	{
		if(!BufferReader::Read<KNIGHT_BUFF_CONFIG>(Value)) return false;
		if(!Read<_U8>(Value.BuffAtkElemType)) return false;
		if(!ReadArray<KNIGHT_WEAPON_CORRECTION, KNIGHT_ARRAY_ELEMENT_MAX>(Value.BuffWeaponAtkCorrection)) return false;
		if(!ReadArray<KNIGHT_WEAPON_CORRECTION, KNIGHT_ARRAY_ELEMENT_MAX>(Value.BuffWeaponDefCorrection)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_BUFF_DAMAGE_CORRECTION>(const KNIGHT_BUFF_DAMAGE_CORRECTION& Value)
	{
		if(!BufferWriter::Write<KNIGHT_BUFF_CONFIG>(Value)) return false;
		if(!Write<_U8>(Value.BuffAtkElemType)) return false;
		if(!WriteArray<KNIGHT_WEAPON_CORRECTION, KNIGHT_ARRAY_ELEMENT_MAX>(Value.BuffWeaponAtkCorrection)) return false;
		if(!WriteArray<KNIGHT_WEAPON_CORRECTION, KNIGHT_ARRAY_ELEMENT_MAX>(Value.BuffWeaponDefCorrection)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_BUFF_DAMAGE_CORRECTION_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_BUFF_DAMAGE_CORRECTION>(*((KNIGHT_BUFF_DAMAGE_CORRECTION*)data));
	}

	static bool _struct_KNIGHT_BUFF_DAMAGE_CORRECTION_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_BUFF_DAMAGE_CORRECTION>(*((const KNIGHT_BUFF_DAMAGE_CORRECTION*)data));
	}

	static FIELD_INFO _struct_KNIGHT_BUFF_DAMAGE_CORRECTION_fieldinfo[] =
	{
		{TYPE_U8, "BuffAtkElemType", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_DAMAGE_CORRECTION, BuffAtkElemType), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "BuffWeaponAtkCorrection", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_DAMAGE_CORRECTION, BuffWeaponAtkCorrection), &_rfl_struct_KNIGHT_WEAPON_CORRECTION_info, (_U16)-1, (_U16)KNIGHT_ARRAY_ELEMENT_MAX, (_U16)((size_t)(&((DDL::Array<KNIGHT_WEAPON_CORRECTION, KNIGHT_ARRAY_ELEMENT_MAX>*)NULL)->_Array)), (_U16)sizeof(KNIGHT_WEAPON_CORRECTION), NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "BuffWeaponDefCorrection", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_DAMAGE_CORRECTION, BuffWeaponDefCorrection), &_rfl_struct_KNIGHT_WEAPON_CORRECTION_info, (_U16)-1, (_U16)KNIGHT_ARRAY_ELEMENT_MAX, (_U16)((size_t)(&((DDL::Array<KNIGHT_WEAPON_CORRECTION, KNIGHT_ARRAY_ELEMENT_MAX>*)NULL)->_Array)), (_U16)sizeof(KNIGHT_WEAPON_CORRECTION), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_BUFF_DAMAGE_CORRECTION_info = { &_rfl_struct_KNIGHT_BUFF_CONFIG_info, "KNIGHT_BUFF_DAMAGE_CORRECTION", sizeof(KNIGHT_BUFF_DAMAGE_CORRECTION), 3, _struct_KNIGHT_BUFF_DAMAGE_CORRECTION_fieldinfo, _struct_KNIGHT_BUFF_DAMAGE_CORRECTION_readproc, _struct_KNIGHT_BUFF_DAMAGE_CORRECTION_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_BUFF_DAMAGE_CORRECTION>()
	{
		return &_rfl_struct_KNIGHT_BUFF_DAMAGE_CORRECTION_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_BUFF_MAGIC_CORRECTION>(KNIGHT_BUFF_MAGIC_CORRECTION& Value)
	{
		if(!BufferReader::Read<KNIGHT_BUFF_CONFIG>(Value)) return false;
		if(!ReadArray<_U8, KNIGHT_ARRAY_ELEMENT_MAX>(Value.BuffElemType)) return false;
		if(!Read<_F32>(Value.BuffElemAtkCorrection)) return false;
		if(!Read<_F32>(Value.BuffElemDefCorrection)) return false;
		if(!Read<_U8>(Value.BuffElemDefMode)) return false;
		if(!Read<_F32>(Value.ElementStrengthen)) return false;
		if(!Read<_U8>(Value.ElementSeal)) return false;
		if(!Read<_F32>(Value.ElementMiss)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_BUFF_MAGIC_CORRECTION>(const KNIGHT_BUFF_MAGIC_CORRECTION& Value)
	{
		if(!BufferWriter::Write<KNIGHT_BUFF_CONFIG>(Value)) return false;
		if(!WriteArray<_U8, KNIGHT_ARRAY_ELEMENT_MAX>(Value.BuffElemType)) return false;
		if(!Write<_F32>(Value.BuffElemAtkCorrection)) return false;
		if(!Write<_F32>(Value.BuffElemDefCorrection)) return false;
		if(!Write<_U8>(Value.BuffElemDefMode)) return false;
		if(!Write<_F32>(Value.ElementStrengthen)) return false;
		if(!Write<_U8>(Value.ElementSeal)) return false;
		if(!Write<_F32>(Value.ElementMiss)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_BUFF_MAGIC_CORRECTION_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_BUFF_MAGIC_CORRECTION>(*((KNIGHT_BUFF_MAGIC_CORRECTION*)data));
	}

	static bool _struct_KNIGHT_BUFF_MAGIC_CORRECTION_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_BUFF_MAGIC_CORRECTION>(*((const KNIGHT_BUFF_MAGIC_CORRECTION*)data));
	}

	static FIELD_INFO _struct_KNIGHT_BUFF_MAGIC_CORRECTION_fieldinfo[] =
	{
		{TYPE_U8|TYPE_ARRAY, "BuffElemType", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_MAGIC_CORRECTION, BuffElemType), NULL, (_U16)-1, (_U16)KNIGHT_ARRAY_ELEMENT_MAX, (_U16)((size_t)(&((DDL::Array<_U8, KNIGHT_ARRAY_ELEMENT_MAX>*)NULL)->_Array)), (_U16)sizeof(_U8), NULL},
		{TYPE_F32, "BuffElemAtkCorrection", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_MAGIC_CORRECTION, BuffElemAtkCorrection), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "BuffElemDefCorrection", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_MAGIC_CORRECTION, BuffElemDefCorrection), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U8, "BuffElemDefMode", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_MAGIC_CORRECTION, BuffElemDefMode), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_F32, "ElementStrengthen", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_MAGIC_CORRECTION, ElementStrengthen), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U8, "ElementSeal", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_MAGIC_CORRECTION, ElementSeal), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_F32, "ElementMiss", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_MAGIC_CORRECTION, ElementMiss), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_BUFF_MAGIC_CORRECTION_info = { &_rfl_struct_KNIGHT_BUFF_CONFIG_info, "KNIGHT_BUFF_MAGIC_CORRECTION", sizeof(KNIGHT_BUFF_MAGIC_CORRECTION), 7, _struct_KNIGHT_BUFF_MAGIC_CORRECTION_fieldinfo, _struct_KNIGHT_BUFF_MAGIC_CORRECTION_readproc, _struct_KNIGHT_BUFF_MAGIC_CORRECTION_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_BUFF_MAGIC_CORRECTION>()
	{
		return &_rfl_struct_KNIGHT_BUFF_MAGIC_CORRECTION_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_BUFF_BUFF_CORRECTION>(KNIGHT_BUFF_BUFF_CORRECTION& Value)
	{
		if(!BufferReader::Read<KNIGHT_BUFF_CONFIG>(Value)) return false;
		if(!ReadStringArray<KNIGHT_ID_MAX, KNIGHT_ARRAY_ELEMENT_MAX>(Value.IDs)) return false;
		if(!Read<_U8>(Value.Type)) return false;
		if(!Read<_F32>(Value.MissRate)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_BUFF_BUFF_CORRECTION>(const KNIGHT_BUFF_BUFF_CORRECTION& Value)
	{
		if(!BufferWriter::Write<KNIGHT_BUFF_CONFIG>(Value)) return false;
		if(!WriteStringArray<KNIGHT_ID_MAX, KNIGHT_ARRAY_ELEMENT_MAX>(Value.IDs)) return false;
		if(!Write<_U8>(Value.Type)) return false;
		if(!Write<_F32>(Value.MissRate)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_BUFF_BUFF_CORRECTION_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_BUFF_BUFF_CORRECTION>(*((KNIGHT_BUFF_BUFF_CORRECTION*)data));
	}

	static bool _struct_KNIGHT_BUFF_BUFF_CORRECTION_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_BUFF_BUFF_CORRECTION>(*((const KNIGHT_BUFF_BUFF_CORRECTION*)data));
	}

	static FIELD_INFO _struct_KNIGHT_BUFF_BUFF_CORRECTION_fieldinfo[] =
	{
		{TYPE_STRING|TYPE_ARRAY, "IDs", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_BUFF_CORRECTION, IDs), NULL, (_U16)KNIGHT_ID_MAX, (_U16)KNIGHT_ARRAY_ELEMENT_MAX, (_U16)((size_t)(&((DDL::Array<DDL::String<KNIGHT_ID_MAX>, KNIGHT_ARRAY_ELEMENT_MAX>*)NULL)->_Array)), (_U16)sizeof(DDL::String<KNIGHT_ID_MAX>), NULL},
		{TYPE_U8, "Type", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_BUFF_CORRECTION, Type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_F32, "MissRate", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_BUFF_CORRECTION, MissRate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_BUFF_BUFF_CORRECTION_info = { &_rfl_struct_KNIGHT_BUFF_CONFIG_info, "KNIGHT_BUFF_BUFF_CORRECTION", sizeof(KNIGHT_BUFF_BUFF_CORRECTION), 3, _struct_KNIGHT_BUFF_BUFF_CORRECTION_fieldinfo, _struct_KNIGHT_BUFF_BUFF_CORRECTION_readproc, _struct_KNIGHT_BUFF_BUFF_CORRECTION_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_BUFF_BUFF_CORRECTION>()
	{
		return &_rfl_struct_KNIGHT_BUFF_BUFF_CORRECTION_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_BUFF_ATTACK_SLICES_CORRECTION>(KNIGHT_BUFF_ATTACK_SLICES_CORRECTION& Value)
	{
		if(!BufferReader::Read<KNIGHT_BUFF_CONFIG>(Value)) return false;
		if(!Read<_U8>(Value.AttackType)) return false;
		if(!Read<_S32>(Value.HitScopeBias)) return false;
		if(!Read<_S32>(Value.HitTimingBias)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_BUFF_ATTACK_SLICES_CORRECTION>(const KNIGHT_BUFF_ATTACK_SLICES_CORRECTION& Value)
	{
		if(!BufferWriter::Write<KNIGHT_BUFF_CONFIG>(Value)) return false;
		if(!Write<_U8>(Value.AttackType)) return false;
		if(!Write<_S32>(Value.HitScopeBias)) return false;
		if(!Write<_S32>(Value.HitTimingBias)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_BUFF_ATTACK_SLICES_CORRECTION_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_BUFF_ATTACK_SLICES_CORRECTION>(*((KNIGHT_BUFF_ATTACK_SLICES_CORRECTION*)data));
	}

	static bool _struct_KNIGHT_BUFF_ATTACK_SLICES_CORRECTION_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_BUFF_ATTACK_SLICES_CORRECTION>(*((const KNIGHT_BUFF_ATTACK_SLICES_CORRECTION*)data));
	}

	static FIELD_INFO _struct_KNIGHT_BUFF_ATTACK_SLICES_CORRECTION_fieldinfo[] =
	{
		{TYPE_U8, "AttackType", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_ATTACK_SLICES_CORRECTION, AttackType), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_S32, "HitScopeBias", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_ATTACK_SLICES_CORRECTION, HitScopeBias), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "HitTimingBias", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_BUFF_ATTACK_SLICES_CORRECTION, HitTimingBias), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_BUFF_ATTACK_SLICES_CORRECTION_info = { &_rfl_struct_KNIGHT_BUFF_CONFIG_info, "KNIGHT_BUFF_ATTACK_SLICES_CORRECTION", sizeof(KNIGHT_BUFF_ATTACK_SLICES_CORRECTION), 3, _struct_KNIGHT_BUFF_ATTACK_SLICES_CORRECTION_fieldinfo, _struct_KNIGHT_BUFF_ATTACK_SLICES_CORRECTION_readproc, _struct_KNIGHT_BUFF_ATTACK_SLICES_CORRECTION_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_BUFF_ATTACK_SLICES_CORRECTION>()
	{
		return &_rfl_struct_KNIGHT_BUFF_ATTACK_SLICES_CORRECTION_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_ITEM_CONFIG>(KNIGHT_ITEM_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!ReadString<KNIGHT_RESOURCE_URL_MAX>(Value.ResourceURL)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_ITEM_CONFIG>(const KNIGHT_ITEM_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!WriteString<KNIGHT_RESOURCE_URL_MAX>(Value.ResourceURL)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_ITEM_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_ITEM_CONFIG>(*((KNIGHT_ITEM_CONFIG*)data));
	}

	static bool _struct_KNIGHT_ITEM_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_ITEM_CONFIG>(*((const KNIGHT_ITEM_CONFIG*)data));
	}

	static FIELD_INFO _struct_KNIGHT_ITEM_CONFIG_fieldinfo[] =
	{
		{TYPE_STRING, "ResourceURL", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_ITEM_CONFIG, ResourceURL), NULL, (_U16)KNIGHT_RESOURCE_URL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<KNIGHT_RESOURCE_URL_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_ITEM_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "KNIGHT_ITEM_CONFIG", sizeof(KNIGHT_ITEM_CONFIG), 1, _struct_KNIGHT_ITEM_CONFIG_fieldinfo, _struct_KNIGHT_ITEM_CONFIG_readproc, _struct_KNIGHT_ITEM_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_ITEM_CONFIG>()
	{
		return &_rfl_struct_KNIGHT_ITEM_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_EQUIPMENT_CONFIG>(KNIGHT_EQUIPMENT_CONFIG& Value)
	{
		if(!BufferReader::Read<KNIGHT_ITEM_CONFIG>(Value)) return false;
		if(!ReadString<KNIGHT_DESCRIPTION_MAX>(Value.RealName)) return false;
		if(!ReadString<KNIGHT_DESCRIPTION_MAX>(Value.Desc)) return false;
		if(!Read<_U32>(Value.Level)) return false;
		if(!Read<_U32>(Value.Rank)) return false;
		if(!Read<_U32>(Value.MantraSize)) return false;
		if(!ReadArray<KNIGHT_ATTRIBUTE_MODIFY_SETTING, KNIGHT_ARRAY_ELEMENT_MAX>(Value.InitialValue)) return false;
		if(!ReadArray<KNIGHT_ATTRIBUTE_MODIFY_SETTING, KNIGHT_ARRAY_ELEMENT_MAX>(Value.GrowthValue)) return false;
		if(!ReadStringArray<KNIGHT_ID_MAX, KNIGHT_ARRAY_ELEMENT_MAX>(Value.SkillIDs)) return false;
		if(!ReadStringArray<KNIGHT_ID_MAX, KNIGHT_ARRAY_ELEMENT_MAX>(Value.BuffIDs)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_EQUIPMENT_CONFIG>(const KNIGHT_EQUIPMENT_CONFIG& Value)
	{
		if(!BufferWriter::Write<KNIGHT_ITEM_CONFIG>(Value)) return false;
		if(!WriteString<KNIGHT_DESCRIPTION_MAX>(Value.RealName)) return false;
		if(!WriteString<KNIGHT_DESCRIPTION_MAX>(Value.Desc)) return false;
		if(!Write<_U32>(Value.Level)) return false;
		if(!Write<_U32>(Value.Rank)) return false;
		if(!Write<_U32>(Value.MantraSize)) return false;
		if(!WriteArray<KNIGHT_ATTRIBUTE_MODIFY_SETTING, KNIGHT_ARRAY_ELEMENT_MAX>(Value.InitialValue)) return false;
		if(!WriteArray<KNIGHT_ATTRIBUTE_MODIFY_SETTING, KNIGHT_ARRAY_ELEMENT_MAX>(Value.GrowthValue)) return false;
		if(!WriteStringArray<KNIGHT_ID_MAX, KNIGHT_ARRAY_ELEMENT_MAX>(Value.SkillIDs)) return false;
		if(!WriteStringArray<KNIGHT_ID_MAX, KNIGHT_ARRAY_ELEMENT_MAX>(Value.BuffIDs)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_EQUIPMENT_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_EQUIPMENT_CONFIG>(*((KNIGHT_EQUIPMENT_CONFIG*)data));
	}

	static bool _struct_KNIGHT_EQUIPMENT_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_EQUIPMENT_CONFIG>(*((const KNIGHT_EQUIPMENT_CONFIG*)data));
	}

	static FIELD_INFO _struct_KNIGHT_EQUIPMENT_CONFIG_fieldinfo[] =
	{
		{TYPE_STRING, "RealName", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_EQUIPMENT_CONFIG, RealName), NULL, (_U16)KNIGHT_DESCRIPTION_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<KNIGHT_DESCRIPTION_MAX>), NULL},
		{TYPE_STRING, "Desc", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_EQUIPMENT_CONFIG, Desc), NULL, (_U16)KNIGHT_DESCRIPTION_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<KNIGHT_DESCRIPTION_MAX>), NULL},
		{TYPE_U32, "Level", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_EQUIPMENT_CONFIG, Level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "Rank", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_EQUIPMENT_CONFIG, Rank), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "MantraSize", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_EQUIPMENT_CONFIG, MantraSize), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "InitialValue", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_EQUIPMENT_CONFIG, InitialValue), &_rfl_struct_KNIGHT_ATTRIBUTE_MODIFY_SETTING_info, (_U16)-1, (_U16)KNIGHT_ARRAY_ELEMENT_MAX, (_U16)((size_t)(&((DDL::Array<KNIGHT_ATTRIBUTE_MODIFY_SETTING, KNIGHT_ARRAY_ELEMENT_MAX>*)NULL)->_Array)), (_U16)sizeof(KNIGHT_ATTRIBUTE_MODIFY_SETTING), NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "GrowthValue", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_EQUIPMENT_CONFIG, GrowthValue), &_rfl_struct_KNIGHT_ATTRIBUTE_MODIFY_SETTING_info, (_U16)-1, (_U16)KNIGHT_ARRAY_ELEMENT_MAX, (_U16)((size_t)(&((DDL::Array<KNIGHT_ATTRIBUTE_MODIFY_SETTING, KNIGHT_ARRAY_ELEMENT_MAX>*)NULL)->_Array)), (_U16)sizeof(KNIGHT_ATTRIBUTE_MODIFY_SETTING), NULL},
		{TYPE_STRING|TYPE_ARRAY, "SkillIDs", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_EQUIPMENT_CONFIG, SkillIDs), NULL, (_U16)KNIGHT_ID_MAX, (_U16)KNIGHT_ARRAY_ELEMENT_MAX, (_U16)((size_t)(&((DDL::Array<DDL::String<KNIGHT_ID_MAX>, KNIGHT_ARRAY_ELEMENT_MAX>*)NULL)->_Array)), (_U16)sizeof(DDL::String<KNIGHT_ID_MAX>), NULL},
		{TYPE_STRING|TYPE_ARRAY, "BuffIDs", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_EQUIPMENT_CONFIG, BuffIDs), NULL, (_U16)KNIGHT_ID_MAX, (_U16)KNIGHT_ARRAY_ELEMENT_MAX, (_U16)((size_t)(&((DDL::Array<DDL::String<KNIGHT_ID_MAX>, KNIGHT_ARRAY_ELEMENT_MAX>*)NULL)->_Array)), (_U16)sizeof(DDL::String<KNIGHT_ID_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_EQUIPMENT_CONFIG_info = { &_rfl_struct_KNIGHT_ITEM_CONFIG_info, "KNIGHT_EQUIPMENT_CONFIG", sizeof(KNIGHT_EQUIPMENT_CONFIG), 9, _struct_KNIGHT_EQUIPMENT_CONFIG_fieldinfo, _struct_KNIGHT_EQUIPMENT_CONFIG_readproc, _struct_KNIGHT_EQUIPMENT_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_EQUIPMENT_CONFIG>()
	{
		return &_rfl_struct_KNIGHT_EQUIPMENT_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_ARMOR_CONFIG>(KNIGHT_ARMOR_CONFIG& Value)
	{
		if(!BufferReader::Read<KNIGHT_EQUIPMENT_CONFIG>(Value)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_ARMOR_CONFIG>(const KNIGHT_ARMOR_CONFIG& Value)
	{
		if(!BufferWriter::Write<KNIGHT_EQUIPMENT_CONFIG>(Value)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_ARMOR_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_ARMOR_CONFIG>(*((KNIGHT_ARMOR_CONFIG*)data));
	}

	static bool _struct_KNIGHT_ARMOR_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_ARMOR_CONFIG>(*((const KNIGHT_ARMOR_CONFIG*)data));
	}

	STRUCT_INFO _rfl_struct_KNIGHT_ARMOR_CONFIG_info = { &_rfl_struct_KNIGHT_EQUIPMENT_CONFIG_info, "KNIGHT_ARMOR_CONFIG", sizeof(KNIGHT_ARMOR_CONFIG), 0, NULL, _struct_KNIGHT_ARMOR_CONFIG_readproc, _struct_KNIGHT_ARMOR_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_ARMOR_CONFIG>()
	{
		return &_rfl_struct_KNIGHT_ARMOR_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_HELMET_CONFIG>(KNIGHT_HELMET_CONFIG& Value)
	{
		if(!BufferReader::Read<KNIGHT_EQUIPMENT_CONFIG>(Value)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_HELMET_CONFIG>(const KNIGHT_HELMET_CONFIG& Value)
	{
		if(!BufferWriter::Write<KNIGHT_EQUIPMENT_CONFIG>(Value)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_HELMET_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_HELMET_CONFIG>(*((KNIGHT_HELMET_CONFIG*)data));
	}

	static bool _struct_KNIGHT_HELMET_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_HELMET_CONFIG>(*((const KNIGHT_HELMET_CONFIG*)data));
	}

	STRUCT_INFO _rfl_struct_KNIGHT_HELMET_CONFIG_info = { &_rfl_struct_KNIGHT_EQUIPMENT_CONFIG_info, "KNIGHT_HELMET_CONFIG", sizeof(KNIGHT_HELMET_CONFIG), 0, NULL, _struct_KNIGHT_HELMET_CONFIG_readproc, _struct_KNIGHT_HELMET_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_HELMET_CONFIG>()
	{
		return &_rfl_struct_KNIGHT_HELMET_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_SHIELD_CONFIG>(KNIGHT_SHIELD_CONFIG& Value)
	{
		if(!BufferReader::Read<KNIGHT_EQUIPMENT_CONFIG>(Value)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_SHIELD_CONFIG>(const KNIGHT_SHIELD_CONFIG& Value)
	{
		if(!BufferWriter::Write<KNIGHT_EQUIPMENT_CONFIG>(Value)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_SHIELD_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_SHIELD_CONFIG>(*((KNIGHT_SHIELD_CONFIG*)data));
	}

	static bool _struct_KNIGHT_SHIELD_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_SHIELD_CONFIG>(*((const KNIGHT_SHIELD_CONFIG*)data));
	}

	STRUCT_INFO _rfl_struct_KNIGHT_SHIELD_CONFIG_info = { &_rfl_struct_KNIGHT_EQUIPMENT_CONFIG_info, "KNIGHT_SHIELD_CONFIG", sizeof(KNIGHT_SHIELD_CONFIG), 0, NULL, _struct_KNIGHT_SHIELD_CONFIG_readproc, _struct_KNIGHT_SHIELD_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_SHIELD_CONFIG>()
	{
		return &_rfl_struct_KNIGHT_SHIELD_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<KNIGHT_WEAPON_CONFIG>(KNIGHT_WEAPON_CONFIG& Value)
	{
		if(!BufferReader::Read<KNIGHT_EQUIPMENT_CONFIG>(Value)) return false;
		if(!Read<_U8>(Value.Type)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<KNIGHT_WEAPON_CONFIG>(const KNIGHT_WEAPON_CONFIG& Value)
	{
		if(!BufferWriter::Write<KNIGHT_EQUIPMENT_CONFIG>(Value)) return false;
		if(!Write<_U8>(Value.Type)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_KNIGHT_WEAPON_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<KNIGHT_WEAPON_CONFIG>(*((KNIGHT_WEAPON_CONFIG*)data));
	}

	static bool _struct_KNIGHT_WEAPON_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<KNIGHT_WEAPON_CONFIG>(*((const KNIGHT_WEAPON_CONFIG*)data));
	}

	static FIELD_INFO _struct_KNIGHT_WEAPON_CONFIG_fieldinfo[] =
	{
		{TYPE_U8, "Type", 0, (_U16)ATLAS_OFFSETOF(KNIGHT_WEAPON_CONFIG, Type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_KNIGHT_WEAPON_CONFIG_info = { &_rfl_struct_KNIGHT_EQUIPMENT_CONFIG_info, "KNIGHT_WEAPON_CONFIG", sizeof(KNIGHT_WEAPON_CONFIG), 1, _struct_KNIGHT_WEAPON_CONFIG_fieldinfo, _struct_KNIGHT_WEAPON_CONFIG_readproc, _struct_KNIGHT_WEAPON_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<KNIGHT_WEAPON_CONFIG>()
	{
		return &_rfl_struct_KNIGHT_WEAPON_CONFIG_info;
	}
}

namespace DDLReflect
{
	static FIELD_INFO _class_KNIGHT_C2S_fieldinfos[] = 
	{
		// 0 Ping
		// 1 Create
		{TYPE_STRING, "value", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 2 Delete
		// 3 Set
		{TYPE_STRING, "value", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 4 Get
		// 5 Boardcast
		{TYPE_STRING, "msg", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 6 RoomJoin
		{TYPE_U32, "index", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 7 RoomChat
		{TYPE_STRING, "msg", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 8 RoomLeave
	};
	static FUNCTION_INFO _class_KNIGHT_C2S_funcinfos[] = 
	{
		{"Ping", 0, _class_KNIGHT_C2S_fieldinfos+0},
		{"Create", 1, _class_KNIGHT_C2S_fieldinfos+0},
		{"Delete", 0, _class_KNIGHT_C2S_fieldinfos+1},
		{"Set", 1, _class_KNIGHT_C2S_fieldinfos+1},
		{"Get", 0, _class_KNIGHT_C2S_fieldinfos+2},
		{"Boardcast", 1, _class_KNIGHT_C2S_fieldinfos+2},
		{"RoomJoin", 1, _class_KNIGHT_C2S_fieldinfos+3},
		{"RoomChat", 1, _class_KNIGHT_C2S_fieldinfos+4},
		{"RoomLeave", 0, _class_KNIGHT_C2S_fieldinfos+5},
	};
	static CLASS_INFO _class_KNIGHT_C2S_info = { 0, "KNIGHT_C2S", 9, _class_KNIGHT_C2S_funcinfos };
	template<>
	const CLASS_INFO* GetClass<KNIGHT_C2S>()
	{
		return &_class_KNIGHT_C2S_info;
	}
}

namespace DDLReflect
{
	static FIELD_INFO _class_KNIGHT_S2C_fieldinfos[] = 
	{
		// 0 Pong
		// 1 GetCallback
		{TYPE_U32, "aid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRING, "value", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 2 BoardcastCallback
		{TYPE_U32, "uid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRING, "msg", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 3 RoomJoinCallback
		{TYPE_U32, "result", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 4 RoomChatCallback
		{TYPE_U32, "index", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRING, "msg", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 5 RoomLeaveCallback
	};
	static FUNCTION_INFO _class_KNIGHT_S2C_funcinfos[] = 
	{
		{"Pong", 0, _class_KNIGHT_S2C_fieldinfos+0},
		{"GetCallback", 2, _class_KNIGHT_S2C_fieldinfos+0},
		{"BoardcastCallback", 2, _class_KNIGHT_S2C_fieldinfos+2},
		{"RoomJoinCallback", 1, _class_KNIGHT_S2C_fieldinfos+4},
		{"RoomChatCallback", 2, _class_KNIGHT_S2C_fieldinfos+5},
		{"RoomLeaveCallback", 0, _class_KNIGHT_S2C_fieldinfos+7},
	};
	static CLASS_INFO _class_KNIGHT_S2C_info = { 0, "KNIGHT_S2C", 6, _class_KNIGHT_S2C_funcinfos };
	template<>
	const CLASS_INFO* GetClass<KNIGHT_S2C>()
	{
		return &_class_KNIGHT_S2C_info;
	}
}

