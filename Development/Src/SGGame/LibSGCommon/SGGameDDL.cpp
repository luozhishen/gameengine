////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED. DO NOT MODIFY! //
////////////////////////////////////////////////

#include "SGGameDDL.h"

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_WORLD_BOSS_CONFIG>(SG_WORLD_BOSS_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.world_level)) return false;
		if(!Read<_U32>(Value.boss_id)) return false;
		if(!Read<_U32>(Value.base_gold)) return false;
		if(!Read<_U32>(Value.total_gold)) return false;
		if(!Read<_U32>(Value.total_reputation)) return false;
		if(!Read<_U32>(Value.loot)) return false;
		if(!Read<_U32>(Value.reward_gold)) return false;
		if(!Read<_U32>(Value.reward_loot1)) return false;
		if(!Read<_F32>(Value.reward_loot1_rate)) return false;
		if(!Read<_U32>(Value.reward_loot2)) return false;
		if(!Read<_F32>(Value.reward_loot2_rate)) return false;
		if(!ReadString<100>(Value.reward1)) return false;
		if(!ReadString<100>(Value.reward2)) return false;
		if(!ReadString<100>(Value.reward3)) return false;
		if(!ReadString<100>(Value.reward4)) return false;
		if(!ReadString<100>(Value.reward5)) return false;
		if(!ReadString<100>(Value.reward6)) return false;
		if(!ReadString<100>(Value.reward7)) return false;
		if(!ReadString<100>(Value.reward8)) return false;
		if(!ReadString<100>(Value.reward9)) return false;
		if(!ReadString<100>(Value.reward10)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_WORLD_BOSS_CONFIG>(const SG_WORLD_BOSS_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.world_level)) return false;
		if(!Write<_U32>(Value.boss_id)) return false;
		if(!Write<_U32>(Value.base_gold)) return false;
		if(!Write<_U32>(Value.total_gold)) return false;
		if(!Write<_U32>(Value.total_reputation)) return false;
		if(!Write<_U32>(Value.loot)) return false;
		if(!Write<_U32>(Value.reward_gold)) return false;
		if(!Write<_U32>(Value.reward_loot1)) return false;
		if(!Write<_F32>(Value.reward_loot1_rate)) return false;
		if(!Write<_U32>(Value.reward_loot2)) return false;
		if(!Write<_F32>(Value.reward_loot2_rate)) return false;
		if(!WriteString<100>(Value.reward1)) return false;
		if(!WriteString<100>(Value.reward2)) return false;
		if(!WriteString<100>(Value.reward3)) return false;
		if(!WriteString<100>(Value.reward4)) return false;
		if(!WriteString<100>(Value.reward5)) return false;
		if(!WriteString<100>(Value.reward6)) return false;
		if(!WriteString<100>(Value.reward7)) return false;
		if(!WriteString<100>(Value.reward8)) return false;
		if(!WriteString<100>(Value.reward9)) return false;
		if(!WriteString<100>(Value.reward10)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_WORLD_BOSS_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_WORLD_BOSS_CONFIG>(*((SG_WORLD_BOSS_CONFIG*)data));
	}

	static bool _struct_SG_WORLD_BOSS_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_WORLD_BOSS_CONFIG>(*((const SG_WORLD_BOSS_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_WORLD_BOSS_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "world_level", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, world_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "boss_id", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, boss_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "base_gold", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, base_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "total_gold", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, total_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "total_reputation", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, total_reputation), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "loot", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, loot), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_gold", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_loot1", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward_loot1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "reward_loot1_rate", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward_loot1_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "reward_loot2", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward_loot2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "reward_loot2_rate", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward_loot2_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_STRING, "reward1", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward1), NULL, (_U16)100, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<100>), NULL},
		{TYPE_STRING, "reward2", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward2), NULL, (_U16)100, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<100>), NULL},
		{TYPE_STRING, "reward3", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward3), NULL, (_U16)100, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<100>), NULL},
		{TYPE_STRING, "reward4", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward4), NULL, (_U16)100, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<100>), NULL},
		{TYPE_STRING, "reward5", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward5), NULL, (_U16)100, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<100>), NULL},
		{TYPE_STRING, "reward6", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward6), NULL, (_U16)100, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<100>), NULL},
		{TYPE_STRING, "reward7", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward7), NULL, (_U16)100, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<100>), NULL},
		{TYPE_STRING, "reward8", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward8), NULL, (_U16)100, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<100>), NULL},
		{TYPE_STRING, "reward9", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward9), NULL, (_U16)100, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<100>), NULL},
		{TYPE_STRING, "reward10", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_CONFIG, reward10), NULL, (_U16)100, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<100>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_WORLD_BOSS_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_WORLD_BOSS_CONFIG", sizeof(SG_WORLD_BOSS_CONFIG), 21, _struct_SG_WORLD_BOSS_CONFIG_fieldinfo, _struct_SG_WORLD_BOSS_CONFIG_readproc, _struct_SG_WORLD_BOSS_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_WORLD_BOSS_CONFIG>()
	{
		return &_rfl_struct_SG_WORLD_BOSS_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_WORLD_BOSS_INSPIRE_CONFIG>(SG_WORLD_BOSS_INSPIRE_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.times)) return false;
		if(!Read<_U32>(Value.consume_rmb)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_WORLD_BOSS_INSPIRE_CONFIG>(const SG_WORLD_BOSS_INSPIRE_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.times)) return false;
		if(!Write<_U32>(Value.consume_rmb)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_WORLD_BOSS_INSPIRE_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_WORLD_BOSS_INSPIRE_CONFIG>(*((SG_WORLD_BOSS_INSPIRE_CONFIG*)data));
	}

	static bool _struct_SG_WORLD_BOSS_INSPIRE_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_WORLD_BOSS_INSPIRE_CONFIG>(*((const SG_WORLD_BOSS_INSPIRE_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_WORLD_BOSS_INSPIRE_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "times", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_INSPIRE_CONFIG, times), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "consume_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_WORLD_BOSS_INSPIRE_CONFIG, consume_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_WORLD_BOSS_INSPIRE_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_WORLD_BOSS_INSPIRE_CONFIG", sizeof(SG_WORLD_BOSS_INSPIRE_CONFIG), 2, _struct_SG_WORLD_BOSS_INSPIRE_CONFIG_fieldinfo, _struct_SG_WORLD_BOSS_INSPIRE_CONFIG_readproc, _struct_SG_WORLD_BOSS_INSPIRE_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_WORLD_BOSS_INSPIRE_CONFIG>()
	{
		return &_rfl_struct_SG_WORLD_BOSS_INSPIRE_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_RECHARGE_CONFIG>(SG_RECHARGE_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.index)) return false;
		if(!Read<_U32>(Value.yuanbao)) return false;
		if(!Read<_U32>(Value.extra_yuanbao)) return false;
		if(!ReadString<SG_RECHARGE_YUANBAO_DESC>(Value.yuanbao_desc)) return false;
		if(!Read<_U32>(Value.price)) return false;
		if(!ReadString<SG_RECHARGE_PRICE_DESC>(Value.price_desc)) return false;
		if(!ReadString<SG_RECHARGE_OTHER_DESC>(Value.other_desc)) return false;
		if(!ReadString<SG_ICON_MAX>(Value.icon)) return false;
		if(!Read<_U32>(Value.U)) return false;
		if(!Read<_U32>(Value.V)) return false;
		if(!Read<_U32>(Value.UL)) return false;
		if(!Read<_U32>(Value.VL)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_RECHARGE_CONFIG>(const SG_RECHARGE_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.index)) return false;
		if(!Write<_U32>(Value.yuanbao)) return false;
		if(!Write<_U32>(Value.extra_yuanbao)) return false;
		if(!WriteString<SG_RECHARGE_YUANBAO_DESC>(Value.yuanbao_desc)) return false;
		if(!Write<_U32>(Value.price)) return false;
		if(!WriteString<SG_RECHARGE_PRICE_DESC>(Value.price_desc)) return false;
		if(!WriteString<SG_RECHARGE_OTHER_DESC>(Value.other_desc)) return false;
		if(!WriteString<SG_ICON_MAX>(Value.icon)) return false;
		if(!Write<_U32>(Value.U)) return false;
		if(!Write<_U32>(Value.V)) return false;
		if(!Write<_U32>(Value.UL)) return false;
		if(!Write<_U32>(Value.VL)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_RECHARGE_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_RECHARGE_CONFIG>(*((SG_RECHARGE_CONFIG*)data));
	}

	static bool _struct_SG_RECHARGE_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_RECHARGE_CONFIG>(*((const SG_RECHARGE_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_RECHARGE_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "index", 0, (_U16)ATLAS_OFFSETOF(SG_RECHARGE_CONFIG, index), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "yuanbao", 0, (_U16)ATLAS_OFFSETOF(SG_RECHARGE_CONFIG, yuanbao), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "extra_yuanbao", 0, (_U16)ATLAS_OFFSETOF(SG_RECHARGE_CONFIG, extra_yuanbao), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "yuanbao_desc", 0, (_U16)ATLAS_OFFSETOF(SG_RECHARGE_CONFIG, yuanbao_desc), NULL, (_U16)SG_RECHARGE_YUANBAO_DESC, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_RECHARGE_YUANBAO_DESC>), NULL},
		{TYPE_U32, "price", 0, (_U16)ATLAS_OFFSETOF(SG_RECHARGE_CONFIG, price), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "price_desc", 0, (_U16)ATLAS_OFFSETOF(SG_RECHARGE_CONFIG, price_desc), NULL, (_U16)SG_RECHARGE_PRICE_DESC, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_RECHARGE_PRICE_DESC>), NULL},
		{TYPE_STRING, "other_desc", 0, (_U16)ATLAS_OFFSETOF(SG_RECHARGE_CONFIG, other_desc), NULL, (_U16)SG_RECHARGE_OTHER_DESC, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_RECHARGE_OTHER_DESC>), NULL},
		{TYPE_STRING, "icon", 0, (_U16)ATLAS_OFFSETOF(SG_RECHARGE_CONFIG, icon), NULL, (_U16)SG_ICON_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_ICON_MAX>), NULL},
		{TYPE_U32, "U", 0, (_U16)ATLAS_OFFSETOF(SG_RECHARGE_CONFIG, U), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "V", 0, (_U16)ATLAS_OFFSETOF(SG_RECHARGE_CONFIG, V), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "UL", 0, (_U16)ATLAS_OFFSETOF(SG_RECHARGE_CONFIG, UL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "VL", 0, (_U16)ATLAS_OFFSETOF(SG_RECHARGE_CONFIG, VL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_RECHARGE_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_RECHARGE_CONFIG", sizeof(SG_RECHARGE_CONFIG), 12, _struct_SG_RECHARGE_CONFIG_fieldinfo, _struct_SG_RECHARGE_CONFIG_readproc, _struct_SG_RECHARGE_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_RECHARGE_CONFIG>()
	{
		return &_rfl_struct_SG_RECHARGE_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_NEWCOMER_GUIDE_CONFIG>(SG_NEWCOMER_GUIDE_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.function_id)) return false;
		if(!Read<_U32>(Value.process_id)) return false;
		if(!Read<_U8>(Value.type)) return false;
		if(!Read<_U32>(Value.remain_time)) return false;
		if(!Read<_U8>(Value.condition1)) return false;
		if(!Read<_U32>(Value.condition1_param1)) return false;
		if(!Read<_U32>(Value.condition1_param2)) return false;
		if(!Read<_U8>(Value.condition2)) return false;
		if(!Read<_U32>(Value.condition2_param1)) return false;
		if(!Read<_U32>(Value.condition2_param2)) return false;
		if(!ReadString<SG_NEWCOMER_UI_MAX>(Value.open_function)) return false;
		if(!ReadString<SG_NEWCOMER_GUIDE_DESC_MAX>(Value.desc)) return false;
		if(!ReadString<SG_NEWCOMER_GUIDE_PIC_MAX>(Value.guider_pic)) return false;
		if(!Read<_U32>(Value.U)) return false;
		if(!Read<_U32>(Value.V)) return false;
		if(!Read<_U32>(Value.UL)) return false;
		if(!Read<_U32>(Value.VL)) return false;
		if(!ReadString<SG_ICON_MAX>(Value.icon)) return false;
		if(!Read<_U32>(Value.U2)) return false;
		if(!Read<_U32>(Value.V2)) return false;
		if(!Read<_U32>(Value.UL2)) return false;
		if(!Read<_U32>(Value.VL2)) return false;
		if(!ReadString<SG_NEWCOMER_GUIDER_LABEL_MAX>(Value.guider_label)) return false;
		if(!ReadString<SG_TEX_MAX>(Value.tex)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_NEWCOMER_GUIDE_CONFIG>(const SG_NEWCOMER_GUIDE_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.function_id)) return false;
		if(!Write<_U32>(Value.process_id)) return false;
		if(!Write<_U8>(Value.type)) return false;
		if(!Write<_U32>(Value.remain_time)) return false;
		if(!Write<_U8>(Value.condition1)) return false;
		if(!Write<_U32>(Value.condition1_param1)) return false;
		if(!Write<_U32>(Value.condition1_param2)) return false;
		if(!Write<_U8>(Value.condition2)) return false;
		if(!Write<_U32>(Value.condition2_param1)) return false;
		if(!Write<_U32>(Value.condition2_param2)) return false;
		if(!WriteString<SG_NEWCOMER_UI_MAX>(Value.open_function)) return false;
		if(!WriteString<SG_NEWCOMER_GUIDE_DESC_MAX>(Value.desc)) return false;
		if(!WriteString<SG_NEWCOMER_GUIDE_PIC_MAX>(Value.guider_pic)) return false;
		if(!Write<_U32>(Value.U)) return false;
		if(!Write<_U32>(Value.V)) return false;
		if(!Write<_U32>(Value.UL)) return false;
		if(!Write<_U32>(Value.VL)) return false;
		if(!WriteString<SG_ICON_MAX>(Value.icon)) return false;
		if(!Write<_U32>(Value.U2)) return false;
		if(!Write<_U32>(Value.V2)) return false;
		if(!Write<_U32>(Value.UL2)) return false;
		if(!Write<_U32>(Value.VL2)) return false;
		if(!WriteString<SG_NEWCOMER_GUIDER_LABEL_MAX>(Value.guider_label)) return false;
		if(!WriteString<SG_TEX_MAX>(Value.tex)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_NEWCOMER_GUIDE_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_NEWCOMER_GUIDE_CONFIG>(*((SG_NEWCOMER_GUIDE_CONFIG*)data));
	}

	static bool _struct_SG_NEWCOMER_GUIDE_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_NEWCOMER_GUIDE_CONFIG>(*((const SG_NEWCOMER_GUIDE_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_NEWCOMER_GUIDE_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "function_id", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, function_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "process_id", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, process_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "type", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "remain_time", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, remain_time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "condition1", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, condition1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "condition1_param1", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, condition1_param1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "condition1_param2", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, condition1_param2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "condition2", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, condition2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "condition2_param1", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, condition2_param1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "condition2_param2", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, condition2_param2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "open_function", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, open_function), NULL, (_U16)SG_NEWCOMER_UI_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_NEWCOMER_UI_MAX>), NULL},
		{TYPE_STRING, "desc", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, desc), NULL, (_U16)SG_NEWCOMER_GUIDE_DESC_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_NEWCOMER_GUIDE_DESC_MAX>), NULL},
		{TYPE_STRING, "guider_pic", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, guider_pic), NULL, (_U16)SG_NEWCOMER_GUIDE_PIC_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_NEWCOMER_GUIDE_PIC_MAX>), NULL},
		{TYPE_U32, "U", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, U), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "V", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, V), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "UL", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, UL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "VL", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, VL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "icon", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, icon), NULL, (_U16)SG_ICON_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_ICON_MAX>), NULL},
		{TYPE_U32, "U2", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, U2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "V2", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, V2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "UL2", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, UL2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "VL2", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, VL2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "guider_label", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, guider_label), NULL, (_U16)SG_NEWCOMER_GUIDER_LABEL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_NEWCOMER_GUIDER_LABEL_MAX>), NULL},
		{TYPE_STRING, "tex", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_CONFIG, tex), NULL, (_U16)SG_TEX_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TEX_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_NEWCOMER_GUIDE_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_NEWCOMER_GUIDE_CONFIG", sizeof(SG_NEWCOMER_GUIDE_CONFIG), 24, _struct_SG_NEWCOMER_GUIDE_CONFIG_fieldinfo, _struct_SG_NEWCOMER_GUIDE_CONFIG_readproc, _struct_SG_NEWCOMER_GUIDE_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_NEWCOMER_GUIDE_CONFIG>()
	{
		return &_rfl_struct_SG_NEWCOMER_GUIDE_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_NEWCOMER_GUIDE_PROCESS_CONFIG>(SG_NEWCOMER_GUIDE_PROCESS_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.process_id)) return false;
		if(!Read<_U8>(Value.type)) return false;
		if(!Read<_U32>(Value.group)) return false;
		if(!Read<_U32>(Value.close_level)) return false;
		if(!Read<_U8>(Value.termial_type)) return false;
		if(!Read<_U32>(Value.step1)) return false;
		if(!Read<_U32>(Value.step2)) return false;
		if(!Read<_U32>(Value.step3)) return false;
		if(!Read<_U32>(Value.step4)) return false;
		if(!Read<_U32>(Value.step5)) return false;
		if(!Read<_U32>(Value.step6)) return false;
		if(!Read<_U32>(Value.step7)) return false;
		if(!Read<_U32>(Value.step8)) return false;
		if(!Read<_U32>(Value.step9)) return false;
		if(!Read<_U32>(Value.step10)) return false;
		if(!Read<_U32>(Value.step11)) return false;
		if(!Read<_U32>(Value.step12)) return false;
		if(!Read<_U32>(Value.step13)) return false;
		if(!Read<_U32>(Value.step14)) return false;
		if(!Read<_U32>(Value.step15)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_NEWCOMER_GUIDE_PROCESS_CONFIG>(const SG_NEWCOMER_GUIDE_PROCESS_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.process_id)) return false;
		if(!Write<_U8>(Value.type)) return false;
		if(!Write<_U32>(Value.group)) return false;
		if(!Write<_U32>(Value.close_level)) return false;
		if(!Write<_U8>(Value.termial_type)) return false;
		if(!Write<_U32>(Value.step1)) return false;
		if(!Write<_U32>(Value.step2)) return false;
		if(!Write<_U32>(Value.step3)) return false;
		if(!Write<_U32>(Value.step4)) return false;
		if(!Write<_U32>(Value.step5)) return false;
		if(!Write<_U32>(Value.step6)) return false;
		if(!Write<_U32>(Value.step7)) return false;
		if(!Write<_U32>(Value.step8)) return false;
		if(!Write<_U32>(Value.step9)) return false;
		if(!Write<_U32>(Value.step10)) return false;
		if(!Write<_U32>(Value.step11)) return false;
		if(!Write<_U32>(Value.step12)) return false;
		if(!Write<_U32>(Value.step13)) return false;
		if(!Write<_U32>(Value.step14)) return false;
		if(!Write<_U32>(Value.step15)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_NEWCOMER_GUIDE_PROCESS_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_NEWCOMER_GUIDE_PROCESS_CONFIG>(*((SG_NEWCOMER_GUIDE_PROCESS_CONFIG*)data));
	}

	static bool _struct_SG_NEWCOMER_GUIDE_PROCESS_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_NEWCOMER_GUIDE_PROCESS_CONFIG>(*((const SG_NEWCOMER_GUIDE_PROCESS_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_NEWCOMER_GUIDE_PROCESS_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "process_id", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, process_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "type", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "group", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, group), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "close_level", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, close_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "termial_type", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, termial_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "step1", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "step2", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "step3", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "step4", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step4), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "step5", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step5), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "step6", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step6), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "step7", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step7), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "step8", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step8), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "step9", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step9), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "step10", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step10), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "step11", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step11), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "step12", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step12), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "step13", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step13), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "step14", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step14), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "step15", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_PROCESS_CONFIG, step15), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_NEWCOMER_GUIDE_PROCESS_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_NEWCOMER_GUIDE_PROCESS_CONFIG", sizeof(SG_NEWCOMER_GUIDE_PROCESS_CONFIG), 20, _struct_SG_NEWCOMER_GUIDE_PROCESS_CONFIG_fieldinfo, _struct_SG_NEWCOMER_GUIDE_PROCESS_CONFIG_readproc, _struct_SG_NEWCOMER_GUIDE_PROCESS_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_NEWCOMER_GUIDE_PROCESS_CONFIG>()
	{
		return &_rfl_struct_SG_NEWCOMER_GUIDE_PROCESS_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_NEWCOMER_GUIDE_STEP_CONFIG>(SG_NEWCOMER_GUIDE_STEP_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.step_id)) return false;
		if(!ReadString<SG_NEWCOMER_UI_MAX>(Value.open_ui)) return false;
		if(!ReadString<SG_NEWCOMER_UI_MAX>(Value.ui_condition)) return false;
		if(!Read<_U8>(Value.complete_type)) return false;
		if(!ReadString<SG_NEWCOMER_UI_MAX>(Value.complete_param1)) return false;
		if(!Read<_U32>(Value.complete_param2)) return false;
		if(!Read<_U32>(Value.button_tip)) return false;
		if(!ReadString<SG_NEWCOMER_UI_MAX>(Value.button_param1)) return false;
		if(!Read<_U32>(Value.button_param2)) return false;
		if(!Read<_U8>(Value.arrow_direction)) return false;
		if(!Read<_U32>(Value.offset_x)) return false;
		if(!Read<_U32>(Value.offset_y)) return false;
		if(!ReadString<SG_NEWCOMER_GUIDE_TIP_MAX>(Value.tip_desc)) return false;
		if(!Read<_U32>(Value.up)) return false;
		if(!Read<_U32>(Value.down)) return false;
		if(!Read<_U32>(Value.left)) return false;
		if(!Read<_U32>(Value.right)) return false;
		if(!Read<_U32>(Value.transparency)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_NEWCOMER_GUIDE_STEP_CONFIG>(const SG_NEWCOMER_GUIDE_STEP_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.step_id)) return false;
		if(!WriteString<SG_NEWCOMER_UI_MAX>(Value.open_ui)) return false;
		if(!WriteString<SG_NEWCOMER_UI_MAX>(Value.ui_condition)) return false;
		if(!Write<_U8>(Value.complete_type)) return false;
		if(!WriteString<SG_NEWCOMER_UI_MAX>(Value.complete_param1)) return false;
		if(!Write<_U32>(Value.complete_param2)) return false;
		if(!Write<_U32>(Value.button_tip)) return false;
		if(!WriteString<SG_NEWCOMER_UI_MAX>(Value.button_param1)) return false;
		if(!Write<_U32>(Value.button_param2)) return false;
		if(!Write<_U8>(Value.arrow_direction)) return false;
		if(!Write<_U32>(Value.offset_x)) return false;
		if(!Write<_U32>(Value.offset_y)) return false;
		if(!WriteString<SG_NEWCOMER_GUIDE_TIP_MAX>(Value.tip_desc)) return false;
		if(!Write<_U32>(Value.up)) return false;
		if(!Write<_U32>(Value.down)) return false;
		if(!Write<_U32>(Value.left)) return false;
		if(!Write<_U32>(Value.right)) return false;
		if(!Write<_U32>(Value.transparency)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_NEWCOMER_GUIDE_STEP_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_NEWCOMER_GUIDE_STEP_CONFIG>(*((SG_NEWCOMER_GUIDE_STEP_CONFIG*)data));
	}

	static bool _struct_SG_NEWCOMER_GUIDE_STEP_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_NEWCOMER_GUIDE_STEP_CONFIG>(*((const SG_NEWCOMER_GUIDE_STEP_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_NEWCOMER_GUIDE_STEP_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "step_id", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, step_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "open_ui", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, open_ui), NULL, (_U16)SG_NEWCOMER_UI_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_NEWCOMER_UI_MAX>), NULL},
		{TYPE_STRING, "ui_condition", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, ui_condition), NULL, (_U16)SG_NEWCOMER_UI_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_NEWCOMER_UI_MAX>), NULL},
		{TYPE_U8, "complete_type", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, complete_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "complete_param1", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, complete_param1), NULL, (_U16)SG_NEWCOMER_UI_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_NEWCOMER_UI_MAX>), NULL},
		{TYPE_U32, "complete_param2", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, complete_param2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "button_tip", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, button_tip), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "button_param1", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, button_param1), NULL, (_U16)SG_NEWCOMER_UI_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_NEWCOMER_UI_MAX>), NULL},
		{TYPE_U32, "button_param2", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, button_param2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "arrow_direction", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, arrow_direction), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "offset_x", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, offset_x), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "offset_y", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, offset_y), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "tip_desc", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, tip_desc), NULL, (_U16)SG_NEWCOMER_GUIDE_TIP_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_NEWCOMER_GUIDE_TIP_MAX>), NULL},
		{TYPE_U32, "up", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, up), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "down", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, down), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "left", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, left), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "right", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, right), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "transparency", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_STEP_CONFIG, transparency), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_NEWCOMER_GUIDE_STEP_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_NEWCOMER_GUIDE_STEP_CONFIG", sizeof(SG_NEWCOMER_GUIDE_STEP_CONFIG), 18, _struct_SG_NEWCOMER_GUIDE_STEP_CONFIG_fieldinfo, _struct_SG_NEWCOMER_GUIDE_STEP_CONFIG_readproc, _struct_SG_NEWCOMER_GUIDE_STEP_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_NEWCOMER_GUIDE_STEP_CONFIG>()
	{
		return &_rfl_struct_SG_NEWCOMER_GUIDE_STEP_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DAILY_SEARCH_CONFIG>(SG_DAILY_SEARCH_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.road_pt)) return false;
		if(!Read<_U8>(Value.road_type)) return false;
		if(!Read<_U32>(Value.param)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_DAILY_SEARCH_CONFIG>(const SG_DAILY_SEARCH_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.road_pt)) return false;
		if(!Write<_U8>(Value.road_type)) return false;
		if(!Write<_U32>(Value.param)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_DAILY_SEARCH_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_DAILY_SEARCH_CONFIG>(*((SG_DAILY_SEARCH_CONFIG*)data));
	}

	static bool _struct_SG_DAILY_SEARCH_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_DAILY_SEARCH_CONFIG>(*((const SG_DAILY_SEARCH_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_DAILY_SEARCH_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "road_pt", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_SEARCH_CONFIG, road_pt), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "road_type", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_SEARCH_CONFIG, road_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "param", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_SEARCH_CONFIG, param), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_DAILY_SEARCH_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_DAILY_SEARCH_CONFIG", sizeof(SG_DAILY_SEARCH_CONFIG), 3, _struct_SG_DAILY_SEARCH_CONFIG_fieldinfo, _struct_SG_DAILY_SEARCH_CONFIG_readproc, _struct_SG_DAILY_SEARCH_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_DAILY_SEARCH_CONFIG>()
	{
		return &_rfl_struct_SG_DAILY_SEARCH_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DAILY_SEARCH_REWARD_CONFIG>(SG_DAILY_SEARCH_REWARD_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.circle_num)) return false;
		if(!Read<_U32>(Value.reward_energy)) return false;
		if(!Read<_U32>(Value.reward_rmb)) return false;
		if(!Read<_U32>(Value.reward_item1)) return false;
		if(!Read<_U32>(Value.reward_item1_count)) return false;
		if(!Read<_U32>(Value.reward_item2)) return false;
		if(!Read<_U32>(Value.reward_item2_count)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_DAILY_SEARCH_REWARD_CONFIG>(const SG_DAILY_SEARCH_REWARD_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.circle_num)) return false;
		if(!Write<_U32>(Value.reward_energy)) return false;
		if(!Write<_U32>(Value.reward_rmb)) return false;
		if(!Write<_U32>(Value.reward_item1)) return false;
		if(!Write<_U32>(Value.reward_item1_count)) return false;
		if(!Write<_U32>(Value.reward_item2)) return false;
		if(!Write<_U32>(Value.reward_item2_count)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_DAILY_SEARCH_REWARD_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_DAILY_SEARCH_REWARD_CONFIG>(*((SG_DAILY_SEARCH_REWARD_CONFIG*)data));
	}

	static bool _struct_SG_DAILY_SEARCH_REWARD_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_DAILY_SEARCH_REWARD_CONFIG>(*((const SG_DAILY_SEARCH_REWARD_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_DAILY_SEARCH_REWARD_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "circle_num", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_SEARCH_REWARD_CONFIG, circle_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_energy", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_SEARCH_REWARD_CONFIG, reward_energy), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_SEARCH_REWARD_CONFIG, reward_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item1", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_SEARCH_REWARD_CONFIG, reward_item1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item1_count", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_SEARCH_REWARD_CONFIG, reward_item1_count), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item2", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_SEARCH_REWARD_CONFIG, reward_item2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item2_count", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_SEARCH_REWARD_CONFIG, reward_item2_count), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_DAILY_SEARCH_REWARD_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_DAILY_SEARCH_REWARD_CONFIG", sizeof(SG_DAILY_SEARCH_REWARD_CONFIG), 7, _struct_SG_DAILY_SEARCH_REWARD_CONFIG_fieldinfo, _struct_SG_DAILY_SEARCH_REWARD_CONFIG_readproc, _struct_SG_DAILY_SEARCH_REWARD_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_DAILY_SEARCH_REWARD_CONFIG>()
	{
		return &_rfl_struct_SG_DAILY_SEARCH_REWARD_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ZHANJIANG_LEVEL_CONFIG>(SG_ZHANJIANG_LEVEL_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.level_id)) return false;
		if(!ReadString<SG_TEX_MAX>(Value.general_tex)) return false;
		if(!Read<_U32>(Value.U)) return false;
		if(!Read<_U32>(Value.V)) return false;
		if(!Read<_U32>(Value.UL)) return false;
		if(!Read<_U32>(Value.VL)) return false;
		if(!ReadString<SG_ZHANJIANG_LEVEL_LD_MAX>(Value.LD_map)) return false;
		if(!Read<_U32>(Value.reward_gold)) return false;
		if(!Read<_U32>(Value.reward_exp)) return false;
		if(!Read<_U32>(Value.reward_reputation)) return false;
		if(!Read<_U32>(Value.reward_item1)) return false;
		if(!Read<_F32>(Value.reward_rate1)) return false;
		if(!Read<_U32>(Value.reward_item2)) return false;
		if(!Read<_F32>(Value.reward_rate2)) return false;
		if(!Read<_U32>(Value.reward_item3)) return false;
		if(!Read<_F32>(Value.reward_rate3)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_ZHANJIANG_LEVEL_CONFIG>(const SG_ZHANJIANG_LEVEL_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.level_id)) return false;
		if(!WriteString<SG_TEX_MAX>(Value.general_tex)) return false;
		if(!Write<_U32>(Value.U)) return false;
		if(!Write<_U32>(Value.V)) return false;
		if(!Write<_U32>(Value.UL)) return false;
		if(!Write<_U32>(Value.VL)) return false;
		if(!WriteString<SG_ZHANJIANG_LEVEL_LD_MAX>(Value.LD_map)) return false;
		if(!Write<_U32>(Value.reward_gold)) return false;
		if(!Write<_U32>(Value.reward_exp)) return false;
		if(!Write<_U32>(Value.reward_reputation)) return false;
		if(!Write<_U32>(Value.reward_item1)) return false;
		if(!Write<_F32>(Value.reward_rate1)) return false;
		if(!Write<_U32>(Value.reward_item2)) return false;
		if(!Write<_F32>(Value.reward_rate2)) return false;
		if(!Write<_U32>(Value.reward_item3)) return false;
		if(!Write<_F32>(Value.reward_rate3)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_ZHANJIANG_LEVEL_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_ZHANJIANG_LEVEL_CONFIG>(*((SG_ZHANJIANG_LEVEL_CONFIG*)data));
	}

	static bool _struct_SG_ZHANJIANG_LEVEL_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_ZHANJIANG_LEVEL_CONFIG>(*((const SG_ZHANJIANG_LEVEL_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_ZHANJIANG_LEVEL_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "level_id", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, level_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "general_tex", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, general_tex), NULL, (_U16)SG_TEX_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TEX_MAX>), NULL},
		{TYPE_U32, "U", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, U), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "V", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, V), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "UL", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, UL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "VL", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, VL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "LD_map", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, LD_map), NULL, (_U16)SG_ZHANJIANG_LEVEL_LD_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_ZHANJIANG_LEVEL_LD_MAX>), NULL},
		{TYPE_U32, "reward_gold", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, reward_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_exp", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, reward_exp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_reputation", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, reward_reputation), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item1", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, reward_item1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "reward_rate1", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, reward_rate1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "reward_item2", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, reward_item2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "reward_rate2", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, reward_rate2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "reward_item3", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, reward_item3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "reward_rate3", 0, (_U16)ATLAS_OFFSETOF(SG_ZHANJIANG_LEVEL_CONFIG, reward_rate3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_ZHANJIANG_LEVEL_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_ZHANJIANG_LEVEL_CONFIG", sizeof(SG_ZHANJIANG_LEVEL_CONFIG), 16, _struct_SG_ZHANJIANG_LEVEL_CONFIG_fieldinfo, _struct_SG_ZHANJIANG_LEVEL_CONFIG_readproc, _struct_SG_ZHANJIANG_LEVEL_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_ZHANJIANG_LEVEL_CONFIG>()
	{
		return &_rfl_struct_SG_ZHANJIANG_LEVEL_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_HORSE_CONFIG>(SG_HORSE_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.horse_level)) return false;
		if(!ReadString<SG_HORSE_NAME_MAX>(Value.horse_name)) return false;
		if(!Read<_U8>(Value.horse_star)) return false;
		if(!Read<_U32>(Value.req_exp)) return false;
		if(!Read<_U32>(Value.consume_gold)) return false;
		if(!Read<_U32>(Value.gold_exp)) return false;
		if(!Read<_F32>(Value.gold_10_rate)) return false;
		if(!Read<_U32>(Value.consume_rmb)) return false;
		if(!Read<_U32>(Value.rmb_exp)) return false;
		if(!Read<_F32>(Value.rmb_levelup_rate)) return false;
		if(!Read<_F32>(Value.rmb_10_rate)) return false;
		if(!Read<_F32>(Value.restore_hp_rate)) return false;
		if(!Read<_U32>(Value.soldier_hp)) return false;
		if(!Read<_U32>(Value.soldier_atk)) return false;
		if(!Read<_U32>(Value.soldier_def)) return false;
		if(!Read<_U32>(Value.general_hp)) return false;
		if(!Read<_U32>(Value.general_atk)) return false;
		if(!Read<_U32>(Value.general_def)) return false;
		if(!ReadString<SG_HORSE_MESH_MAX>(Value.mesh)) return false;
		if(!ReadString<SG_TEX_MAX>(Value.tex)) return false;
		if(!Read<_U32>(Value.U)) return false;
		if(!Read<_U32>(Value.V)) return false;
		if(!Read<_U32>(Value.UL)) return false;
		if(!Read<_U32>(Value.VL)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_HORSE_CONFIG>(const SG_HORSE_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.horse_level)) return false;
		if(!WriteString<SG_HORSE_NAME_MAX>(Value.horse_name)) return false;
		if(!Write<_U8>(Value.horse_star)) return false;
		if(!Write<_U32>(Value.req_exp)) return false;
		if(!Write<_U32>(Value.consume_gold)) return false;
		if(!Write<_U32>(Value.gold_exp)) return false;
		if(!Write<_F32>(Value.gold_10_rate)) return false;
		if(!Write<_U32>(Value.consume_rmb)) return false;
		if(!Write<_U32>(Value.rmb_exp)) return false;
		if(!Write<_F32>(Value.rmb_levelup_rate)) return false;
		if(!Write<_F32>(Value.rmb_10_rate)) return false;
		if(!Write<_F32>(Value.restore_hp_rate)) return false;
		if(!Write<_U32>(Value.soldier_hp)) return false;
		if(!Write<_U32>(Value.soldier_atk)) return false;
		if(!Write<_U32>(Value.soldier_def)) return false;
		if(!Write<_U32>(Value.general_hp)) return false;
		if(!Write<_U32>(Value.general_atk)) return false;
		if(!Write<_U32>(Value.general_def)) return false;
		if(!WriteString<SG_HORSE_MESH_MAX>(Value.mesh)) return false;
		if(!WriteString<SG_TEX_MAX>(Value.tex)) return false;
		if(!Write<_U32>(Value.U)) return false;
		if(!Write<_U32>(Value.V)) return false;
		if(!Write<_U32>(Value.UL)) return false;
		if(!Write<_U32>(Value.VL)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_HORSE_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_HORSE_CONFIG>(*((SG_HORSE_CONFIG*)data));
	}

	static bool _struct_SG_HORSE_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_HORSE_CONFIG>(*((const SG_HORSE_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_HORSE_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "horse_level", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, horse_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "horse_name", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, horse_name), NULL, (_U16)SG_HORSE_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_HORSE_NAME_MAX>), NULL},
		{TYPE_U8, "horse_star", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, horse_star), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "req_exp", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, req_exp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "consume_gold", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, consume_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "gold_exp", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, gold_exp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "gold_10_rate", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, gold_10_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "consume_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, consume_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "rmb_exp", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, rmb_exp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "rmb_levelup_rate", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, rmb_levelup_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "rmb_10_rate", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, rmb_10_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "restore_hp_rate", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, restore_hp_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "soldier_hp", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, soldier_hp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "soldier_atk", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, soldier_atk), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "soldier_def", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, soldier_def), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "general_hp", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, general_hp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "general_atk", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, general_atk), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "general_def", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, general_def), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "mesh", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, mesh), NULL, (_U16)SG_HORSE_MESH_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_HORSE_MESH_MAX>), NULL},
		{TYPE_STRING, "tex", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, tex), NULL, (_U16)SG_TEX_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TEX_MAX>), NULL},
		{TYPE_U32, "U", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, U), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "V", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, V), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "UL", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, UL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "VL", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_CONFIG, VL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_HORSE_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_HORSE_CONFIG", sizeof(SG_HORSE_CONFIG), 24, _struct_SG_HORSE_CONFIG_fieldinfo, _struct_SG_HORSE_CONFIG_readproc, _struct_SG_HORSE_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_HORSE_CONFIG>()
	{
		return &_rfl_struct_SG_HORSE_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_HORSE_SETTING_CONFIG>(SG_HORSE_SETTING_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.unlock_level)) return false;
		if(!ReadString<SG_HORSE_NAME_MAX>(Value.horse_name)) return false;
		if(!ReadString<SG_HORSE_DESC_MAX>(Value.desc)) return false;
		if(!ReadString<SG_TEX_MAX>(Value.tex)) return false;
		if(!Read<_U32>(Value.U)) return false;
		if(!Read<_U32>(Value.V)) return false;
		if(!Read<_U32>(Value.UL)) return false;
		if(!Read<_U32>(Value.VL)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_HORSE_SETTING_CONFIG>(const SG_HORSE_SETTING_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.unlock_level)) return false;
		if(!WriteString<SG_HORSE_NAME_MAX>(Value.horse_name)) return false;
		if(!WriteString<SG_HORSE_DESC_MAX>(Value.desc)) return false;
		if(!WriteString<SG_TEX_MAX>(Value.tex)) return false;
		if(!Write<_U32>(Value.U)) return false;
		if(!Write<_U32>(Value.V)) return false;
		if(!Write<_U32>(Value.UL)) return false;
		if(!Write<_U32>(Value.VL)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_HORSE_SETTING_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_HORSE_SETTING_CONFIG>(*((SG_HORSE_SETTING_CONFIG*)data));
	}

	static bool _struct_SG_HORSE_SETTING_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_HORSE_SETTING_CONFIG>(*((const SG_HORSE_SETTING_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_HORSE_SETTING_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "unlock_level", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_SETTING_CONFIG, unlock_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "horse_name", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_SETTING_CONFIG, horse_name), NULL, (_U16)SG_HORSE_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_HORSE_NAME_MAX>), NULL},
		{TYPE_STRING, "desc", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_SETTING_CONFIG, desc), NULL, (_U16)SG_HORSE_DESC_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_HORSE_DESC_MAX>), NULL},
		{TYPE_STRING, "tex", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_SETTING_CONFIG, tex), NULL, (_U16)SG_TEX_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TEX_MAX>), NULL},
		{TYPE_U32, "U", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_SETTING_CONFIG, U), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "V", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_SETTING_CONFIG, V), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "UL", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_SETTING_CONFIG, UL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "VL", 0, (_U16)ATLAS_OFFSETOF(SG_HORSE_SETTING_CONFIG, VL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_HORSE_SETTING_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_HORSE_SETTING_CONFIG", sizeof(SG_HORSE_SETTING_CONFIG), 8, _struct_SG_HORSE_SETTING_CONFIG_fieldinfo, _struct_SG_HORSE_SETTING_CONFIG_readproc, _struct_SG_HORSE_SETTING_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_HORSE_SETTING_CONFIG>()
	{
		return &_rfl_struct_SG_HORSE_SETTING_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ASTROLOGER_CONFIG>(SG_ASTROLOGER_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.astrologer_id)) return false;
		if(!ReadString<SG_ASTROLOGER_NAME_MAX>(Value.astrologer_name)) return false;
		if(!Read<_U32>(Value.level)) return false;
		if(!ReadString<SG_ASTROLOGER_DESC_MAX>(Value.desc)) return false;
		if(!Read<_U32>(Value.consume_gold)) return false;
		if(!Read<_F32>(Value.level_up_percent)) return false;
		if(!Read<_F32>(Value.failed_percent)) return false;
		if(!Read<_U32>(Value.reward1)) return false;
		if(!Read<_F32>(Value.reward_percent1)) return false;
		if(!Read<_U32>(Value.reward2)) return false;
		if(!Read<_F32>(Value.reward_percent2)) return false;
		if(!Read<_U32>(Value.reward3)) return false;
		if(!Read<_F32>(Value.reward_percent3)) return false;
		if(!Read<_U32>(Value.reward4)) return false;
		if(!Read<_F32>(Value.reward_percent4)) return false;
		if(!Read<_U32>(Value.reward5)) return false;
		if(!Read<_F32>(Value.reward_percent5)) return false;
		if(!Read<_U32>(Value.U)) return false;
		if(!Read<_U32>(Value.V)) return false;
		if(!Read<_U32>(Value.UL)) return false;
		if(!Read<_U32>(Value.VL)) return false;
		if(!ReadString<SG_TEX_MAX>(Value.tex)) return false;
		if(!Read<_U32>(Value.U2)) return false;
		if(!Read<_U32>(Value.V2)) return false;
		if(!Read<_U32>(Value.UL2)) return false;
		if(!Read<_U32>(Value.VL2)) return false;
		if(!ReadString<SG_TEX_MAX>(Value.tex2)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_ASTROLOGER_CONFIG>(const SG_ASTROLOGER_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.astrologer_id)) return false;
		if(!WriteString<SG_ASTROLOGER_NAME_MAX>(Value.astrologer_name)) return false;
		if(!Write<_U32>(Value.level)) return false;
		if(!WriteString<SG_ASTROLOGER_DESC_MAX>(Value.desc)) return false;
		if(!Write<_U32>(Value.consume_gold)) return false;
		if(!Write<_F32>(Value.level_up_percent)) return false;
		if(!Write<_F32>(Value.failed_percent)) return false;
		if(!Write<_U32>(Value.reward1)) return false;
		if(!Write<_F32>(Value.reward_percent1)) return false;
		if(!Write<_U32>(Value.reward2)) return false;
		if(!Write<_F32>(Value.reward_percent2)) return false;
		if(!Write<_U32>(Value.reward3)) return false;
		if(!Write<_F32>(Value.reward_percent3)) return false;
		if(!Write<_U32>(Value.reward4)) return false;
		if(!Write<_F32>(Value.reward_percent4)) return false;
		if(!Write<_U32>(Value.reward5)) return false;
		if(!Write<_F32>(Value.reward_percent5)) return false;
		if(!Write<_U32>(Value.U)) return false;
		if(!Write<_U32>(Value.V)) return false;
		if(!Write<_U32>(Value.UL)) return false;
		if(!Write<_U32>(Value.VL)) return false;
		if(!WriteString<SG_TEX_MAX>(Value.tex)) return false;
		if(!Write<_U32>(Value.U2)) return false;
		if(!Write<_U32>(Value.V2)) return false;
		if(!Write<_U32>(Value.UL2)) return false;
		if(!Write<_U32>(Value.VL2)) return false;
		if(!WriteString<SG_TEX_MAX>(Value.tex2)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_ASTROLOGER_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_ASTROLOGER_CONFIG>(*((SG_ASTROLOGER_CONFIG*)data));
	}

	static bool _struct_SG_ASTROLOGER_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_ASTROLOGER_CONFIG>(*((const SG_ASTROLOGER_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_ASTROLOGER_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "astrologer_id", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, astrologer_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "astrologer_name", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, astrologer_name), NULL, (_U16)SG_ASTROLOGER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_ASTROLOGER_NAME_MAX>), NULL},
		{TYPE_U32, "level", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "desc", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, desc), NULL, (_U16)SG_ASTROLOGER_DESC_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_ASTROLOGER_DESC_MAX>), NULL},
		{TYPE_U32, "consume_gold", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, consume_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "level_up_percent", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, level_up_percent), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "failed_percent", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, failed_percent), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "reward1", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, reward1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "reward_percent1", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, reward_percent1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "reward2", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, reward2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "reward_percent2", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, reward_percent2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "reward3", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, reward3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "reward_percent3", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, reward_percent3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "reward4", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, reward4), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "reward_percent4", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, reward_percent4), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "reward5", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, reward5), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "reward_percent5", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, reward_percent5), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "U", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, U), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "V", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, V), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "UL", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, UL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "VL", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, VL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "tex", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, tex), NULL, (_U16)SG_TEX_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TEX_MAX>), NULL},
		{TYPE_U32, "U2", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, U2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "V2", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, V2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "UL2", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, UL2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "VL2", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, VL2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "tex2", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGER_CONFIG, tex2), NULL, (_U16)SG_TEX_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TEX_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_ASTROLOGER_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_ASTROLOGER_CONFIG", sizeof(SG_ASTROLOGER_CONFIG), 27, _struct_SG_ASTROLOGER_CONFIG_fieldinfo, _struct_SG_ASTROLOGER_CONFIG_readproc, _struct_SG_ASTROLOGER_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_ASTROLOGER_CONFIG>()
	{
		return &_rfl_struct_SG_ASTROLOGER_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GENERAL_ASTROLOG_SLOT_CONFIG>(SG_GENERAL_ASTROLOG_SLOT_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.general_level_upper)) return false;
		if(!Read<_U32>(Value.general_level_lower)) return false;
		if(!Read<_U32>(Value.slot_num)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_GENERAL_ASTROLOG_SLOT_CONFIG>(const SG_GENERAL_ASTROLOG_SLOT_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.general_level_upper)) return false;
		if(!Write<_U32>(Value.general_level_lower)) return false;
		if(!Write<_U32>(Value.slot_num)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_GENERAL_ASTROLOG_SLOT_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_GENERAL_ASTROLOG_SLOT_CONFIG>(*((SG_GENERAL_ASTROLOG_SLOT_CONFIG*)data));
	}

	static bool _struct_SG_GENERAL_ASTROLOG_SLOT_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_GENERAL_ASTROLOG_SLOT_CONFIG>(*((const SG_GENERAL_ASTROLOG_SLOT_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_GENERAL_ASTROLOG_SLOT_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "general_level_upper", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_ASTROLOG_SLOT_CONFIG, general_level_upper), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "general_level_lower", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_ASTROLOG_SLOT_CONFIG, general_level_lower), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "slot_num", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_ASTROLOG_SLOT_CONFIG, slot_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_GENERAL_ASTROLOG_SLOT_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_GENERAL_ASTROLOG_SLOT_CONFIG", sizeof(SG_GENERAL_ASTROLOG_SLOT_CONFIG), 3, _struct_SG_GENERAL_ASTROLOG_SLOT_CONFIG_fieldinfo, _struct_SG_GENERAL_ASTROLOG_SLOT_CONFIG_readproc, _struct_SG_GENERAL_ASTROLOG_SLOT_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_GENERAL_ASTROLOG_SLOT_CONFIG>()
	{
		return &_rfl_struct_SG_GENERAL_ASTROLOG_SLOT_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_FRIEND_NUM_CONFIG>(SG_FRIEND_NUM_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.player_level)) return false;
		if(!Read<_U32>(Value.upper_friend_limit)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_FRIEND_NUM_CONFIG>(const SG_FRIEND_NUM_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.player_level)) return false;
		if(!Write<_U32>(Value.upper_friend_limit)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_FRIEND_NUM_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_FRIEND_NUM_CONFIG>(*((SG_FRIEND_NUM_CONFIG*)data));
	}

	static bool _struct_SG_FRIEND_NUM_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_FRIEND_NUM_CONFIG>(*((const SG_FRIEND_NUM_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_FRIEND_NUM_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "player_level", 0, (_U16)ATLAS_OFFSETOF(SG_FRIEND_NUM_CONFIG, player_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "upper_friend_limit", 0, (_U16)ATLAS_OFFSETOF(SG_FRIEND_NUM_CONFIG, upper_friend_limit), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_FRIEND_NUM_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_FRIEND_NUM_CONFIG", sizeof(SG_FRIEND_NUM_CONFIG), 2, _struct_SG_FRIEND_NUM_CONFIG_fieldinfo, _struct_SG_FRIEND_NUM_CONFIG_readproc, _struct_SG_FRIEND_NUM_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_FRIEND_NUM_CONFIG>()
	{
		return &_rfl_struct_SG_FRIEND_NUM_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ENERGY_CONFIG>(SG_ENERGY_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.restore_energy)) return false;
		if(!Read<_U32>(Value.buy_unit_energy)) return false;
		if(!Read<_U32>(Value.reset_time)) return false;
		if(!Read<_U32>(Value.consume_pve)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_ENERGY_CONFIG>(const SG_ENERGY_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.restore_energy)) return false;
		if(!Write<_U32>(Value.buy_unit_energy)) return false;
		if(!Write<_U32>(Value.reset_time)) return false;
		if(!Write<_U32>(Value.consume_pve)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_ENERGY_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_ENERGY_CONFIG>(*((SG_ENERGY_CONFIG*)data));
	}

	static bool _struct_SG_ENERGY_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_ENERGY_CONFIG>(*((const SG_ENERGY_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_ENERGY_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "restore_energy", 0, (_U16)ATLAS_OFFSETOF(SG_ENERGY_CONFIG, restore_energy), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "buy_unit_energy", 0, (_U16)ATLAS_OFFSETOF(SG_ENERGY_CONFIG, buy_unit_energy), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reset_time", 0, (_U16)ATLAS_OFFSETOF(SG_ENERGY_CONFIG, reset_time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "consume_pve", 0, (_U16)ATLAS_OFFSETOF(SG_ENERGY_CONFIG, consume_pve), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_ENERGY_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_ENERGY_CONFIG", sizeof(SG_ENERGY_CONFIG), 4, _struct_SG_ENERGY_CONFIG_fieldinfo, _struct_SG_ENERGY_CONFIG_readproc, _struct_SG_ENERGY_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_ENERGY_CONFIG>()
	{
		return &_rfl_struct_SG_ENERGY_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ENERGY_BUY_CONFIG>(SG_ENERGY_BUY_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.times)) return false;
		if(!Read<_U32>(Value.consume_rmb)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_ENERGY_BUY_CONFIG>(const SG_ENERGY_BUY_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.times)) return false;
		if(!Write<_U32>(Value.consume_rmb)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_ENERGY_BUY_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_ENERGY_BUY_CONFIG>(*((SG_ENERGY_BUY_CONFIG*)data));
	}

	static bool _struct_SG_ENERGY_BUY_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_ENERGY_BUY_CONFIG>(*((const SG_ENERGY_BUY_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_ENERGY_BUY_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "times", 0, (_U16)ATLAS_OFFSETOF(SG_ENERGY_BUY_CONFIG, times), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "consume_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_ENERGY_BUY_CONFIG, consume_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_ENERGY_BUY_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_ENERGY_BUY_CONFIG", sizeof(SG_ENERGY_BUY_CONFIG), 2, _struct_SG_ENERGY_BUY_CONFIG_fieldinfo, _struct_SG_ENERGY_BUY_CONFIG_readproc, _struct_SG_ENERGY_BUY_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_ENERGY_BUY_CONFIG>()
	{
		return &_rfl_struct_SG_ENERGY_BUY_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_CHAT_CHANNEL_CONFIG>(SG_CHAT_CHANNEL_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.channel_id)) return false;
		if(!ReadString<SG_CHAT_CHANNEL_NAME_MAX>(Value.channel_name)) return false;
		if(!Read<_U8>(Value.scope)) return false;
		if(!Read<_U8>(Value.shield)) return false;
		if(!Read<_U32>(Value.interval_times)) return false;
		if(!Read<_U32>(Value.interval_period)) return false;
		if(!Read<_U32>(Value.req_level)) return false;
		if(!Read<_U32>(Value.content_length_max)) return false;
		if(!ReadString<SG_CHAT_CHANNEL_COLOR_MAX>(Value.color)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_CHAT_CHANNEL_CONFIG>(const SG_CHAT_CHANNEL_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.channel_id)) return false;
		if(!WriteString<SG_CHAT_CHANNEL_NAME_MAX>(Value.channel_name)) return false;
		if(!Write<_U8>(Value.scope)) return false;
		if(!Write<_U8>(Value.shield)) return false;
		if(!Write<_U32>(Value.interval_times)) return false;
		if(!Write<_U32>(Value.interval_period)) return false;
		if(!Write<_U32>(Value.req_level)) return false;
		if(!Write<_U32>(Value.content_length_max)) return false;
		if(!WriteString<SG_CHAT_CHANNEL_COLOR_MAX>(Value.color)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_CHAT_CHANNEL_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_CHAT_CHANNEL_CONFIG>(*((SG_CHAT_CHANNEL_CONFIG*)data));
	}

	static bool _struct_SG_CHAT_CHANNEL_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_CHAT_CHANNEL_CONFIG>(*((const SG_CHAT_CHANNEL_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_CHAT_CHANNEL_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "channel_id", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_CHANNEL_CONFIG, channel_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "channel_name", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_CHANNEL_CONFIG, channel_name), NULL, (_U16)SG_CHAT_CHANNEL_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_CHAT_CHANNEL_NAME_MAX>), NULL},
		{TYPE_U8, "scope", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_CHANNEL_CONFIG, scope), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "shield", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_CHANNEL_CONFIG, shield), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "interval_times", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_CHANNEL_CONFIG, interval_times), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "interval_period", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_CHANNEL_CONFIG, interval_period), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "req_level", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_CHANNEL_CONFIG, req_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "content_length_max", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_CHANNEL_CONFIG, content_length_max), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "color", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_CHANNEL_CONFIG, color), NULL, (_U16)SG_CHAT_CHANNEL_COLOR_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_CHAT_CHANNEL_COLOR_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_CHAT_CHANNEL_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_CHAT_CHANNEL_CONFIG", sizeof(SG_CHAT_CHANNEL_CONFIG), 9, _struct_SG_CHAT_CHANNEL_CONFIG_fieldinfo, _struct_SG_CHAT_CHANNEL_CONFIG_readproc, _struct_SG_CHAT_CHANNEL_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_CHAT_CHANNEL_CONFIG>()
	{
		return &_rfl_struct_SG_CHAT_CHANNEL_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_CHAT_TAB_CONFIG>(SG_CHAT_TAB_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.tab_id)) return false;
		if(!ReadString<SG_CHAT_TAP_NAME_MAX>(Value.tab_name)) return false;
		if(!Read<_U32>(Value.channel_id1)) return false;
		if(!Read<_U32>(Value.channel_id2)) return false;
		if(!Read<_U32>(Value.channel_id3)) return false;
		if(!Read<_U32>(Value.channel_id4)) return false;
		if(!Read<_U32>(Value.channel_id5)) return false;
		if(!Read<_U32>(Value.channel_id6)) return false;
		if(!Read<_U32>(Value.channel_id7)) return false;
		if(!Read<_U32>(Value.channel_id8)) return false;
		if(!Read<_U32>(Value.channel_id9)) return false;
		if(!Read<_U32>(Value.channel_id10)) return false;
		if(!Read<_U32>(Value.channel_id11)) return false;
		if(!Read<_U32>(Value.channel_id12)) return false;
		if(!Read<_U32>(Value.channel_id13)) return false;
		if(!Read<_U32>(Value.channel_id14)) return false;
		if(!Read<_U32>(Value.channel_id15)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_CHAT_TAB_CONFIG>(const SG_CHAT_TAB_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.tab_id)) return false;
		if(!WriteString<SG_CHAT_TAP_NAME_MAX>(Value.tab_name)) return false;
		if(!Write<_U32>(Value.channel_id1)) return false;
		if(!Write<_U32>(Value.channel_id2)) return false;
		if(!Write<_U32>(Value.channel_id3)) return false;
		if(!Write<_U32>(Value.channel_id4)) return false;
		if(!Write<_U32>(Value.channel_id5)) return false;
		if(!Write<_U32>(Value.channel_id6)) return false;
		if(!Write<_U32>(Value.channel_id7)) return false;
		if(!Write<_U32>(Value.channel_id8)) return false;
		if(!Write<_U32>(Value.channel_id9)) return false;
		if(!Write<_U32>(Value.channel_id10)) return false;
		if(!Write<_U32>(Value.channel_id11)) return false;
		if(!Write<_U32>(Value.channel_id12)) return false;
		if(!Write<_U32>(Value.channel_id13)) return false;
		if(!Write<_U32>(Value.channel_id14)) return false;
		if(!Write<_U32>(Value.channel_id15)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_CHAT_TAB_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_CHAT_TAB_CONFIG>(*((SG_CHAT_TAB_CONFIG*)data));
	}

	static bool _struct_SG_CHAT_TAB_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_CHAT_TAB_CONFIG>(*((const SG_CHAT_TAB_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_CHAT_TAB_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "tab_id", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, tab_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "tab_name", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, tab_name), NULL, (_U16)SG_CHAT_TAP_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_CHAT_TAP_NAME_MAX>), NULL},
		{TYPE_U32, "channel_id1", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "channel_id2", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "channel_id3", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "channel_id4", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id4), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "channel_id5", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id5), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "channel_id6", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id6), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "channel_id7", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id7), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "channel_id8", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id8), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "channel_id9", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id9), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "channel_id10", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id10), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "channel_id11", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id11), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "channel_id12", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id12), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "channel_id13", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id13), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "channel_id14", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id14), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "channel_id15", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_TAB_CONFIG, channel_id15), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_CHAT_TAB_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_CHAT_TAB_CONFIG", sizeof(SG_CHAT_TAB_CONFIG), 17, _struct_SG_CHAT_TAB_CONFIG_fieldinfo, _struct_SG_CHAT_TAB_CONFIG_readproc, _struct_SG_CHAT_TAB_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_CHAT_TAB_CONFIG>()
	{
		return &_rfl_struct_SG_CHAT_TAB_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_TURBO_CONFIG>(SG_TURBO_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.general_id)) return false;
		if(!Read<_U32>(Value.turbo_level)) return false;
		if(!ReadString<SG_SKILL_NAME_MAX>(Value.skill_name)) return false;
		if(!Read<_U8>(Value.charpter_id)) return false;
		if(!ReadString<SG_TURBO_CHARPTER_NAME_MAX>(Value.charpter_name)) return false;
		if(!Read<_U32>(Value.req_wake_pt)) return false;
		if(!Read<_U8>(Value.skill_type)) return false;
		if(!Read<_U32>(Value.HP)) return false;
		if(!Read<_U32>(Value.POW)) return false;
		if(!Read<_U32>(Value.INT)) return false;
		if(!Read<_F32>(Value.ATK)) return false;
		if(!Read<_F32>(Value.DEF)) return false;
		if(!Read<_F32>(Value.HIT)) return false;
		if(!Read<_F32>(Value.EVASION)) return false;
		if(!Read<_F32>(Value.CRIT)) return false;
		if(!Read<_F32>(Value.X)) return false;
		if(!Read<_F32>(Value.Y)) return false;
		if(!ReadString<ARCHETYPE_URL_LENGTH_MAX>(Value.skill_archetype)) return false;
		if(!ReadString<SG_SKILL_DESC_MAX>(Value.skill_desc)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_TURBO_CONFIG>(const SG_TURBO_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.general_id)) return false;
		if(!Write<_U32>(Value.turbo_level)) return false;
		if(!WriteString<SG_SKILL_NAME_MAX>(Value.skill_name)) return false;
		if(!Write<_U8>(Value.charpter_id)) return false;
		if(!WriteString<SG_TURBO_CHARPTER_NAME_MAX>(Value.charpter_name)) return false;
		if(!Write<_U32>(Value.req_wake_pt)) return false;
		if(!Write<_U8>(Value.skill_type)) return false;
		if(!Write<_U32>(Value.HP)) return false;
		if(!Write<_U32>(Value.POW)) return false;
		if(!Write<_U32>(Value.INT)) return false;
		if(!Write<_F32>(Value.ATK)) return false;
		if(!Write<_F32>(Value.DEF)) return false;
		if(!Write<_F32>(Value.HIT)) return false;
		if(!Write<_F32>(Value.EVASION)) return false;
		if(!Write<_F32>(Value.CRIT)) return false;
		if(!Write<_F32>(Value.X)) return false;
		if(!Write<_F32>(Value.Y)) return false;
		if(!WriteString<ARCHETYPE_URL_LENGTH_MAX>(Value.skill_archetype)) return false;
		if(!WriteString<SG_SKILL_DESC_MAX>(Value.skill_desc)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_TURBO_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_TURBO_CONFIG>(*((SG_TURBO_CONFIG*)data));
	}

	static bool _struct_SG_TURBO_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_TURBO_CONFIG>(*((const SG_TURBO_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_TURBO_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "general_id", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, general_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "turbo_level", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, turbo_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "skill_name", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, skill_name), NULL, (_U16)SG_SKILL_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_SKILL_NAME_MAX>), NULL},
		{TYPE_U8, "charpter_id", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, charpter_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "charpter_name", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, charpter_name), NULL, (_U16)SG_TURBO_CHARPTER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TURBO_CHARPTER_NAME_MAX>), NULL},
		{TYPE_U32, "req_wake_pt", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, req_wake_pt), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "skill_type", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, skill_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "HP", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, HP), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "POW", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, POW), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "INT", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, INT), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "ATK", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, ATK), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "DEF", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, DEF), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "HIT", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, HIT), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "EVASION", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, EVASION), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "CRIT", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, CRIT), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "X", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, X), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "Y", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, Y), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_STRING, "skill_archetype", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, skill_archetype), NULL, (_U16)ARCHETYPE_URL_LENGTH_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<ARCHETYPE_URL_LENGTH_MAX>), NULL},
		{TYPE_STRING, "skill_desc", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_CONFIG, skill_desc), NULL, (_U16)SG_SKILL_DESC_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_SKILL_DESC_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_TURBO_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_TURBO_CONFIG", sizeof(SG_TURBO_CONFIG), 19, _struct_SG_TURBO_CONFIG_fieldinfo, _struct_SG_TURBO_CONFIG_readproc, _struct_SG_TURBO_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_TURBO_CONFIG>()
	{
		return &_rfl_struct_SG_TURBO_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_TURBO_SKILL_SLOT>(SG_TURBO_SKILL_SLOT& Value)
	{
		if(!ReadString<ARCHETYPE_URL_LENGTH_MAX>(Value.skill_archetype1)) return false;
		if(!ReadString<ARCHETYPE_URL_LENGTH_MAX>(Value.skill_archetype2)) return false;
		if(!ReadString<ARCHETYPE_URL_LENGTH_MAX>(Value.skill_archetype3)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_TURBO_SKILL_SLOT>(const SG_TURBO_SKILL_SLOT& Value)
	{
		if(!WriteString<ARCHETYPE_URL_LENGTH_MAX>(Value.skill_archetype1)) return false;
		if(!WriteString<ARCHETYPE_URL_LENGTH_MAX>(Value.skill_archetype2)) return false;
		if(!WriteString<ARCHETYPE_URL_LENGTH_MAX>(Value.skill_archetype3)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_TURBO_SKILL_SLOT_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_TURBO_SKILL_SLOT>(*((SG_TURBO_SKILL_SLOT*)data));
	}

	static bool _struct_SG_TURBO_SKILL_SLOT_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_TURBO_SKILL_SLOT>(*((const SG_TURBO_SKILL_SLOT*)data));
	}

	static FIELD_INFO _struct_SG_TURBO_SKILL_SLOT_fieldinfo[] =
	{
		{TYPE_STRING, "skill_archetype1", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_SKILL_SLOT, skill_archetype1), NULL, (_U16)ARCHETYPE_URL_LENGTH_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<ARCHETYPE_URL_LENGTH_MAX>), NULL},
		{TYPE_STRING, "skill_archetype2", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_SKILL_SLOT, skill_archetype2), NULL, (_U16)ARCHETYPE_URL_LENGTH_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<ARCHETYPE_URL_LENGTH_MAX>), NULL},
		{TYPE_STRING, "skill_archetype3", 0, (_U16)ATLAS_OFFSETOF(SG_TURBO_SKILL_SLOT, skill_archetype3), NULL, (_U16)ARCHETYPE_URL_LENGTH_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<ARCHETYPE_URL_LENGTH_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_TURBO_SKILL_SLOT_info = { NULL, "SG_TURBO_SKILL_SLOT", sizeof(SG_TURBO_SKILL_SLOT), 3, _struct_SG_TURBO_SKILL_SLOT_fieldinfo, _struct_SG_TURBO_SKILL_SLOT_readproc, _struct_SG_TURBO_SKILL_SLOT_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_TURBO_SKILL_SLOT>()
	{
		return &_rfl_struct_SG_TURBO_SKILL_SLOT_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_VIP_CONFIG>(SG_VIP_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.vip_level)) return false;
		if(!Read<_U32>(Value.recharge_rmb)) return false;
		if(!Read<_U32>(Value.pay_times)) return false;
		if(!Read<_U32>(Value.energy_times)) return false;
		if(!Read<_U32>(Value.energy_upper)) return false;
		if(!Read<_U32>(Value.reset_instance_times)) return false;
		if(!Read<_U8>(Value.hangup_free)) return false;
		if(!Read<_U8>(Value.enhance_free)) return false;
		if(!Read<_U32>(Value.enhance_friend_num)) return false;
		if(!Read<_U8>(Value.auto_atrology)) return false;
		if(!ReadString<SG_VIP_DESC_MAX>(Value.desc)) return false;
		if(!ReadString<SG_VIP_ICON_MAX>(Value.res)) return false;
		if(!Read<_U32>(Value.U)) return false;
		if(!Read<_U32>(Value.V)) return false;
		if(!Read<_U32>(Value.UL)) return false;
		if(!Read<_U32>(Value.VL)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_VIP_CONFIG>(const SG_VIP_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.vip_level)) return false;
		if(!Write<_U32>(Value.recharge_rmb)) return false;
		if(!Write<_U32>(Value.pay_times)) return false;
		if(!Write<_U32>(Value.energy_times)) return false;
		if(!Write<_U32>(Value.energy_upper)) return false;
		if(!Write<_U32>(Value.reset_instance_times)) return false;
		if(!Write<_U8>(Value.hangup_free)) return false;
		if(!Write<_U8>(Value.enhance_free)) return false;
		if(!Write<_U32>(Value.enhance_friend_num)) return false;
		if(!Write<_U8>(Value.auto_atrology)) return false;
		if(!WriteString<SG_VIP_DESC_MAX>(Value.desc)) return false;
		if(!WriteString<SG_VIP_ICON_MAX>(Value.res)) return false;
		if(!Write<_U32>(Value.U)) return false;
		if(!Write<_U32>(Value.V)) return false;
		if(!Write<_U32>(Value.UL)) return false;
		if(!Write<_U32>(Value.VL)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_VIP_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_VIP_CONFIG>(*((SG_VIP_CONFIG*)data));
	}

	static bool _struct_SG_VIP_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_VIP_CONFIG>(*((const SG_VIP_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_VIP_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "vip_level", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, vip_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "recharge_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, recharge_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "pay_times", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, pay_times), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "energy_times", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, energy_times), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "energy_upper", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, energy_upper), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reset_instance_times", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, reset_instance_times), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "hangup_free", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, hangup_free), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "enhance_free", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, enhance_free), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "enhance_friend_num", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, enhance_friend_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "auto_atrology", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, auto_atrology), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "desc", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, desc), NULL, (_U16)SG_VIP_DESC_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_VIP_DESC_MAX>), NULL},
		{TYPE_STRING, "res", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, res), NULL, (_U16)SG_VIP_ICON_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_VIP_ICON_MAX>), NULL},
		{TYPE_U32, "U", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, U), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "V", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, V), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "UL", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, UL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "VL", 0, (_U16)ATLAS_OFFSETOF(SG_VIP_CONFIG, VL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_VIP_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_VIP_CONFIG", sizeof(SG_VIP_CONFIG), 16, _struct_SG_VIP_CONFIG_fieldinfo, _struct_SG_VIP_CONFIG_readproc, _struct_SG_VIP_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_VIP_CONFIG>()
	{
		return &_rfl_struct_SG_VIP_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PAY_CONSUME_CONFIG>(SG_PAY_CONSUME_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.apply_times)) return false;
		if(!Read<_U32>(Value.consume_rmb)) return false;
		if(!Read<_F32>(Value.reward_rate)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_PAY_CONSUME_CONFIG>(const SG_PAY_CONSUME_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.apply_times)) return false;
		if(!Write<_U32>(Value.consume_rmb)) return false;
		if(!Write<_F32>(Value.reward_rate)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_PAY_CONSUME_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_PAY_CONSUME_CONFIG>(*((SG_PAY_CONSUME_CONFIG*)data));
	}

	static bool _struct_SG_PAY_CONSUME_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_PAY_CONSUME_CONFIG>(*((const SG_PAY_CONSUME_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_PAY_CONSUME_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "apply_times", 0, (_U16)ATLAS_OFFSETOF(SG_PAY_CONSUME_CONFIG, apply_times), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "consume_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_PAY_CONSUME_CONFIG, consume_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "reward_rate", 0, (_U16)ATLAS_OFFSETOF(SG_PAY_CONSUME_CONFIG, reward_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_PAY_CONSUME_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_PAY_CONSUME_CONFIG", sizeof(SG_PAY_CONSUME_CONFIG), 3, _struct_SG_PAY_CONSUME_CONFIG_fieldinfo, _struct_SG_PAY_CONSUME_CONFIG_readproc, _struct_SG_PAY_CONSUME_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_PAY_CONSUME_CONFIG>()
	{
		return &_rfl_struct_SG_PAY_CONSUME_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PAY_REWARD_CONFIG>(SG_PAY_REWARD_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.player_level)) return false;
		if(!Read<_U32>(Value.reward_gold)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_PAY_REWARD_CONFIG>(const SG_PAY_REWARD_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.player_level)) return false;
		if(!Write<_U32>(Value.reward_gold)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_PAY_REWARD_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_PAY_REWARD_CONFIG>(*((SG_PAY_REWARD_CONFIG*)data));
	}

	static bool _struct_SG_PAY_REWARD_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_PAY_REWARD_CONFIG>(*((const SG_PAY_REWARD_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_PAY_REWARD_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "player_level", 0, (_U16)ATLAS_OFFSETOF(SG_PAY_REWARD_CONFIG, player_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_gold", 0, (_U16)ATLAS_OFFSETOF(SG_PAY_REWARD_CONFIG, reward_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_PAY_REWARD_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_PAY_REWARD_CONFIG", sizeof(SG_PAY_REWARD_CONFIG), 2, _struct_SG_PAY_REWARD_CONFIG_fieldinfo, _struct_SG_PAY_REWARD_CONFIG_readproc, _struct_SG_PAY_REWARD_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_PAY_REWARD_CONFIG>()
	{
		return &_rfl_struct_SG_PAY_REWARD_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_INSTANCE_CONFIG>(SG_INSTANCE_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.instance_id)) return false;
		if(!Read<_U8>(Value.total_maps)) return false;
		if(!ReadString<SG_INSTANCE_REWARD_DES_MAX>(Value.reward_normal1)) return false;
		if(!ReadString<SG_INSTANCE_REWARD_DES_MAX>(Value.reward_normal2)) return false;
		if(!ReadString<SG_INSTANCE_REWARD_DES_MAX>(Value.reward_hard1)) return false;
		if(!ReadString<SG_INSTANCE_REWARD_DES_MAX>(Value.reward_hard2)) return false;
		if(!Read<_U32>(Value.reset_rmb)) return false;
		if(!Read<_U32>(Value.wake_pt)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_INSTANCE_CONFIG>(const SG_INSTANCE_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.instance_id)) return false;
		if(!Write<_U8>(Value.total_maps)) return false;
		if(!WriteString<SG_INSTANCE_REWARD_DES_MAX>(Value.reward_normal1)) return false;
		if(!WriteString<SG_INSTANCE_REWARD_DES_MAX>(Value.reward_normal2)) return false;
		if(!WriteString<SG_INSTANCE_REWARD_DES_MAX>(Value.reward_hard1)) return false;
		if(!WriteString<SG_INSTANCE_REWARD_DES_MAX>(Value.reward_hard2)) return false;
		if(!Write<_U32>(Value.reset_rmb)) return false;
		if(!Write<_U32>(Value.wake_pt)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_INSTANCE_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_INSTANCE_CONFIG>(*((SG_INSTANCE_CONFIG*)data));
	}

	static bool _struct_SG_INSTANCE_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_INSTANCE_CONFIG>(*((const SG_INSTANCE_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_INSTANCE_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "instance_id", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_CONFIG, instance_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "total_maps", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_CONFIG, total_maps), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "reward_normal1", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_CONFIG, reward_normal1), NULL, (_U16)SG_INSTANCE_REWARD_DES_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_INSTANCE_REWARD_DES_MAX>), NULL},
		{TYPE_STRING, "reward_normal2", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_CONFIG, reward_normal2), NULL, (_U16)SG_INSTANCE_REWARD_DES_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_INSTANCE_REWARD_DES_MAX>), NULL},
		{TYPE_STRING, "reward_hard1", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_CONFIG, reward_hard1), NULL, (_U16)SG_INSTANCE_REWARD_DES_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_INSTANCE_REWARD_DES_MAX>), NULL},
		{TYPE_STRING, "reward_hard2", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_CONFIG, reward_hard2), NULL, (_U16)SG_INSTANCE_REWARD_DES_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_INSTANCE_REWARD_DES_MAX>), NULL},
		{TYPE_U32, "reset_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_CONFIG, reset_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "wake_pt", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_CONFIG, wake_pt), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_INSTANCE_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_INSTANCE_CONFIG", sizeof(SG_INSTANCE_CONFIG), 8, _struct_SG_INSTANCE_CONFIG_fieldinfo, _struct_SG_INSTANCE_CONFIG_readproc, _struct_SG_INSTANCE_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_INSTANCE_CONFIG>()
	{
		return &_rfl_struct_SG_INSTANCE_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_INSTANCE_INFO>(SG_INSTANCE_INFO& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.instance_id)) return false;
		if(!Read<_U8>(Value.difficulty)) return false;
		if(!Read<_S8>(Value.progress)) return false;
		if(!Read<_U8>(Value.num_today)) return false;
		if(!Read<_U8>(Value.normal_completed)) return false;
		if(!Read<_S8>(Value.furthest_normal)) return false;
		if(!Read<_S8>(Value.furthest_hard)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_INSTANCE_INFO>(const SG_INSTANCE_INFO& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.instance_id)) return false;
		if(!Write<_U8>(Value.difficulty)) return false;
		if(!Write<_S8>(Value.progress)) return false;
		if(!Write<_U8>(Value.num_today)) return false;
		if(!Write<_U8>(Value.normal_completed)) return false;
		if(!Write<_S8>(Value.furthest_normal)) return false;
		if(!Write<_S8>(Value.furthest_hard)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_INSTANCE_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_INSTANCE_INFO>(*((SG_INSTANCE_INFO*)data));
	}

	static bool _struct_SG_INSTANCE_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_INSTANCE_INFO>(*((const SG_INSTANCE_INFO*)data));
	}

	static FIELD_INFO _struct_SG_INSTANCE_INFO_fieldinfo[] =
	{
		{TYPE_U32, "instance_id", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_INFO, instance_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "difficulty", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_INFO, difficulty), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_S8, "progress", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_INFO, progress), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S8), NULL},
		{TYPE_U8, "num_today", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_INFO, num_today), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "normal_completed", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_INFO, normal_completed), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_S8, "furthest_normal", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_INFO, furthest_normal), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S8), NULL},
		{TYPE_S8, "furthest_hard", 0, (_U16)ATLAS_OFFSETOF(SG_INSTANCE_INFO, furthest_hard), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S8), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_INSTANCE_INFO_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_INSTANCE_INFO", sizeof(SG_INSTANCE_INFO), 7, _struct_SG_INSTANCE_INFO_fieldinfo, _struct_SG_INSTANCE_INFO_readproc, _struct_SG_INSTANCE_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_INSTANCE_INFO>()
	{
		return &_rfl_struct_SG_INSTANCE_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_BOSSRUSH_INFO>(SG_BOSSRUSH_INFO& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.level_id)) return false;
		if(!Read<_U32>(Value.boss_hp)) return false;
		if(!Read<_U32>(Value.next_reset_time)) return false;
		if(!Read<_U8>(Value.status)) return false;
		if(!ReadArray<_U8, 128>(Value.daily_progress)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_BOSSRUSH_INFO>(const SG_BOSSRUSH_INFO& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.level_id)) return false;
		if(!Write<_U32>(Value.boss_hp)) return false;
		if(!Write<_U32>(Value.next_reset_time)) return false;
		if(!Write<_U8>(Value.status)) return false;
		if(!WriteArray<_U8, 128>(Value.daily_progress)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_BOSSRUSH_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_BOSSRUSH_INFO>(*((SG_BOSSRUSH_INFO*)data));
	}

	static bool _struct_SG_BOSSRUSH_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_BOSSRUSH_INFO>(*((const SG_BOSSRUSH_INFO*)data));
	}

	static FIELD_INFO _struct_SG_BOSSRUSH_INFO_fieldinfo[] =
	{
		{TYPE_U32, "level_id", 0, (_U16)ATLAS_OFFSETOF(SG_BOSSRUSH_INFO, level_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "boss_hp", 0, (_U16)ATLAS_OFFSETOF(SG_BOSSRUSH_INFO, boss_hp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "next_reset_time", 0, (_U16)ATLAS_OFFSETOF(SG_BOSSRUSH_INFO, next_reset_time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "status", 0, (_U16)ATLAS_OFFSETOF(SG_BOSSRUSH_INFO, status), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8|TYPE_ARRAY, "daily_progress", 0, (_U16)ATLAS_OFFSETOF(SG_BOSSRUSH_INFO, daily_progress), NULL, (_U16)-1, (_U16)128, (_U16)((size_t)(&((DDL::Array<_U8, 128>*)NULL)->_Array)), (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_BOSSRUSH_INFO_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_BOSSRUSH_INFO", sizeof(SG_BOSSRUSH_INFO), 5, _struct_SG_BOSSRUSH_INFO_fieldinfo, _struct_SG_BOSSRUSH_INFO_readproc, _struct_SG_BOSSRUSH_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_BOSSRUSH_INFO>()
	{
		return &_rfl_struct_SG_BOSSRUSH_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_BOSSRUSH_SUPPORT_INFO>(SG_BOSSRUSH_SUPPORT_INFO& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.friend_id)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.friend_nick)) return false;
		if(!Read<_U32>(Value.level_id)) return false;
		if(!Read<_U32>(Value.boss_hp)) return false;
		if(!Read<_U8>(Value.status)) return false;
		if(!Read<_U32>(Value.next_reset_time)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_BOSSRUSH_SUPPORT_INFO>(const SG_BOSSRUSH_SUPPORT_INFO& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.friend_id)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.friend_nick)) return false;
		if(!Write<_U32>(Value.level_id)) return false;
		if(!Write<_U32>(Value.boss_hp)) return false;
		if(!Write<_U8>(Value.status)) return false;
		if(!Write<_U32>(Value.next_reset_time)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_BOSSRUSH_SUPPORT_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_BOSSRUSH_SUPPORT_INFO>(*((SG_BOSSRUSH_SUPPORT_INFO*)data));
	}

	static bool _struct_SG_BOSSRUSH_SUPPORT_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_BOSSRUSH_SUPPORT_INFO>(*((const SG_BOSSRUSH_SUPPORT_INFO*)data));
	}

	static FIELD_INFO _struct_SG_BOSSRUSH_SUPPORT_INFO_fieldinfo[] =
	{
		{TYPE_U32, "friend_id", 0, (_U16)ATLAS_OFFSETOF(SG_BOSSRUSH_SUPPORT_INFO, friend_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "friend_nick", 0, (_U16)ATLAS_OFFSETOF(SG_BOSSRUSH_SUPPORT_INFO, friend_nick), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_U32, "level_id", 0, (_U16)ATLAS_OFFSETOF(SG_BOSSRUSH_SUPPORT_INFO, level_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "boss_hp", 0, (_U16)ATLAS_OFFSETOF(SG_BOSSRUSH_SUPPORT_INFO, boss_hp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "status", 0, (_U16)ATLAS_OFFSETOF(SG_BOSSRUSH_SUPPORT_INFO, status), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "next_reset_time", 0, (_U16)ATLAS_OFFSETOF(SG_BOSSRUSH_SUPPORT_INFO, next_reset_time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_BOSSRUSH_SUPPORT_INFO_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_BOSSRUSH_SUPPORT_INFO", sizeof(SG_BOSSRUSH_SUPPORT_INFO), 6, _struct_SG_BOSSRUSH_SUPPORT_INFO_fieldinfo, _struct_SG_BOSSRUSH_SUPPORT_INFO_readproc, _struct_SG_BOSSRUSH_SUPPORT_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_BOSSRUSH_SUPPORT_INFO>()
	{
		return &_rfl_struct_SG_BOSSRUSH_SUPPORT_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_CONFIG>(SG_LEAGUE_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.league_level)) return false;
		if(!Read<_U32>(Value.XP)) return false;
		if(!Read<_U32>(Value.members_count)) return false;
		if(!Read<_F32>(Value.rmb_xp_rate)) return false;
		if(!Read<_F32>(Value.rmb_contribution_rate)) return false;
		if(!Read<_F32>(Value.energy_xp_rate)) return false;
		if(!Read<_F32>(Value.energy_contribution_rate)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEAGUE_CONFIG>(const SG_LEAGUE_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.league_level)) return false;
		if(!Write<_U32>(Value.XP)) return false;
		if(!Write<_U32>(Value.members_count)) return false;
		if(!Write<_F32>(Value.rmb_xp_rate)) return false;
		if(!Write<_F32>(Value.rmb_contribution_rate)) return false;
		if(!Write<_F32>(Value.energy_xp_rate)) return false;
		if(!Write<_F32>(Value.energy_contribution_rate)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEAGUE_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEAGUE_CONFIG>(*((SG_LEAGUE_CONFIG*)data));
	}

	static bool _struct_SG_LEAGUE_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEAGUE_CONFIG>(*((const SG_LEAGUE_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_LEAGUE_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "league_level", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_CONFIG, league_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "XP", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_CONFIG, XP), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "members_count", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_CONFIG, members_count), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "rmb_xp_rate", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_CONFIG, rmb_xp_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "rmb_contribution_rate", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_CONFIG, rmb_contribution_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "energy_xp_rate", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_CONFIG, energy_xp_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "energy_contribution_rate", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_CONFIG, energy_contribution_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEAGUE_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_LEAGUE_CONFIG", sizeof(SG_LEAGUE_CONFIG), 7, _struct_SG_LEAGUE_CONFIG_fieldinfo, _struct_SG_LEAGUE_CONFIG_readproc, _struct_SG_LEAGUE_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_CONFIG>()
	{
		return &_rfl_struct_SG_LEAGUE_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_POW_CONFIG>(SG_LEAGUE_POW_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U8>(Value.pow_type)) return false;
		if(!Read<_U8>(Value.master_pow)) return false;
		if(!Read<_U8>(Value.vice_master_pow)) return false;
		if(!Read<_U8>(Value.member_pow)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEAGUE_POW_CONFIG>(const SG_LEAGUE_POW_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U8>(Value.pow_type)) return false;
		if(!Write<_U8>(Value.master_pow)) return false;
		if(!Write<_U8>(Value.vice_master_pow)) return false;
		if(!Write<_U8>(Value.member_pow)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEAGUE_POW_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEAGUE_POW_CONFIG>(*((SG_LEAGUE_POW_CONFIG*)data));
	}

	static bool _struct_SG_LEAGUE_POW_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEAGUE_POW_CONFIG>(*((const SG_LEAGUE_POW_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_LEAGUE_POW_CONFIG_fieldinfo[] =
	{
		{TYPE_U8, "pow_type", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_POW_CONFIG, pow_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "master_pow", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_POW_CONFIG, master_pow), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "vice_master_pow", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_POW_CONFIG, vice_master_pow), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "member_pow", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_POW_CONFIG, member_pow), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEAGUE_POW_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_LEAGUE_POW_CONFIG", sizeof(SG_LEAGUE_POW_CONFIG), 4, _struct_SG_LEAGUE_POW_CONFIG_fieldinfo, _struct_SG_LEAGUE_POW_CONFIG_readproc, _struct_SG_LEAGUE_POW_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_POW_CONFIG>()
	{
		return &_rfl_struct_SG_LEAGUE_POW_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_MEMBER_SETTING_CONFIG>(SG_LEAGUE_MEMBER_SETTING_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.master_num)) return false;
		if(!Read<_U32>(Value.vice_master_num)) return false;
		if(!Read<_U32>(Value.member_num)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEAGUE_MEMBER_SETTING_CONFIG>(const SG_LEAGUE_MEMBER_SETTING_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.master_num)) return false;
		if(!Write<_U32>(Value.vice_master_num)) return false;
		if(!Write<_U32>(Value.member_num)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEAGUE_MEMBER_SETTING_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEAGUE_MEMBER_SETTING_CONFIG>(*((SG_LEAGUE_MEMBER_SETTING_CONFIG*)data));
	}

	static bool _struct_SG_LEAGUE_MEMBER_SETTING_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEAGUE_MEMBER_SETTING_CONFIG>(*((const SG_LEAGUE_MEMBER_SETTING_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_LEAGUE_MEMBER_SETTING_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "master_num", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_SETTING_CONFIG, master_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "vice_master_num", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_SETTING_CONFIG, vice_master_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "member_num", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_SETTING_CONFIG, member_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEAGUE_MEMBER_SETTING_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_LEAGUE_MEMBER_SETTING_CONFIG", sizeof(SG_LEAGUE_MEMBER_SETTING_CONFIG), 3, _struct_SG_LEAGUE_MEMBER_SETTING_CONFIG_fieldinfo, _struct_SG_LEAGUE_MEMBER_SETTING_CONFIG_readproc, _struct_SG_LEAGUE_MEMBER_SETTING_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_MEMBER_SETTING_CONFIG>()
	{
		return &_rfl_struct_SG_LEAGUE_MEMBER_SETTING_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_ACTION_CONFIG>(SG_LEAGUE_ACTION_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.action_id)) return false;
		if(!ReadString<SG_DAILY_ACTION_NAME_MAX>(Value.action_name)) return false;
		if(!ReadString<SG_DAILY_ACTION_DESC>(Value.desc)) return false;
		if(!Read<_U32>(Value.sort_seq)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEAGUE_ACTION_CONFIG>(const SG_LEAGUE_ACTION_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.action_id)) return false;
		if(!WriteString<SG_DAILY_ACTION_NAME_MAX>(Value.action_name)) return false;
		if(!WriteString<SG_DAILY_ACTION_DESC>(Value.desc)) return false;
		if(!Write<_U32>(Value.sort_seq)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEAGUE_ACTION_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEAGUE_ACTION_CONFIG>(*((SG_LEAGUE_ACTION_CONFIG*)data));
	}

	static bool _struct_SG_LEAGUE_ACTION_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEAGUE_ACTION_CONFIG>(*((const SG_LEAGUE_ACTION_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_LEAGUE_ACTION_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "action_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_ACTION_CONFIG, action_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "action_name", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_ACTION_CONFIG, action_name), NULL, (_U16)SG_DAILY_ACTION_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_DAILY_ACTION_NAME_MAX>), NULL},
		{TYPE_STRING, "desc", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_ACTION_CONFIG, desc), NULL, (_U16)SG_DAILY_ACTION_DESC, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_DAILY_ACTION_DESC>), NULL},
		{TYPE_U32, "sort_seq", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_ACTION_CONFIG, sort_seq), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEAGUE_ACTION_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_LEAGUE_ACTION_CONFIG", sizeof(SG_LEAGUE_ACTION_CONFIG), 4, _struct_SG_LEAGUE_ACTION_CONFIG_fieldinfo, _struct_SG_LEAGUE_ACTION_CONFIG_readproc, _struct_SG_LEAGUE_ACTION_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_ACTION_CONFIG>()
	{
		return &_rfl_struct_SG_LEAGUE_ACTION_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_TOAST_CONFIG>(SG_LEAGUE_TOAST_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U8>(Value.wine_id)) return false;
		if(!ReadString<SG_LEAGUE_LOG_MAX>(Value.wine_name)) return false;
		if(!Read<_U32>(Value.req_vid)) return false;
		if(!Read<_U32>(Value.consume_gold)) return false;
		if(!Read<_U32>(Value.consume_rmb)) return false;
		if(!Read<_U32>(Value.reward_reputation)) return false;
		if(!Read<_U32>(Value.reward_league_xp)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEAGUE_TOAST_CONFIG>(const SG_LEAGUE_TOAST_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U8>(Value.wine_id)) return false;
		if(!WriteString<SG_LEAGUE_LOG_MAX>(Value.wine_name)) return false;
		if(!Write<_U32>(Value.req_vid)) return false;
		if(!Write<_U32>(Value.consume_gold)) return false;
		if(!Write<_U32>(Value.consume_rmb)) return false;
		if(!Write<_U32>(Value.reward_reputation)) return false;
		if(!Write<_U32>(Value.reward_league_xp)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEAGUE_TOAST_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEAGUE_TOAST_CONFIG>(*((SG_LEAGUE_TOAST_CONFIG*)data));
	}

	static bool _struct_SG_LEAGUE_TOAST_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEAGUE_TOAST_CONFIG>(*((const SG_LEAGUE_TOAST_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_LEAGUE_TOAST_CONFIG_fieldinfo[] =
	{
		{TYPE_U8, "wine_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_TOAST_CONFIG, wine_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "wine_name", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_TOAST_CONFIG, wine_name), NULL, (_U16)SG_LEAGUE_LOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_LEAGUE_LOG_MAX>), NULL},
		{TYPE_U32, "req_vid", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_TOAST_CONFIG, req_vid), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "consume_gold", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_TOAST_CONFIG, consume_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "consume_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_TOAST_CONFIG, consume_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_reputation", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_TOAST_CONFIG, reward_reputation), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_league_xp", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_TOAST_CONFIG, reward_league_xp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEAGUE_TOAST_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_LEAGUE_TOAST_CONFIG", sizeof(SG_LEAGUE_TOAST_CONFIG), 7, _struct_SG_LEAGUE_TOAST_CONFIG_fieldinfo, _struct_SG_LEAGUE_TOAST_CONFIG_readproc, _struct_SG_LEAGUE_TOAST_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_TOAST_CONFIG>()
	{
		return &_rfl_struct_SG_LEAGUE_TOAST_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_DIANJIANG_CONFIG>(SG_LEAGUE_DIANJIANG_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.consume_npc_gold)) return false;
		if(!Read<_U32>(Value.reward_reputation)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEAGUE_DIANJIANG_CONFIG>(const SG_LEAGUE_DIANJIANG_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.consume_npc_gold)) return false;
		if(!Write<_U32>(Value.reward_reputation)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEAGUE_DIANJIANG_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEAGUE_DIANJIANG_CONFIG>(*((SG_LEAGUE_DIANJIANG_CONFIG*)data));
	}

	static bool _struct_SG_LEAGUE_DIANJIANG_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEAGUE_DIANJIANG_CONFIG>(*((const SG_LEAGUE_DIANJIANG_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_LEAGUE_DIANJIANG_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "consume_npc_gold", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_DIANJIANG_CONFIG, consume_npc_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_reputation", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_DIANJIANG_CONFIG, reward_reputation), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEAGUE_DIANJIANG_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_LEAGUE_DIANJIANG_CONFIG", sizeof(SG_LEAGUE_DIANJIANG_CONFIG), 2, _struct_SG_LEAGUE_DIANJIANG_CONFIG_fieldinfo, _struct_SG_LEAGUE_DIANJIANG_CONFIG_readproc, _struct_SG_LEAGUE_DIANJIANG_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_DIANJIANG_CONFIG>()
	{
		return &_rfl_struct_SG_LEAGUE_DIANJIANG_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_BATTLE_RANK_CONFIG>(SG_LEAGUE_BATTLE_RANK_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.server_level_lower)) return false;
		if(!Read<_U32>(Value.server_level_upper)) return false;
		if(!Read<_U32>(Value.lower)) return false;
		if(!Read<_U32>(Value.upper)) return false;
		if(!Read<_U32>(Value.reward_exp)) return false;
		if(!Read<_U32>(Value.reward_gold)) return false;
		if(!Read<_U32>(Value.reward_rmb)) return false;
		if(!Read<_U32>(Value.reward_reputation)) return false;
		if(!Read<_U32>(Value.reward_contribution)) return false;
		if(!Read<_U32>(Value.reward_item1)) return false;
		if(!Read<_U32>(Value.reward_item_count1)) return false;
		if(!Read<_U32>(Value.reward_item2)) return false;
		if(!Read<_U32>(Value.reward_item_count2)) return false;
		if(!Read<_U32>(Value.reward_item3)) return false;
		if(!Read<_U32>(Value.reward_item_count3)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEAGUE_BATTLE_RANK_CONFIG>(const SG_LEAGUE_BATTLE_RANK_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.server_level_lower)) return false;
		if(!Write<_U32>(Value.server_level_upper)) return false;
		if(!Write<_U32>(Value.lower)) return false;
		if(!Write<_U32>(Value.upper)) return false;
		if(!Write<_U32>(Value.reward_exp)) return false;
		if(!Write<_U32>(Value.reward_gold)) return false;
		if(!Write<_U32>(Value.reward_rmb)) return false;
		if(!Write<_U32>(Value.reward_reputation)) return false;
		if(!Write<_U32>(Value.reward_contribution)) return false;
		if(!Write<_U32>(Value.reward_item1)) return false;
		if(!Write<_U32>(Value.reward_item_count1)) return false;
		if(!Write<_U32>(Value.reward_item2)) return false;
		if(!Write<_U32>(Value.reward_item_count2)) return false;
		if(!Write<_U32>(Value.reward_item3)) return false;
		if(!Write<_U32>(Value.reward_item_count3)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEAGUE_BATTLE_RANK_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEAGUE_BATTLE_RANK_CONFIG>(*((SG_LEAGUE_BATTLE_RANK_CONFIG*)data));
	}

	static bool _struct_SG_LEAGUE_BATTLE_RANK_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEAGUE_BATTLE_RANK_CONFIG>(*((const SG_LEAGUE_BATTLE_RANK_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_LEAGUE_BATTLE_RANK_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "server_level_lower", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, server_level_lower), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "server_level_upper", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, server_level_upper), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "lower", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, lower), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "upper", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, upper), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_exp", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, reward_exp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_gold", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, reward_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, reward_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_reputation", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, reward_reputation), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_contribution", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, reward_contribution), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item1", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, reward_item1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item_count1", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, reward_item_count1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item2", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, reward_item2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item_count2", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, reward_item_count2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item3", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, reward_item3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item_count3", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_BATTLE_RANK_CONFIG, reward_item_count3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEAGUE_BATTLE_RANK_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_LEAGUE_BATTLE_RANK_CONFIG", sizeof(SG_LEAGUE_BATTLE_RANK_CONFIG), 15, _struct_SG_LEAGUE_BATTLE_RANK_CONFIG_fieldinfo, _struct_SG_LEAGUE_BATTLE_RANK_CONFIG_readproc, _struct_SG_LEAGUE_BATTLE_RANK_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_BATTLE_RANK_CONFIG>()
	{
		return &_rfl_struct_SG_LEAGUE_BATTLE_RANK_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_MEMBER_WIN_CONFIG>(SG_LEAGUE_MEMBER_WIN_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.server_level_lower)) return false;
		if(!Read<_U32>(Value.server_level_upper)) return false;
		if(!Read<_U32>(Value.win_times)) return false;
		if(!Read<_U32>(Value.reward_exp)) return false;
		if(!Read<_U32>(Value.reward_gold)) return false;
		if(!Read<_U32>(Value.reward_rmb)) return false;
		if(!Read<_U32>(Value.reward_reputation)) return false;
		if(!Read<_U32>(Value.reward_contribution)) return false;
		if(!Read<_U32>(Value.reward_item1)) return false;
		if(!Read<_U32>(Value.reward_item_count1)) return false;
		if(!Read<_U32>(Value.reward_item2)) return false;
		if(!Read<_U32>(Value.reward_item_count2)) return false;
		if(!Read<_U32>(Value.reward_item3)) return false;
		if(!Read<_U32>(Value.reward_item_count3)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEAGUE_MEMBER_WIN_CONFIG>(const SG_LEAGUE_MEMBER_WIN_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.server_level_lower)) return false;
		if(!Write<_U32>(Value.server_level_upper)) return false;
		if(!Write<_U32>(Value.win_times)) return false;
		if(!Write<_U32>(Value.reward_exp)) return false;
		if(!Write<_U32>(Value.reward_gold)) return false;
		if(!Write<_U32>(Value.reward_rmb)) return false;
		if(!Write<_U32>(Value.reward_reputation)) return false;
		if(!Write<_U32>(Value.reward_contribution)) return false;
		if(!Write<_U32>(Value.reward_item1)) return false;
		if(!Write<_U32>(Value.reward_item_count1)) return false;
		if(!Write<_U32>(Value.reward_item2)) return false;
		if(!Write<_U32>(Value.reward_item_count2)) return false;
		if(!Write<_U32>(Value.reward_item3)) return false;
		if(!Write<_U32>(Value.reward_item_count3)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEAGUE_MEMBER_WIN_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEAGUE_MEMBER_WIN_CONFIG>(*((SG_LEAGUE_MEMBER_WIN_CONFIG*)data));
	}

	static bool _struct_SG_LEAGUE_MEMBER_WIN_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEAGUE_MEMBER_WIN_CONFIG>(*((const SG_LEAGUE_MEMBER_WIN_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_LEAGUE_MEMBER_WIN_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "server_level_lower", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_WIN_CONFIG, server_level_lower), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "server_level_upper", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_WIN_CONFIG, server_level_upper), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "win_times", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_WIN_CONFIG, win_times), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_exp", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_WIN_CONFIG, reward_exp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_gold", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_WIN_CONFIG, reward_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_WIN_CONFIG, reward_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_reputation", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_WIN_CONFIG, reward_reputation), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_contribution", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_WIN_CONFIG, reward_contribution), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item1", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_WIN_CONFIG, reward_item1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item_count1", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_WIN_CONFIG, reward_item_count1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item2", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_WIN_CONFIG, reward_item2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item_count2", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_WIN_CONFIG, reward_item_count2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item3", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_WIN_CONFIG, reward_item3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item_count3", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER_WIN_CONFIG, reward_item_count3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEAGUE_MEMBER_WIN_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_LEAGUE_MEMBER_WIN_CONFIG", sizeof(SG_LEAGUE_MEMBER_WIN_CONFIG), 14, _struct_SG_LEAGUE_MEMBER_WIN_CONFIG_fieldinfo, _struct_SG_LEAGUE_MEMBER_WIN_CONFIG_readproc, _struct_SG_LEAGUE_MEMBER_WIN_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_MEMBER_WIN_CONFIG>()
	{
		return &_rfl_struct_SG_LEAGUE_MEMBER_WIN_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PVP_RECORD_ITEM>(SG_PVP_RECORD_ITEM& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.challenger)) return false;
		if(!Read<_U32>(Value.defender)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.defender_name)) return false;
		if(!Read<_U8>(Value.type)) return false;
		if(!Read<_U32>(Value.time)) return false;
		if(!Read<_U32>(Value.param)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_PVP_RECORD_ITEM>(const SG_PVP_RECORD_ITEM& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.challenger)) return false;
		if(!Write<_U32>(Value.defender)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.defender_name)) return false;
		if(!Write<_U8>(Value.type)) return false;
		if(!Write<_U32>(Value.time)) return false;
		if(!Write<_U32>(Value.param)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_PVP_RECORD_ITEM_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_PVP_RECORD_ITEM>(*((SG_PVP_RECORD_ITEM*)data));
	}

	static bool _struct_SG_PVP_RECORD_ITEM_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_PVP_RECORD_ITEM>(*((const SG_PVP_RECORD_ITEM*)data));
	}

	static FIELD_INFO _struct_SG_PVP_RECORD_ITEM_fieldinfo[] =
	{
		{TYPE_U32, "challenger", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_RECORD_ITEM, challenger), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "defender", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_RECORD_ITEM, defender), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "defender_name", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_RECORD_ITEM, defender_name), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_U8, "type", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_RECORD_ITEM, type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "time", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_RECORD_ITEM, time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "param", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_RECORD_ITEM, param), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_PVP_RECORD_ITEM_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_PVP_RECORD_ITEM", sizeof(SG_PVP_RECORD_ITEM), 6, _struct_SG_PVP_RECORD_ITEM_fieldinfo, _struct_SG_PVP_RECORD_ITEM_readproc, _struct_SG_PVP_RECORD_ITEM_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_PVP_RECORD_ITEM>()
	{
		return &_rfl_struct_SG_PVP_RECORD_ITEM_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PVP_INFO_CONFIG>(SG_PVP_INFO_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.server_level_lower)) return false;
		if(!Read<_U32>(Value.server_level_upper)) return false;
		if(!Read<_U32>(Value.lower)) return false;
		if(!Read<_U32>(Value.upper)) return false;
		if(!Read<_U32>(Value.span)) return false;
		if(!Read<_U32>(Value.daily_reputation)) return false;
		if(!Read<_U32>(Value.reward_gold)) return false;
		if(!Read<_U32>(Value.reward_item)) return false;
		if(!Read<_U32>(Value.reward_item_count)) return false;
		if(!Read<_U32>(Value.succ_reputation)) return false;
		if(!Read<_U32>(Value.failed_reputation)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_PVP_INFO_CONFIG>(const SG_PVP_INFO_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.server_level_lower)) return false;
		if(!Write<_U32>(Value.server_level_upper)) return false;
		if(!Write<_U32>(Value.lower)) return false;
		if(!Write<_U32>(Value.upper)) return false;
		if(!Write<_U32>(Value.span)) return false;
		if(!Write<_U32>(Value.daily_reputation)) return false;
		if(!Write<_U32>(Value.reward_gold)) return false;
		if(!Write<_U32>(Value.reward_item)) return false;
		if(!Write<_U32>(Value.reward_item_count)) return false;
		if(!Write<_U32>(Value.succ_reputation)) return false;
		if(!Write<_U32>(Value.failed_reputation)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_PVP_INFO_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_PVP_INFO_CONFIG>(*((SG_PVP_INFO_CONFIG*)data));
	}

	static bool _struct_SG_PVP_INFO_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_PVP_INFO_CONFIG>(*((const SG_PVP_INFO_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_PVP_INFO_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "server_level_lower", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_INFO_CONFIG, server_level_lower), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "server_level_upper", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_INFO_CONFIG, server_level_upper), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "lower", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_INFO_CONFIG, lower), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "upper", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_INFO_CONFIG, upper), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "span", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_INFO_CONFIG, span), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "daily_reputation", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_INFO_CONFIG, daily_reputation), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_gold", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_INFO_CONFIG, reward_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_INFO_CONFIG, reward_item), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item_count", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_INFO_CONFIG, reward_item_count), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "succ_reputation", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_INFO_CONFIG, succ_reputation), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "failed_reputation", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_INFO_CONFIG, failed_reputation), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_PVP_INFO_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_PVP_INFO_CONFIG", sizeof(SG_PVP_INFO_CONFIG), 11, _struct_SG_PVP_INFO_CONFIG_fieldinfo, _struct_SG_PVP_INFO_CONFIG_readproc, _struct_SG_PVP_INFO_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_PVP_INFO_CONFIG>()
	{
		return &_rfl_struct_SG_PVP_INFO_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PVP_SETTING_CONFIG>(SG_PVP_SETTING_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.increase_pay_rmb)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_PVP_SETTING_CONFIG>(const SG_PVP_SETTING_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.increase_pay_rmb)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_PVP_SETTING_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_PVP_SETTING_CONFIG>(*((SG_PVP_SETTING_CONFIG*)data));
	}

	static bool _struct_SG_PVP_SETTING_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_PVP_SETTING_CONFIG>(*((const SG_PVP_SETTING_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_PVP_SETTING_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "increase_pay_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_SETTING_CONFIG, increase_pay_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_PVP_SETTING_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_PVP_SETTING_CONFIG", sizeof(SG_PVP_SETTING_CONFIG), 1, _struct_SG_PVP_SETTING_CONFIG_fieldinfo, _struct_SG_PVP_SETTING_CONFIG_readproc, _struct_SG_PVP_SETTING_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_PVP_SETTING_CONFIG>()
	{
		return &_rfl_struct_SG_PVP_SETTING_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GOODS_CONFIG>(SG_GOODS_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.good_id)) return false;
		if(!Read<_U8>(Value.display_condition)) return false;
		if(!Read<_U32>(Value.display_param1)) return false;
		if(!Read<_U32>(Value.display_param2)) return false;
		if(!Read<_U8>(Value.buy_condition)) return false;
		if(!Read<_U32>(Value.buy_param1)) return false;
		if(!Read<_U32>(Value.buy_param2)) return false;
		if(!Read<_U32>(Value.item_id)) return false;
		if(!Read<_U32>(Value.count)) return false;
		if(!Read<_U8>(Value.price_condition)) return false;
		if(!Read<_U32>(Value.price_param1)) return false;
		if(!Read<_U32>(Value.price_param2)) return false;
		if(!Read<_U32>(Value.price_discount)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_GOODS_CONFIG>(const SG_GOODS_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.good_id)) return false;
		if(!Write<_U8>(Value.display_condition)) return false;
		if(!Write<_U32>(Value.display_param1)) return false;
		if(!Write<_U32>(Value.display_param2)) return false;
		if(!Write<_U8>(Value.buy_condition)) return false;
		if(!Write<_U32>(Value.buy_param1)) return false;
		if(!Write<_U32>(Value.buy_param2)) return false;
		if(!Write<_U32>(Value.item_id)) return false;
		if(!Write<_U32>(Value.count)) return false;
		if(!Write<_U8>(Value.price_condition)) return false;
		if(!Write<_U32>(Value.price_param1)) return false;
		if(!Write<_U32>(Value.price_param2)) return false;
		if(!Write<_U32>(Value.price_discount)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_GOODS_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_GOODS_CONFIG>(*((SG_GOODS_CONFIG*)data));
	}

	static bool _struct_SG_GOODS_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_GOODS_CONFIG>(*((const SG_GOODS_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_GOODS_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "good_id", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_CONFIG, good_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "display_condition", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_CONFIG, display_condition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "display_param1", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_CONFIG, display_param1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "display_param2", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_CONFIG, display_param2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "buy_condition", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_CONFIG, buy_condition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "buy_param1", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_CONFIG, buy_param1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "buy_param2", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_CONFIG, buy_param2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "item_id", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_CONFIG, item_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "count", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_CONFIG, count), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "price_condition", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_CONFIG, price_condition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "price_param1", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_CONFIG, price_param1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "price_param2", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_CONFIG, price_param2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "price_discount", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_CONFIG, price_discount), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_GOODS_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_GOODS_CONFIG", sizeof(SG_GOODS_CONFIG), 13, _struct_SG_GOODS_CONFIG_fieldinfo, _struct_SG_GOODS_CONFIG_readproc, _struct_SG_GOODS_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_GOODS_CONFIG>()
	{
		return &_rfl_struct_SG_GOODS_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GOODS_GROUP_CONFIG>(SG_GOODS_GROUP_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.goods_group_id)) return false;
		if(!Read<_U32>(Value.good_id)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_GOODS_GROUP_CONFIG>(const SG_GOODS_GROUP_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.goods_group_id)) return false;
		if(!Write<_U32>(Value.good_id)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_GOODS_GROUP_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_GOODS_GROUP_CONFIG>(*((SG_GOODS_GROUP_CONFIG*)data));
	}

	static bool _struct_SG_GOODS_GROUP_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_GOODS_GROUP_CONFIG>(*((const SG_GOODS_GROUP_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_GOODS_GROUP_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "goods_group_id", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_GROUP_CONFIG, goods_group_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "good_id", 0, (_U16)ATLAS_OFFSETOF(SG_GOODS_GROUP_CONFIG, good_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_GOODS_GROUP_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_GOODS_GROUP_CONFIG", sizeof(SG_GOODS_GROUP_CONFIG), 2, _struct_SG_GOODS_GROUP_CONFIG_fieldinfo, _struct_SG_GOODS_GROUP_CONFIG_readproc, _struct_SG_GOODS_GROUP_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_GOODS_GROUP_CONFIG>()
	{
		return &_rfl_struct_SG_GOODS_GROUP_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SHOP_CONFIG>(SG_SHOP_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.shop_id)) return false;
		if(!ReadString<SG_GOODS_GROUP_NAME_MAX>(Value.goods_group_name)) return false;
		if(!Read<_U32>(Value.goods_group_id)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_SHOP_CONFIG>(const SG_SHOP_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.shop_id)) return false;
		if(!WriteString<SG_GOODS_GROUP_NAME_MAX>(Value.goods_group_name)) return false;
		if(!Write<_U32>(Value.goods_group_id)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_SHOP_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_SHOP_CONFIG>(*((SG_SHOP_CONFIG*)data));
	}

	static bool _struct_SG_SHOP_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_SHOP_CONFIG>(*((const SG_SHOP_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_SHOP_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "shop_id", 0, (_U16)ATLAS_OFFSETOF(SG_SHOP_CONFIG, shop_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "goods_group_name", 0, (_U16)ATLAS_OFFSETOF(SG_SHOP_CONFIG, goods_group_name), NULL, (_U16)SG_GOODS_GROUP_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_GOODS_GROUP_NAME_MAX>), NULL},
		{TYPE_U32, "goods_group_id", 0, (_U16)ATLAS_OFFSETOF(SG_SHOP_CONFIG, goods_group_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_SHOP_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_SHOP_CONFIG", sizeof(SG_SHOP_CONFIG), 3, _struct_SG_SHOP_CONFIG_fieldinfo, _struct_SG_SHOP_CONFIG_readproc, _struct_SG_SHOP_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_SHOP_CONFIG>()
	{
		return &_rfl_struct_SG_SHOP_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE>(SG_LEAGUE& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.league_id)) return false;
		if(!ReadString<SG_LEAGUE_NAME_MAX>(Value.league_name)) return false;
		if(!Read<_U32>(Value.rank)) return false;
		if(!Read<_U32>(Value.member_num)) return false;
		if(!Read<_U32>(Value.level)) return false;
		if(!Read<_U32>(Value.exp)) return false;
		if(!Read<_U32>(Value.create_time)) return false;
		if(!Read<_U32>(Value.owner_id)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.owner_name)) return false;
		if(!ReadString<SG_LEAGUE_NOTICE_MAX>(Value.post_content)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEAGUE>(const SG_LEAGUE& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.league_id)) return false;
		if(!WriteString<SG_LEAGUE_NAME_MAX>(Value.league_name)) return false;
		if(!Write<_U32>(Value.rank)) return false;
		if(!Write<_U32>(Value.member_num)) return false;
		if(!Write<_U32>(Value.level)) return false;
		if(!Write<_U32>(Value.exp)) return false;
		if(!Write<_U32>(Value.create_time)) return false;
		if(!Write<_U32>(Value.owner_id)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.owner_name)) return false;
		if(!WriteString<SG_LEAGUE_NOTICE_MAX>(Value.post_content)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEAGUE_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEAGUE>(*((SG_LEAGUE*)data));
	}

	static bool _struct_SG_LEAGUE_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEAGUE>(*((const SG_LEAGUE*)data));
	}

	static FIELD_INFO _struct_SG_LEAGUE_fieldinfo[] =
	{
		{TYPE_U32, "league_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE, league_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "league_name", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE, league_name), NULL, (_U16)SG_LEAGUE_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_LEAGUE_NAME_MAX>), NULL},
		{TYPE_U32, "rank", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE, rank), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "member_num", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE, member_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "level", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE, level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "exp", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE, exp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "create_time", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE, create_time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "owner_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE, owner_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "owner_name", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE, owner_name), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_STRING, "post_content", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE, post_content), NULL, (_U16)SG_LEAGUE_NOTICE_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_LEAGUE_NOTICE_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEAGUE_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_LEAGUE", sizeof(SG_LEAGUE), 10, _struct_SG_LEAGUE_fieldinfo, _struct_SG_LEAGUE_readproc, _struct_SG_LEAGUE_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE>()
	{
		return &_rfl_struct_SG_LEAGUE_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_MEMBER>(SG_LEAGUE_MEMBER& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.league_id)) return false;
		if(!Read<_U32>(Value.member_id)) return false;
		if(!Read<_U32>(Value.general_id)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.member_name)) return false;
		if(!Read<_U32>(Value.member_level)) return false;
		if(!Read<_U32>(Value.member_battle_value)) return false;
		if(!Read<_U32>(Value.pvp_rank)) return false;
		if(!Read<_U8>(Value.position)) return false;
		if(!Read<_U32>(Value.contribution_value)) return false;
		if(!Read<_U32>(Value.total_contribution_value)) return false;
		if(!Read<_U32>(Value.last_ol_time)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEAGUE_MEMBER>(const SG_LEAGUE_MEMBER& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.league_id)) return false;
		if(!Write<_U32>(Value.member_id)) return false;
		if(!Write<_U32>(Value.general_id)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.member_name)) return false;
		if(!Write<_U32>(Value.member_level)) return false;
		if(!Write<_U32>(Value.member_battle_value)) return false;
		if(!Write<_U32>(Value.pvp_rank)) return false;
		if(!Write<_U8>(Value.position)) return false;
		if(!Write<_U32>(Value.contribution_value)) return false;
		if(!Write<_U32>(Value.total_contribution_value)) return false;
		if(!Write<_U32>(Value.last_ol_time)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEAGUE_MEMBER_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEAGUE_MEMBER>(*((SG_LEAGUE_MEMBER*)data));
	}

	static bool _struct_SG_LEAGUE_MEMBER_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEAGUE_MEMBER>(*((const SG_LEAGUE_MEMBER*)data));
	}

	static FIELD_INFO _struct_SG_LEAGUE_MEMBER_fieldinfo[] =
	{
		{TYPE_U32, "league_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER, league_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "member_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER, member_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "general_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER, general_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "member_name", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER, member_name), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_U32, "member_level", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER, member_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "member_battle_value", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER, member_battle_value), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "pvp_rank", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER, pvp_rank), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "position", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER, position), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "contribution_value", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER, contribution_value), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "total_contribution_value", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER, total_contribution_value), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "last_ol_time", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_MEMBER, last_ol_time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEAGUE_MEMBER_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_LEAGUE_MEMBER", sizeof(SG_LEAGUE_MEMBER), 11, _struct_SG_LEAGUE_MEMBER_fieldinfo, _struct_SG_LEAGUE_MEMBER_readproc, _struct_SG_LEAGUE_MEMBER_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_MEMBER>()
	{
		return &_rfl_struct_SG_LEAGUE_MEMBER_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_APPLYER>(SG_LEAGUE_APPLYER& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.applyer_id)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.applyer_name)) return false;
		if(!Read<_U32>(Value.general_id)) return false;
		if(!Read<_U32>(Value.level)) return false;
		if(!Read<_U32>(Value.rank)) return false;
		if(!Read<_U32>(Value.league_id)) return false;
		if(!Read<_U8>(Value.reason)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEAGUE_APPLYER>(const SG_LEAGUE_APPLYER& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.applyer_id)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.applyer_name)) return false;
		if(!Write<_U32>(Value.general_id)) return false;
		if(!Write<_U32>(Value.level)) return false;
		if(!Write<_U32>(Value.rank)) return false;
		if(!Write<_U32>(Value.league_id)) return false;
		if(!Write<_U8>(Value.reason)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEAGUE_APPLYER_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEAGUE_APPLYER>(*((SG_LEAGUE_APPLYER*)data));
	}

	static bool _struct_SG_LEAGUE_APPLYER_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEAGUE_APPLYER>(*((const SG_LEAGUE_APPLYER*)data));
	}

	static FIELD_INFO _struct_SG_LEAGUE_APPLYER_fieldinfo[] =
	{
		{TYPE_U32, "applyer_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_APPLYER, applyer_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "applyer_name", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_APPLYER, applyer_name), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_U32, "general_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_APPLYER, general_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "level", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_APPLYER, level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "rank", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_APPLYER, rank), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "league_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_APPLYER, league_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "reason", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_APPLYER, reason), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEAGUE_APPLYER_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_LEAGUE_APPLYER", sizeof(SG_LEAGUE_APPLYER), 7, _struct_SG_LEAGUE_APPLYER_fieldinfo, _struct_SG_LEAGUE_APPLYER_readproc, _struct_SG_LEAGUE_APPLYER_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_APPLYER>()
	{
		return &_rfl_struct_SG_LEAGUE_APPLYER_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_LOG>(SG_LEAGUE_LOG& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.league_id)) return false;
		if(!Read<_U32>(Value.result_time)) return false;
		if(!Read<_U32>(Value.type)) return false;
		if(!ReadString<SG_LEAGUE_LOG_MAX>(Value.log)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEAGUE_LOG>(const SG_LEAGUE_LOG& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.league_id)) return false;
		if(!Write<_U32>(Value.result_time)) return false;
		if(!Write<_U32>(Value.type)) return false;
		if(!WriteString<SG_LEAGUE_LOG_MAX>(Value.log)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEAGUE_LOG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEAGUE_LOG>(*((SG_LEAGUE_LOG*)data));
	}

	static bool _struct_SG_LEAGUE_LOG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEAGUE_LOG>(*((const SG_LEAGUE_LOG*)data));
	}

	static FIELD_INFO _struct_SG_LEAGUE_LOG_fieldinfo[] =
	{
		{TYPE_U32, "league_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_LOG, league_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "result_time", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_LOG, result_time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "type", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_LOG, type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "log", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_LOG, log), NULL, (_U16)SG_LEAGUE_LOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_LEAGUE_LOG_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEAGUE_LOG_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_LEAGUE_LOG", sizeof(SG_LEAGUE_LOG), 4, _struct_SG_LEAGUE_LOG_fieldinfo, _struct_SG_LEAGUE_LOG_readproc, _struct_SG_LEAGUE_LOG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_LOG>()
	{
		return &_rfl_struct_SG_LEAGUE_LOG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_DIANJIANG_JOINER>(SG_LEAGUE_DIANJIANG_JOINER& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.league_id)) return false;
		if(!Read<_U32>(Value.member_id)) return false;
		if(!Read<_U32>(Value.general_id)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.member_name)) return false;
		if(!Read<_U8>(Value.role)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEAGUE_DIANJIANG_JOINER>(const SG_LEAGUE_DIANJIANG_JOINER& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.league_id)) return false;
		if(!Write<_U32>(Value.member_id)) return false;
		if(!Write<_U32>(Value.general_id)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.member_name)) return false;
		if(!Write<_U8>(Value.role)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEAGUE_DIANJIANG_JOINER_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEAGUE_DIANJIANG_JOINER>(*((SG_LEAGUE_DIANJIANG_JOINER*)data));
	}

	static bool _struct_SG_LEAGUE_DIANJIANG_JOINER_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEAGUE_DIANJIANG_JOINER>(*((const SG_LEAGUE_DIANJIANG_JOINER*)data));
	}

	static FIELD_INFO _struct_SG_LEAGUE_DIANJIANG_JOINER_fieldinfo[] =
	{
		{TYPE_U32, "league_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_DIANJIANG_JOINER, league_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "member_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_DIANJIANG_JOINER, member_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "general_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_DIANJIANG_JOINER, general_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "member_name", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_DIANJIANG_JOINER, member_name), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_U8, "role", 0, (_U16)ATLAS_OFFSETOF(SG_LEAGUE_DIANJIANG_JOINER, role), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEAGUE_DIANJIANG_JOINER_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_LEAGUE_DIANJIANG_JOINER", sizeof(SG_LEAGUE_DIANJIANG_JOINER), 5, _struct_SG_LEAGUE_DIANJIANG_JOINER_fieldinfo, _struct_SG_LEAGUE_DIANJIANG_JOINER_readproc, _struct_SG_LEAGUE_DIANJIANG_JOINER_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_DIANJIANG_JOINER>()
	{
		return &_rfl_struct_SG_LEAGUE_DIANJIANG_JOINER_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_HALO_CONFIG>(SG_HALO_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.halo_level)) return false;
		if(!Read<_U32>(Value.EXP)) return false;
		if(!Read<_F32>(Value.ATK)) return false;
		if(!Read<_F32>(Value.DEF)) return false;
		if(!Read<_F32>(Value.HIT)) return false;
		if(!Read<_F32>(Value.EVASION)) return false;
		if(!Read<_F32>(Value.CRIT)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_HALO_CONFIG>(const SG_HALO_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.halo_level)) return false;
		if(!Write<_U32>(Value.EXP)) return false;
		if(!Write<_F32>(Value.ATK)) return false;
		if(!Write<_F32>(Value.DEF)) return false;
		if(!Write<_F32>(Value.HIT)) return false;
		if(!Write<_F32>(Value.EVASION)) return false;
		if(!Write<_F32>(Value.CRIT)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_HALO_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_HALO_CONFIG>(*((SG_HALO_CONFIG*)data));
	}

	static bool _struct_SG_HALO_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_HALO_CONFIG>(*((const SG_HALO_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_HALO_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "halo_level", 0, (_U16)ATLAS_OFFSETOF(SG_HALO_CONFIG, halo_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "EXP", 0, (_U16)ATLAS_OFFSETOF(SG_HALO_CONFIG, EXP), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "ATK", 0, (_U16)ATLAS_OFFSETOF(SG_HALO_CONFIG, ATK), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "DEF", 0, (_U16)ATLAS_OFFSETOF(SG_HALO_CONFIG, DEF), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "HIT", 0, (_U16)ATLAS_OFFSETOF(SG_HALO_CONFIG, HIT), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "EVASION", 0, (_U16)ATLAS_OFFSETOF(SG_HALO_CONFIG, EVASION), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "CRIT", 0, (_U16)ATLAS_OFFSETOF(SG_HALO_CONFIG, CRIT), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_HALO_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_HALO_CONFIG", sizeof(SG_HALO_CONFIG), 7, _struct_SG_HALO_CONFIG_fieldinfo, _struct_SG_HALO_CONFIG_readproc, _struct_SG_HALO_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_HALO_CONFIG>()
	{
		return &_rfl_struct_SG_HALO_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_HALO_LEVELUP_CONFIG>(SG_HALO_LEVELUP_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.level)) return false;
		if(!Read<_U32>(Value.EXP)) return false;
		if(!Read<_U32>(Value.CD)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_HALO_LEVELUP_CONFIG>(const SG_HALO_LEVELUP_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.level)) return false;
		if(!Write<_U32>(Value.EXP)) return false;
		if(!Write<_U32>(Value.CD)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_HALO_LEVELUP_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_HALO_LEVELUP_CONFIG>(*((SG_HALO_LEVELUP_CONFIG*)data));
	}

	static bool _struct_SG_HALO_LEVELUP_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_HALO_LEVELUP_CONFIG>(*((const SG_HALO_LEVELUP_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_HALO_LEVELUP_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "level", 0, (_U16)ATLAS_OFFSETOF(SG_HALO_LEVELUP_CONFIG, level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "EXP", 0, (_U16)ATLAS_OFFSETOF(SG_HALO_LEVELUP_CONFIG, EXP), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "CD", 0, (_U16)ATLAS_OFFSETOF(SG_HALO_LEVELUP_CONFIG, CD), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_HALO_LEVELUP_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_HALO_LEVELUP_CONFIG", sizeof(SG_HALO_LEVELUP_CONFIG), 3, _struct_SG_HALO_LEVELUP_CONFIG_fieldinfo, _struct_SG_HALO_LEVELUP_CONFIG_readproc, _struct_SG_HALO_LEVELUP_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_HALO_LEVELUP_CONFIG>()
	{
		return &_rfl_struct_SG_HALO_LEVELUP_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PLAYER_TITLE_CONFIG>(SG_PLAYER_TITLE_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U8>(Value.title_level)) return false;
		if(!ReadString<SG_PLAYER_TITLE_NAME_MAX>(Value.title_name)) return false;
		if(!Read<_U8>(Value.title_star)) return false;
		if(!Read<_U32>(Value.req_level_up_reputaion)) return false;
		if(!Read<_U32>(Value.daily_reputation_deduct)) return false;
		if(!Read<_U8>(Value.general_limit_num)) return false;
		if(!Read<_U32>(Value.daily_salary_gold)) return false;
		if(!Read<_U32>(Value.daily_reward_reserve)) return false;
		if(!Read<_U32>(Value.STRAddition)) return false;
		if(!Read<_U32>(Value.INTAddition)) return false;
		if(!Read<_U32>(Value.HP_AddExtra)) return false;
		if(!Read<_U32>(Value.ATK_AddExtra)) return false;
		if(!Read<_U32>(Value.DEF_AddExtra)) return false;
		if(!ReadString<SG_TITLE_PROP_DESC>(Value.employ_general_prop_desc)) return false;
		if(!ReadString<SG_TITLE_GENERAL_DESC>(Value.employ_general_desc)) return false;
		if(!ReadString<SG_TITLE_ACRHTYPE_MAX>(Value.wusheng_male)) return false;
		if(!ReadString<SG_TITLE_ACRHTYPE_MAX>(Value.wusheng_female)) return false;
		if(!ReadString<SG_TITLE_ACRHTYPE_MAX>(Value.junshi_male)) return false;
		if(!ReadString<SG_TITLE_ACRHTYPE_MAX>(Value.junshi_female)) return false;
		if(!ReadString<SG_TITLE_ACRHTYPE_MAX>(Value.jianshen_male)) return false;
		if(!ReadString<SG_TITLE_ACRHTYPE_MAX>(Value.jianshen_female)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_PLAYER_TITLE_CONFIG>(const SG_PLAYER_TITLE_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U8>(Value.title_level)) return false;
		if(!WriteString<SG_PLAYER_TITLE_NAME_MAX>(Value.title_name)) return false;
		if(!Write<_U8>(Value.title_star)) return false;
		if(!Write<_U32>(Value.req_level_up_reputaion)) return false;
		if(!Write<_U32>(Value.daily_reputation_deduct)) return false;
		if(!Write<_U8>(Value.general_limit_num)) return false;
		if(!Write<_U32>(Value.daily_salary_gold)) return false;
		if(!Write<_U32>(Value.daily_reward_reserve)) return false;
		if(!Write<_U32>(Value.STRAddition)) return false;
		if(!Write<_U32>(Value.INTAddition)) return false;
		if(!Write<_U32>(Value.HP_AddExtra)) return false;
		if(!Write<_U32>(Value.ATK_AddExtra)) return false;
		if(!Write<_U32>(Value.DEF_AddExtra)) return false;
		if(!WriteString<SG_TITLE_PROP_DESC>(Value.employ_general_prop_desc)) return false;
		if(!WriteString<SG_TITLE_GENERAL_DESC>(Value.employ_general_desc)) return false;
		if(!WriteString<SG_TITLE_ACRHTYPE_MAX>(Value.wusheng_male)) return false;
		if(!WriteString<SG_TITLE_ACRHTYPE_MAX>(Value.wusheng_female)) return false;
		if(!WriteString<SG_TITLE_ACRHTYPE_MAX>(Value.junshi_male)) return false;
		if(!WriteString<SG_TITLE_ACRHTYPE_MAX>(Value.junshi_female)) return false;
		if(!WriteString<SG_TITLE_ACRHTYPE_MAX>(Value.jianshen_male)) return false;
		if(!WriteString<SG_TITLE_ACRHTYPE_MAX>(Value.jianshen_female)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_PLAYER_TITLE_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_PLAYER_TITLE_CONFIG>(*((SG_PLAYER_TITLE_CONFIG*)data));
	}

	static bool _struct_SG_PLAYER_TITLE_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_PLAYER_TITLE_CONFIG>(*((const SG_PLAYER_TITLE_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_PLAYER_TITLE_CONFIG_fieldinfo[] =
	{
		{TYPE_U8, "title_level", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, title_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "title_name", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, title_name), NULL, (_U16)SG_PLAYER_TITLE_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_TITLE_NAME_MAX>), NULL},
		{TYPE_U8, "title_star", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, title_star), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "req_level_up_reputaion", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, req_level_up_reputaion), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "daily_reputation_deduct", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, daily_reputation_deduct), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "general_limit_num", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, general_limit_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "daily_salary_gold", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, daily_salary_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "daily_reward_reserve", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, daily_reward_reserve), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "STRAddition", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, STRAddition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "INTAddition", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, INTAddition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "HP_AddExtra", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, HP_AddExtra), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "ATK_AddExtra", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, ATK_AddExtra), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "DEF_AddExtra", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, DEF_AddExtra), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "employ_general_prop_desc", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, employ_general_prop_desc), NULL, (_U16)SG_TITLE_PROP_DESC, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TITLE_PROP_DESC>), NULL},
		{TYPE_STRING, "employ_general_desc", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, employ_general_desc), NULL, (_U16)SG_TITLE_GENERAL_DESC, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TITLE_GENERAL_DESC>), NULL},
		{TYPE_STRING, "wusheng_male", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, wusheng_male), NULL, (_U16)SG_TITLE_ACRHTYPE_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TITLE_ACRHTYPE_MAX>), NULL},
		{TYPE_STRING, "wusheng_female", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, wusheng_female), NULL, (_U16)SG_TITLE_ACRHTYPE_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TITLE_ACRHTYPE_MAX>), NULL},
		{TYPE_STRING, "junshi_male", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, junshi_male), NULL, (_U16)SG_TITLE_ACRHTYPE_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TITLE_ACRHTYPE_MAX>), NULL},
		{TYPE_STRING, "junshi_female", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, junshi_female), NULL, (_U16)SG_TITLE_ACRHTYPE_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TITLE_ACRHTYPE_MAX>), NULL},
		{TYPE_STRING, "jianshen_male", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, jianshen_male), NULL, (_U16)SG_TITLE_ACRHTYPE_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TITLE_ACRHTYPE_MAX>), NULL},
		{TYPE_STRING, "jianshen_female", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_TITLE_CONFIG, jianshen_female), NULL, (_U16)SG_TITLE_ACRHTYPE_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TITLE_ACRHTYPE_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_PLAYER_TITLE_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_PLAYER_TITLE_CONFIG", sizeof(SG_PLAYER_TITLE_CONFIG), 21, _struct_SG_PLAYER_TITLE_CONFIG_fieldinfo, _struct_SG_PLAYER_TITLE_CONFIG_readproc, _struct_SG_PLAYER_TITLE_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_PLAYER_TITLE_CONFIG>()
	{
		return &_rfl_struct_SG_PLAYER_TITLE_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_QUEST_LIVE_INFO>(SG_QUEST_LIVE_INFO& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.quest_id)) return false;
		if(!Read<_U32>(Value.counter)) return false;
		if(!Read<_U8>(Value.status)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_QUEST_LIVE_INFO>(const SG_QUEST_LIVE_INFO& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.quest_id)) return false;
		if(!Write<_U32>(Value.counter)) return false;
		if(!Write<_U8>(Value.status)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_QUEST_LIVE_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_QUEST_LIVE_INFO>(*((SG_QUEST_LIVE_INFO*)data));
	}

	static bool _struct_SG_QUEST_LIVE_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_QUEST_LIVE_INFO>(*((const SG_QUEST_LIVE_INFO*)data));
	}

	static FIELD_INFO _struct_SG_QUEST_LIVE_INFO_fieldinfo[] =
	{
		{TYPE_U32, "quest_id", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_LIVE_INFO, quest_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "counter", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_LIVE_INFO, counter), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "status", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_LIVE_INFO, status), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_QUEST_LIVE_INFO_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_QUEST_LIVE_INFO", sizeof(SG_QUEST_LIVE_INFO), 3, _struct_SG_QUEST_LIVE_INFO_fieldinfo, _struct_SG_QUEST_LIVE_INFO_readproc, _struct_SG_QUEST_LIVE_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_QUEST_LIVE_INFO>()
	{
		return &_rfl_struct_SG_QUEST_LIVE_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_QUEST_INFO_CONFIG>(SG_QUEST_INFO_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.quest_id)) return false;
		if(!Read<_U8>(Value.quest_type)) return false;
		if(!ReadString<SG_QUEST_NAME_MAX>(Value.quest_name)) return false;
		if(!ReadString<SG_QUEST_GOAL_MAX>(Value.quest_goal_desc)) return false;
		if(!ReadString<SG_QUEST_GOAL_DESC_MAX>(Value.quest_goal_short_desc)) return false;
		if(!Read<_U8>(Value.trigger_type)) return false;
		if(!ReadString<SG_QUEST_URL_MAX>(Value.giver_url)) return false;
		if(!Read<_U8>(Value.submitee_type)) return false;
		if(!ReadString<SG_QUEST_URL_MAX>(Value.submitee_url)) return false;
		if(!Read<_U32>(Value.pre_quest_id)) return false;
		if(!Read<_U32>(Value.req_level)) return false;
		if(!Read<_U8>(Value.condition1_type)) return false;
		if(!ReadString<SG_QUEST_COND_MAX>(Value.condition1_param1)) return false;
		if(!ReadString<SG_QUEST_COND_MAX>(Value.condition1_param2)) return false;
		if(!Read<_U8>(Value.condition2_type)) return false;
		if(!ReadString<SG_QUEST_COND_MAX>(Value.condition2_param1)) return false;
		if(!ReadString<SG_QUEST_COND_MAX>(Value.condition2_param2)) return false;
		if(!Read<_U8>(Value.quest_goal_type)) return false;
		if(!ReadString<SG_QUEST_GOAL_MAX>(Value.goal_string_param)) return false;
		if(!Read<_U32>(Value.goal_int_param)) return false;
		if(!ReadString<SG_QUEST_GOAL_MAX>(Value.goal_string_param2)) return false;
		if(!Read<_U32>(Value.goal_int_param2)) return false;
		if(!ReadString<SG_QUEST_URL_MAX>(Value.goal_pathfinding_url)) return false;
		if(!Read<_U32>(Value.goal_pathfinding_prority)) return false;
		if(!Read<_U8>(Value.req_pack_slot)) return false;
		if(!Read<_U32>(Value.reward_xp)) return false;
		if(!Read<_U32>(Value.reward_gold)) return false;
		if(!Read<_U32>(Value.reward_rmb)) return false;
		if(!Read<_U32>(Value.reward_reputation)) return false;
		if(!Read<_U32>(Value.reward_energy)) return false;
		if(!Read<_U32>(Value.reward_item1)) return false;
		if(!Read<_U32>(Value.reward_item1_num)) return false;
		if(!Read<_U32>(Value.reward_item2)) return false;
		if(!Read<_U32>(Value.reward_item2_num)) return false;
		if(!Read<_U32>(Value.reward_item3)) return false;
		if(!Read<_U32>(Value.reward_item3_num)) return false;
		if(!Read<_U32>(Value.reward_item4)) return false;
		if(!Read<_U32>(Value.reward_item4_num)) return false;
		if(!ReadString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_npc1)) return false;
		if(!ReadString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_answer1)) return false;
		if(!ReadString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_npc2)) return false;
		if(!ReadString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_answer2)) return false;
		if(!ReadString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_npc3)) return false;
		if(!ReadString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_answer3)) return false;
		if(!ReadString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_npc4)) return false;
		if(!ReadString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_answer4)) return false;
		if(!ReadString<SG_QUEST_DIALOG_MAX>(Value.dialog_submit_npc1)) return false;
		if(!ReadString<SG_QUEST_DIALOG_MAX>(Value.dialog_submit_answer1)) return false;
		if(!ReadString<SG_QUEST_DIALOG_MAX>(Value.dialog_submit_npc2)) return false;
		if(!ReadString<SG_QUEST_DIALOG_MAX>(Value.dialog_submit_answer2)) return false;
		if(!ReadString<SG_QUEST_DIALOG_MAX>(Value.dialog_wip_npc)) return false;
		if(!ReadString<SG_QUEST_DIALOG_MAX>(Value.dialog_wip_answer)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_QUEST_INFO_CONFIG>(const SG_QUEST_INFO_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.quest_id)) return false;
		if(!Write<_U8>(Value.quest_type)) return false;
		if(!WriteString<SG_QUEST_NAME_MAX>(Value.quest_name)) return false;
		if(!WriteString<SG_QUEST_GOAL_MAX>(Value.quest_goal_desc)) return false;
		if(!WriteString<SG_QUEST_GOAL_DESC_MAX>(Value.quest_goal_short_desc)) return false;
		if(!Write<_U8>(Value.trigger_type)) return false;
		if(!WriteString<SG_QUEST_URL_MAX>(Value.giver_url)) return false;
		if(!Write<_U8>(Value.submitee_type)) return false;
		if(!WriteString<SG_QUEST_URL_MAX>(Value.submitee_url)) return false;
		if(!Write<_U32>(Value.pre_quest_id)) return false;
		if(!Write<_U32>(Value.req_level)) return false;
		if(!Write<_U8>(Value.condition1_type)) return false;
		if(!WriteString<SG_QUEST_COND_MAX>(Value.condition1_param1)) return false;
		if(!WriteString<SG_QUEST_COND_MAX>(Value.condition1_param2)) return false;
		if(!Write<_U8>(Value.condition2_type)) return false;
		if(!WriteString<SG_QUEST_COND_MAX>(Value.condition2_param1)) return false;
		if(!WriteString<SG_QUEST_COND_MAX>(Value.condition2_param2)) return false;
		if(!Write<_U8>(Value.quest_goal_type)) return false;
		if(!WriteString<SG_QUEST_GOAL_MAX>(Value.goal_string_param)) return false;
		if(!Write<_U32>(Value.goal_int_param)) return false;
		if(!WriteString<SG_QUEST_GOAL_MAX>(Value.goal_string_param2)) return false;
		if(!Write<_U32>(Value.goal_int_param2)) return false;
		if(!WriteString<SG_QUEST_URL_MAX>(Value.goal_pathfinding_url)) return false;
		if(!Write<_U32>(Value.goal_pathfinding_prority)) return false;
		if(!Write<_U8>(Value.req_pack_slot)) return false;
		if(!Write<_U32>(Value.reward_xp)) return false;
		if(!Write<_U32>(Value.reward_gold)) return false;
		if(!Write<_U32>(Value.reward_rmb)) return false;
		if(!Write<_U32>(Value.reward_reputation)) return false;
		if(!Write<_U32>(Value.reward_energy)) return false;
		if(!Write<_U32>(Value.reward_item1)) return false;
		if(!Write<_U32>(Value.reward_item1_num)) return false;
		if(!Write<_U32>(Value.reward_item2)) return false;
		if(!Write<_U32>(Value.reward_item2_num)) return false;
		if(!Write<_U32>(Value.reward_item3)) return false;
		if(!Write<_U32>(Value.reward_item3_num)) return false;
		if(!Write<_U32>(Value.reward_item4)) return false;
		if(!Write<_U32>(Value.reward_item4_num)) return false;
		if(!WriteString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_npc1)) return false;
		if(!WriteString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_answer1)) return false;
		if(!WriteString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_npc2)) return false;
		if(!WriteString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_answer2)) return false;
		if(!WriteString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_npc3)) return false;
		if(!WriteString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_answer3)) return false;
		if(!WriteString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_npc4)) return false;
		if(!WriteString<SG_QUEST_DIALOG_MAX>(Value.dialog_giving_answer4)) return false;
		if(!WriteString<SG_QUEST_DIALOG_MAX>(Value.dialog_submit_npc1)) return false;
		if(!WriteString<SG_QUEST_DIALOG_MAX>(Value.dialog_submit_answer1)) return false;
		if(!WriteString<SG_QUEST_DIALOG_MAX>(Value.dialog_submit_npc2)) return false;
		if(!WriteString<SG_QUEST_DIALOG_MAX>(Value.dialog_submit_answer2)) return false;
		if(!WriteString<SG_QUEST_DIALOG_MAX>(Value.dialog_wip_npc)) return false;
		if(!WriteString<SG_QUEST_DIALOG_MAX>(Value.dialog_wip_answer)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_QUEST_INFO_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_QUEST_INFO_CONFIG>(*((SG_QUEST_INFO_CONFIG*)data));
	}

	static bool _struct_SG_QUEST_INFO_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_QUEST_INFO_CONFIG>(*((const SG_QUEST_INFO_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_QUEST_INFO_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "quest_id", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, quest_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "quest_type", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, quest_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "quest_name", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, quest_name), NULL, (_U16)SG_QUEST_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_NAME_MAX>), NULL},
		{TYPE_STRING, "quest_goal_desc", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, quest_goal_desc), NULL, (_U16)SG_QUEST_GOAL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_GOAL_MAX>), NULL},
		{TYPE_STRING, "quest_goal_short_desc", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, quest_goal_short_desc), NULL, (_U16)SG_QUEST_GOAL_DESC_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_GOAL_DESC_MAX>), NULL},
		{TYPE_U8, "trigger_type", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, trigger_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "giver_url", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, giver_url), NULL, (_U16)SG_QUEST_URL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_URL_MAX>), NULL},
		{TYPE_U8, "submitee_type", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, submitee_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "submitee_url", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, submitee_url), NULL, (_U16)SG_QUEST_URL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_URL_MAX>), NULL},
		{TYPE_U32, "pre_quest_id", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, pre_quest_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "req_level", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, req_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "condition1_type", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, condition1_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "condition1_param1", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, condition1_param1), NULL, (_U16)SG_QUEST_COND_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_COND_MAX>), NULL},
		{TYPE_STRING, "condition1_param2", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, condition1_param2), NULL, (_U16)SG_QUEST_COND_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_COND_MAX>), NULL},
		{TYPE_U8, "condition2_type", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, condition2_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "condition2_param1", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, condition2_param1), NULL, (_U16)SG_QUEST_COND_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_COND_MAX>), NULL},
		{TYPE_STRING, "condition2_param2", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, condition2_param2), NULL, (_U16)SG_QUEST_COND_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_COND_MAX>), NULL},
		{TYPE_U8, "quest_goal_type", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, quest_goal_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "goal_string_param", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, goal_string_param), NULL, (_U16)SG_QUEST_GOAL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_GOAL_MAX>), NULL},
		{TYPE_U32, "goal_int_param", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, goal_int_param), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "goal_string_param2", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, goal_string_param2), NULL, (_U16)SG_QUEST_GOAL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_GOAL_MAX>), NULL},
		{TYPE_U32, "goal_int_param2", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, goal_int_param2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "goal_pathfinding_url", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, goal_pathfinding_url), NULL, (_U16)SG_QUEST_URL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_URL_MAX>), NULL},
		{TYPE_U32, "goal_pathfinding_prority", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, goal_pathfinding_prority), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "req_pack_slot", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, req_pack_slot), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "reward_xp", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, reward_xp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_gold", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, reward_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, reward_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_reputation", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, reward_reputation), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_energy", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, reward_energy), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item1", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, reward_item1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item1_num", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, reward_item1_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item2", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, reward_item2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item2_num", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, reward_item2_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item3", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, reward_item3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item3_num", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, reward_item3_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item4", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, reward_item4), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reward_item4_num", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, reward_item4_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "dialog_giving_npc1", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, dialog_giving_npc1), NULL, (_U16)SG_QUEST_DIALOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_DIALOG_MAX>), NULL},
		{TYPE_STRING, "dialog_giving_answer1", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, dialog_giving_answer1), NULL, (_U16)SG_QUEST_DIALOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_DIALOG_MAX>), NULL},
		{TYPE_STRING, "dialog_giving_npc2", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, dialog_giving_npc2), NULL, (_U16)SG_QUEST_DIALOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_DIALOG_MAX>), NULL},
		{TYPE_STRING, "dialog_giving_answer2", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, dialog_giving_answer2), NULL, (_U16)SG_QUEST_DIALOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_DIALOG_MAX>), NULL},
		{TYPE_STRING, "dialog_giving_npc3", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, dialog_giving_npc3), NULL, (_U16)SG_QUEST_DIALOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_DIALOG_MAX>), NULL},
		{TYPE_STRING, "dialog_giving_answer3", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, dialog_giving_answer3), NULL, (_U16)SG_QUEST_DIALOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_DIALOG_MAX>), NULL},
		{TYPE_STRING, "dialog_giving_npc4", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, dialog_giving_npc4), NULL, (_U16)SG_QUEST_DIALOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_DIALOG_MAX>), NULL},
		{TYPE_STRING, "dialog_giving_answer4", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, dialog_giving_answer4), NULL, (_U16)SG_QUEST_DIALOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_DIALOG_MAX>), NULL},
		{TYPE_STRING, "dialog_submit_npc1", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, dialog_submit_npc1), NULL, (_U16)SG_QUEST_DIALOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_DIALOG_MAX>), NULL},
		{TYPE_STRING, "dialog_submit_answer1", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, dialog_submit_answer1), NULL, (_U16)SG_QUEST_DIALOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_DIALOG_MAX>), NULL},
		{TYPE_STRING, "dialog_submit_npc2", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, dialog_submit_npc2), NULL, (_U16)SG_QUEST_DIALOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_DIALOG_MAX>), NULL},
		{TYPE_STRING, "dialog_submit_answer2", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, dialog_submit_answer2), NULL, (_U16)SG_QUEST_DIALOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_DIALOG_MAX>), NULL},
		{TYPE_STRING, "dialog_wip_npc", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, dialog_wip_npc), NULL, (_U16)SG_QUEST_DIALOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_DIALOG_MAX>), NULL},
		{TYPE_STRING, "dialog_wip_answer", 0, (_U16)ATLAS_OFFSETOF(SG_QUEST_INFO_CONFIG, dialog_wip_answer), NULL, (_U16)SG_QUEST_DIALOG_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_QUEST_DIALOG_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_QUEST_INFO_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_QUEST_INFO_CONFIG", sizeof(SG_QUEST_INFO_CONFIG), 52, _struct_SG_QUEST_INFO_CONFIG_fieldinfo, _struct_SG_QUEST_INFO_CONFIG_readproc, _struct_SG_QUEST_INFO_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_QUEST_INFO_CONFIG>()
	{
		return &_rfl_struct_SG_QUEST_INFO_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEVEL_INFO_CONFIG>(SG_LEVEL_INFO_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.level_id)) return false;
		if(!Read<_U32>(Value.next_level)) return false;
		if(!ReadString<SG_DESCRIPTION_MAX>(Value.description)) return false;
		if(!Read<_U32>(Value.req_player_level)) return false;
		if(!Read<_U32>(Value.wake_pt)) return false;
		if(!ReadString<SG_SOLDIER_NAME_MAX>(Value.soldier_name1)) return false;
		if(!ReadString<SG_SOLDIER_NAME_MAX>(Value.soldier_name2)) return false;
		if(!ReadString<SG_SOLDIER_NAME_MAX>(Value.soldier_name3)) return false;
		if(!ReadString<SG_SOLDIER_NAME_MAX>(Value.soldier_name4)) return false;
		if(!ReadString<SG_SOLDIER_NAME_MAX>(Value.soldier_name5)) return false;
		if(!ReadString<SG_SOLDIER_NAME_MAX>(Value.soldier_name6)) return false;
		if(!Read<_U8>(Value.atk_type1)) return false;
		if(!Read<_U8>(Value.atk_type2)) return false;
		if(!Read<_U8>(Value.atk_type3)) return false;
		if(!Read<_U8>(Value.atk_type4)) return false;
		if(!Read<_U8>(Value.atk_type5)) return false;
		if(!Read<_U8>(Value.atk_type6)) return false;
		if(!Read<_U8>(Value.wpt_type1)) return false;
		if(!Read<_U8>(Value.wpt_type2)) return false;
		if(!Read<_U8>(Value.wpt_type3)) return false;
		if(!Read<_U8>(Value.wpt_type4)) return false;
		if(!Read<_U8>(Value.wpt_type5)) return false;
		if(!Read<_U8>(Value.wpt_type6)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEVEL_INFO_CONFIG>(const SG_LEVEL_INFO_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.level_id)) return false;
		if(!Write<_U32>(Value.next_level)) return false;
		if(!WriteString<SG_DESCRIPTION_MAX>(Value.description)) return false;
		if(!Write<_U32>(Value.req_player_level)) return false;
		if(!Write<_U32>(Value.wake_pt)) return false;
		if(!WriteString<SG_SOLDIER_NAME_MAX>(Value.soldier_name1)) return false;
		if(!WriteString<SG_SOLDIER_NAME_MAX>(Value.soldier_name2)) return false;
		if(!WriteString<SG_SOLDIER_NAME_MAX>(Value.soldier_name3)) return false;
		if(!WriteString<SG_SOLDIER_NAME_MAX>(Value.soldier_name4)) return false;
		if(!WriteString<SG_SOLDIER_NAME_MAX>(Value.soldier_name5)) return false;
		if(!WriteString<SG_SOLDIER_NAME_MAX>(Value.soldier_name6)) return false;
		if(!Write<_U8>(Value.atk_type1)) return false;
		if(!Write<_U8>(Value.atk_type2)) return false;
		if(!Write<_U8>(Value.atk_type3)) return false;
		if(!Write<_U8>(Value.atk_type4)) return false;
		if(!Write<_U8>(Value.atk_type5)) return false;
		if(!Write<_U8>(Value.atk_type6)) return false;
		if(!Write<_U8>(Value.wpt_type1)) return false;
		if(!Write<_U8>(Value.wpt_type2)) return false;
		if(!Write<_U8>(Value.wpt_type3)) return false;
		if(!Write<_U8>(Value.wpt_type4)) return false;
		if(!Write<_U8>(Value.wpt_type5)) return false;
		if(!Write<_U8>(Value.wpt_type6)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEVEL_INFO_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEVEL_INFO_CONFIG>(*((SG_LEVEL_INFO_CONFIG*)data));
	}

	static bool _struct_SG_LEVEL_INFO_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEVEL_INFO_CONFIG>(*((const SG_LEVEL_INFO_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_LEVEL_INFO_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "level_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, level_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "next_level", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, next_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "description", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, description), NULL, (_U16)SG_DESCRIPTION_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_DESCRIPTION_MAX>), NULL},
		{TYPE_U32, "req_player_level", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, req_player_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "wake_pt", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, wake_pt), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "soldier_name1", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, soldier_name1), NULL, (_U16)SG_SOLDIER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_SOLDIER_NAME_MAX>), NULL},
		{TYPE_STRING, "soldier_name2", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, soldier_name2), NULL, (_U16)SG_SOLDIER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_SOLDIER_NAME_MAX>), NULL},
		{TYPE_STRING, "soldier_name3", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, soldier_name3), NULL, (_U16)SG_SOLDIER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_SOLDIER_NAME_MAX>), NULL},
		{TYPE_STRING, "soldier_name4", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, soldier_name4), NULL, (_U16)SG_SOLDIER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_SOLDIER_NAME_MAX>), NULL},
		{TYPE_STRING, "soldier_name5", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, soldier_name5), NULL, (_U16)SG_SOLDIER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_SOLDIER_NAME_MAX>), NULL},
		{TYPE_STRING, "soldier_name6", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, soldier_name6), NULL, (_U16)SG_SOLDIER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_SOLDIER_NAME_MAX>), NULL},
		{TYPE_U8, "atk_type1", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, atk_type1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "atk_type2", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, atk_type2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "atk_type3", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, atk_type3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "atk_type4", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, atk_type4), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "atk_type5", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, atk_type5), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "atk_type6", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, atk_type6), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "wpt_type1", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, wpt_type1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "wpt_type2", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, wpt_type2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "wpt_type3", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, wpt_type3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "wpt_type4", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, wpt_type4), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "wpt_type5", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, wpt_type5), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "wpt_type6", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_INFO_CONFIG, wpt_type6), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEVEL_INFO_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_LEVEL_INFO_CONFIG", sizeof(SG_LEVEL_INFO_CONFIG), 23, _struct_SG_LEVEL_INFO_CONFIG_fieldinfo, _struct_SG_LEVEL_INFO_CONFIG_readproc, _struct_SG_LEVEL_INFO_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEVEL_INFO_CONFIG>()
	{
		return &_rfl_struct_SG_LEVEL_INFO_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DIRTY_WORD_CONFIG>(SG_DIRTY_WORD_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.dirty_word)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_DIRTY_WORD_CONFIG>(const SG_DIRTY_WORD_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.dirty_word)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_DIRTY_WORD_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_DIRTY_WORD_CONFIG>(*((SG_DIRTY_WORD_CONFIG*)data));
	}

	static bool _struct_SG_DIRTY_WORD_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_DIRTY_WORD_CONFIG>(*((const SG_DIRTY_WORD_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_DIRTY_WORD_CONFIG_fieldinfo[] =
	{
		{TYPE_STRING, "dirty_word", 0, (_U16)ATLAS_OFFSETOF(SG_DIRTY_WORD_CONFIG, dirty_word), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_DIRTY_WORD_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_DIRTY_WORD_CONFIG", sizeof(SG_DIRTY_WORD_CONFIG), 1, _struct_SG_DIRTY_WORD_CONFIG_fieldinfo, _struct_SG_DIRTY_WORD_CONFIG_readproc, _struct_SG_DIRTY_WORD_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_DIRTY_WORD_CONFIG>()
	{
		return &_rfl_struct_SG_DIRTY_WORD_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PLAYER_RANDOM_NAME_CONFIG>(SG_PLAYER_RANDOM_NAME_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.family_name)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.male_name)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.female_name)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_PLAYER_RANDOM_NAME_CONFIG>(const SG_PLAYER_RANDOM_NAME_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.family_name)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.male_name)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.female_name)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_PLAYER_RANDOM_NAME_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_PLAYER_RANDOM_NAME_CONFIG>(*((SG_PLAYER_RANDOM_NAME_CONFIG*)data));
	}

	static bool _struct_SG_PLAYER_RANDOM_NAME_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_PLAYER_RANDOM_NAME_CONFIG>(*((const SG_PLAYER_RANDOM_NAME_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_PLAYER_RANDOM_NAME_CONFIG_fieldinfo[] =
	{
		{TYPE_STRING, "family_name", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_RANDOM_NAME_CONFIG, family_name), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_STRING, "male_name", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_RANDOM_NAME_CONFIG, male_name), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_STRING, "female_name", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_RANDOM_NAME_CONFIG, female_name), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_PLAYER_RANDOM_NAME_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_PLAYER_RANDOM_NAME_CONFIG", sizeof(SG_PLAYER_RANDOM_NAME_CONFIG), 3, _struct_SG_PLAYER_RANDOM_NAME_CONFIG_fieldinfo, _struct_SG_PLAYER_RANDOM_NAME_CONFIG_readproc, _struct_SG_PLAYER_RANDOM_NAME_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_PLAYER_RANDOM_NAME_CONFIG>()
	{
		return &_rfl_struct_SG_PLAYER_RANDOM_NAME_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEVEL_DROP_CONFIG>(SG_LEVEL_DROP_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!ReadString<100>(Value.level_name)) return false;
		if(!Read<_U32>(Value.exp)) return false;
		if(!Read<_U32>(Value.gold)) return false;
		if(!Read<_U32>(Value.reputation)) return false;
		if(!Read<_U32>(Value.level_id)) return false;
		if(!Read<_U32>(Value.next_level)) return false;
		if(!Read<_U32>(Value.group1_id)) return false;
		if(!Read<_F32>(Value.group1_rate)) return false;
		if(!Read<_U32>(Value.group2_id)) return false;
		if(!Read<_F32>(Value.group2_rate)) return false;
		if(!Read<_U32>(Value.group3_id)) return false;
		if(!Read<_F32>(Value.group3_rate)) return false;
		if(!Read<_U32>(Value.group4_id)) return false;
		if(!Read<_F32>(Value.group4_rate)) return false;
		if(!Read<_U32>(Value.wake_pt)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LEVEL_DROP_CONFIG>(const SG_LEVEL_DROP_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!WriteString<100>(Value.level_name)) return false;
		if(!Write<_U32>(Value.exp)) return false;
		if(!Write<_U32>(Value.gold)) return false;
		if(!Write<_U32>(Value.reputation)) return false;
		if(!Write<_U32>(Value.level_id)) return false;
		if(!Write<_U32>(Value.next_level)) return false;
		if(!Write<_U32>(Value.group1_id)) return false;
		if(!Write<_F32>(Value.group1_rate)) return false;
		if(!Write<_U32>(Value.group2_id)) return false;
		if(!Write<_F32>(Value.group2_rate)) return false;
		if(!Write<_U32>(Value.group3_id)) return false;
		if(!Write<_F32>(Value.group3_rate)) return false;
		if(!Write<_U32>(Value.group4_id)) return false;
		if(!Write<_F32>(Value.group4_rate)) return false;
		if(!Write<_U32>(Value.wake_pt)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LEVEL_DROP_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LEVEL_DROP_CONFIG>(*((SG_LEVEL_DROP_CONFIG*)data));
	}

	static bool _struct_SG_LEVEL_DROP_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LEVEL_DROP_CONFIG>(*((const SG_LEVEL_DROP_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_LEVEL_DROP_CONFIG_fieldinfo[] =
	{
		{TYPE_STRING, "level_name", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, level_name), NULL, (_U16)100, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<100>), NULL},
		{TYPE_U32, "exp", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, exp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "gold", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reputation", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, reputation), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "level_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, level_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "next_level", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, next_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "group1_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, group1_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "group1_rate", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, group1_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "group2_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, group2_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "group2_rate", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, group2_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "group3_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, group3_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "group3_rate", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, group3_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "group4_id", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, group4_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "group4_rate", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, group4_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "wake_pt", 0, (_U16)ATLAS_OFFSETOF(SG_LEVEL_DROP_CONFIG, wake_pt), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LEVEL_DROP_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_LEVEL_DROP_CONFIG", sizeof(SG_LEVEL_DROP_CONFIG), 15, _struct_SG_LEVEL_DROP_CONFIG_fieldinfo, _struct_SG_LEVEL_DROP_CONFIG_readproc, _struct_SG_LEVEL_DROP_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LEVEL_DROP_CONFIG>()
	{
		return &_rfl_struct_SG_LEVEL_DROP_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DROP_ITEM_BASE>(SG_DROP_ITEM_BASE& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.item_id)) return false;
		if(!Read<_U32>(Value.count)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_DROP_ITEM_BASE>(const SG_DROP_ITEM_BASE& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.item_id)) return false;
		if(!Write<_U32>(Value.count)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_DROP_ITEM_BASE_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_DROP_ITEM_BASE>(*((SG_DROP_ITEM_BASE*)data));
	}

	static bool _struct_SG_DROP_ITEM_BASE_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_DROP_ITEM_BASE>(*((const SG_DROP_ITEM_BASE*)data));
	}

	static FIELD_INFO _struct_SG_DROP_ITEM_BASE_fieldinfo[] =
	{
		{TYPE_U32, "item_id", 0, (_U16)ATLAS_OFFSETOF(SG_DROP_ITEM_BASE, item_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "count", 0, (_U16)ATLAS_OFFSETOF(SG_DROP_ITEM_BASE, count), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_DROP_ITEM_BASE_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_DROP_ITEM_BASE", sizeof(SG_DROP_ITEM_BASE), 2, _struct_SG_DROP_ITEM_BASE_fieldinfo, _struct_SG_DROP_ITEM_BASE_readproc, _struct_SG_DROP_ITEM_BASE_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_DROP_ITEM_BASE>()
	{
		return &_rfl_struct_SG_DROP_ITEM_BASE_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DROP_ITEM_CONFIG>(SG_DROP_ITEM_CONFIG& Value)
	{
		if(!BufferReader::Read<SG_DROP_ITEM_BASE>(Value)) return false;
		if(!Read<_U32>(Value.group_id)) return false;
		if(!Read<_F32>(Value.rate)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_DROP_ITEM_CONFIG>(const SG_DROP_ITEM_CONFIG& Value)
	{
		if(!BufferWriter::Write<SG_DROP_ITEM_BASE>(Value)) return false;
		if(!Write<_U32>(Value.group_id)) return false;
		if(!Write<_F32>(Value.rate)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_DROP_ITEM_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_DROP_ITEM_CONFIG>(*((SG_DROP_ITEM_CONFIG*)data));
	}

	static bool _struct_SG_DROP_ITEM_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_DROP_ITEM_CONFIG>(*((const SG_DROP_ITEM_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_DROP_ITEM_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "group_id", 0, (_U16)ATLAS_OFFSETOF(SG_DROP_ITEM_CONFIG, group_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "rate", 0, (_U16)ATLAS_OFFSETOF(SG_DROP_ITEM_CONFIG, rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_DROP_ITEM_CONFIG_info = { &_rfl_struct_SG_DROP_ITEM_BASE_info, "SG_DROP_ITEM_CONFIG", sizeof(SG_DROP_ITEM_CONFIG), 2, _struct_SG_DROP_ITEM_CONFIG_fieldinfo, _struct_SG_DROP_ITEM_CONFIG_readproc, _struct_SG_DROP_ITEM_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_DROP_ITEM_CONFIG>()
	{
		return &_rfl_struct_SG_DROP_ITEM_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LOOT_ITEM_CONFIG>(SG_LOOT_ITEM_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.loot_id)) return false;
		if(!Read<_U32>(Value.num)) return false;
		if(!Read<_U32>(Value.group_id1)) return false;
		if(!Read<_U8>(Value.group_rate1)) return false;
		if(!Read<_U32>(Value.group_id2)) return false;
		if(!Read<_U8>(Value.group_rate2)) return false;
		if(!Read<_U32>(Value.group_id3)) return false;
		if(!Read<_U8>(Value.group_rate3)) return false;
		if(!Read<_U32>(Value.group_id4)) return false;
		if(!Read<_U8>(Value.group_rate4)) return false;
		if(!Read<_U32>(Value.group_id5)) return false;
		if(!Read<_U8>(Value.group_rate5)) return false;
		if(!Read<_U32>(Value.group_id6)) return false;
		if(!Read<_U8>(Value.group_rate6)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_LOOT_ITEM_CONFIG>(const SG_LOOT_ITEM_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.loot_id)) return false;
		if(!Write<_U32>(Value.num)) return false;
		if(!Write<_U32>(Value.group_id1)) return false;
		if(!Write<_U8>(Value.group_rate1)) return false;
		if(!Write<_U32>(Value.group_id2)) return false;
		if(!Write<_U8>(Value.group_rate2)) return false;
		if(!Write<_U32>(Value.group_id3)) return false;
		if(!Write<_U8>(Value.group_rate3)) return false;
		if(!Write<_U32>(Value.group_id4)) return false;
		if(!Write<_U8>(Value.group_rate4)) return false;
		if(!Write<_U32>(Value.group_id5)) return false;
		if(!Write<_U8>(Value.group_rate5)) return false;
		if(!Write<_U32>(Value.group_id6)) return false;
		if(!Write<_U8>(Value.group_rate6)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_LOOT_ITEM_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_LOOT_ITEM_CONFIG>(*((SG_LOOT_ITEM_CONFIG*)data));
	}

	static bool _struct_SG_LOOT_ITEM_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_LOOT_ITEM_CONFIG>(*((const SG_LOOT_ITEM_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_LOOT_ITEM_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "loot_id", 0, (_U16)ATLAS_OFFSETOF(SG_LOOT_ITEM_CONFIG, loot_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "num", 0, (_U16)ATLAS_OFFSETOF(SG_LOOT_ITEM_CONFIG, num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "group_id1", 0, (_U16)ATLAS_OFFSETOF(SG_LOOT_ITEM_CONFIG, group_id1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "group_rate1", 0, (_U16)ATLAS_OFFSETOF(SG_LOOT_ITEM_CONFIG, group_rate1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "group_id2", 0, (_U16)ATLAS_OFFSETOF(SG_LOOT_ITEM_CONFIG, group_id2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "group_rate2", 0, (_U16)ATLAS_OFFSETOF(SG_LOOT_ITEM_CONFIG, group_rate2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "group_id3", 0, (_U16)ATLAS_OFFSETOF(SG_LOOT_ITEM_CONFIG, group_id3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "group_rate3", 0, (_U16)ATLAS_OFFSETOF(SG_LOOT_ITEM_CONFIG, group_rate3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "group_id4", 0, (_U16)ATLAS_OFFSETOF(SG_LOOT_ITEM_CONFIG, group_id4), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "group_rate4", 0, (_U16)ATLAS_OFFSETOF(SG_LOOT_ITEM_CONFIG, group_rate4), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "group_id5", 0, (_U16)ATLAS_OFFSETOF(SG_LOOT_ITEM_CONFIG, group_id5), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "group_rate5", 0, (_U16)ATLAS_OFFSETOF(SG_LOOT_ITEM_CONFIG, group_rate5), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "group_id6", 0, (_U16)ATLAS_OFFSETOF(SG_LOOT_ITEM_CONFIG, group_id6), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "group_rate6", 0, (_U16)ATLAS_OFFSETOF(SG_LOOT_ITEM_CONFIG, group_rate6), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_LOOT_ITEM_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_LOOT_ITEM_CONFIG", sizeof(SG_LOOT_ITEM_CONFIG), 14, _struct_SG_LOOT_ITEM_CONFIG_fieldinfo, _struct_SG_LOOT_ITEM_CONFIG_readproc, _struct_SG_LOOT_ITEM_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_LOOT_ITEM_CONFIG>()
	{
		return &_rfl_struct_SG_LOOT_ITEM_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ATTR_MOD_CONFIG>(SG_ATTR_MOD_CONFIG& Value)
	{
		if(!Read<_F32>(Value.MOD_HPAddition)) return false;
		if(!Read<_F32>(Value.MOD_HPPercent)) return false;
		if(!Read<_F32>(Value.MOD_ExtraHP)) return false;
		if(!Read<_F32>(Value.MOD_ATKAddition)) return false;
		if(!Read<_F32>(Value.MOD_ATKPercent)) return false;
		if(!Read<_F32>(Value.MOD_ExtraATK)) return false;
		if(!Read<_F32>(Value.MOD_DEFAddition)) return false;
		if(!Read<_F32>(Value.MOD_DEFPercent)) return false;
		if(!Read<_F32>(Value.MOD_ExtraDEF)) return false;
		if(!Read<_F32>(Value.MOD_HITAddition)) return false;
		if(!Read<_F32>(Value.MOD_EvasionAddition)) return false;
		if(!Read<_F32>(Value.MOD_CRITAddition)) return false;
		if(!Read<_F32>(Value.MOD_SPAddition)) return false;
		if(!Read<_F32>(Value.MOD_WSAddition)) return false;
		if(!Read<_F32>(Value.MOD_WSPercent)) return false;
		if(!Read<_F32>(Value.MOD_ExtraWS)) return false;
		if(!Read<_F32>(Value.MOD_STRAddition)) return false;
		if(!Read<_F32>(Value.MOD_STRPercent)) return false;
		if(!Read<_F32>(Value.MOD_ExtraSTR)) return false;
		if(!Read<_F32>(Value.MOD_INTAddition)) return false;
		if(!Read<_F32>(Value.MOD_INTPercent)) return false;
		if(!Read<_F32>(Value.MOD_ExtraINT)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_ATTR_MOD_CONFIG>(const SG_ATTR_MOD_CONFIG& Value)
	{
		if(!Write<_F32>(Value.MOD_HPAddition)) return false;
		if(!Write<_F32>(Value.MOD_HPPercent)) return false;
		if(!Write<_F32>(Value.MOD_ExtraHP)) return false;
		if(!Write<_F32>(Value.MOD_ATKAddition)) return false;
		if(!Write<_F32>(Value.MOD_ATKPercent)) return false;
		if(!Write<_F32>(Value.MOD_ExtraATK)) return false;
		if(!Write<_F32>(Value.MOD_DEFAddition)) return false;
		if(!Write<_F32>(Value.MOD_DEFPercent)) return false;
		if(!Write<_F32>(Value.MOD_ExtraDEF)) return false;
		if(!Write<_F32>(Value.MOD_HITAddition)) return false;
		if(!Write<_F32>(Value.MOD_EvasionAddition)) return false;
		if(!Write<_F32>(Value.MOD_CRITAddition)) return false;
		if(!Write<_F32>(Value.MOD_SPAddition)) return false;
		if(!Write<_F32>(Value.MOD_WSAddition)) return false;
		if(!Write<_F32>(Value.MOD_WSPercent)) return false;
		if(!Write<_F32>(Value.MOD_ExtraWS)) return false;
		if(!Write<_F32>(Value.MOD_STRAddition)) return false;
		if(!Write<_F32>(Value.MOD_STRPercent)) return false;
		if(!Write<_F32>(Value.MOD_ExtraSTR)) return false;
		if(!Write<_F32>(Value.MOD_INTAddition)) return false;
		if(!Write<_F32>(Value.MOD_INTPercent)) return false;
		if(!Write<_F32>(Value.MOD_ExtraINT)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_ATTR_MOD_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_ATTR_MOD_CONFIG>(*((SG_ATTR_MOD_CONFIG*)data));
	}

	static bool _struct_SG_ATTR_MOD_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_ATTR_MOD_CONFIG>(*((const SG_ATTR_MOD_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_ATTR_MOD_CONFIG_fieldinfo[] =
	{
		{TYPE_F32, "MOD_HPAddition", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_HPAddition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_HPPercent", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_HPPercent), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_ExtraHP", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_ExtraHP), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_ATKAddition", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_ATKAddition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_ATKPercent", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_ATKPercent), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_ExtraATK", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_ExtraATK), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_DEFAddition", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_DEFAddition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_DEFPercent", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_DEFPercent), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_ExtraDEF", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_ExtraDEF), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_HITAddition", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_HITAddition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_EvasionAddition", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_EvasionAddition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_CRITAddition", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_CRITAddition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_SPAddition", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_SPAddition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_WSAddition", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_WSAddition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_WSPercent", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_WSPercent), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_ExtraWS", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_ExtraWS), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_STRAddition", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_STRAddition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_STRPercent", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_STRPercent), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_ExtraSTR", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_ExtraSTR), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_INTAddition", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_INTAddition), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_INTPercent", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_INTPercent), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MOD_ExtraINT", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_MOD_CONFIG, MOD_ExtraINT), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_ATTR_MOD_CONFIG_info = { NULL, "SG_ATTR_MOD_CONFIG", sizeof(SG_ATTR_MOD_CONFIG), 22, _struct_SG_ATTR_MOD_CONFIG_fieldinfo, _struct_SG_ATTR_MOD_CONFIG_readproc, _struct_SG_ATTR_MOD_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_ATTR_MOD_CONFIG>()
	{
		return &_rfl_struct_SG_ATTR_MOD_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ATTR_BASE_CONFIG>(SG_ATTR_BASE_CONFIG& Value)
	{
		if(!Read<_F32>(Value.Base_HP)) return false;
		if(!Read<_F32>(Value.Base_ATK)) return false;
		if(!Read<_F32>(Value.Base_DEF)) return false;
		if(!Read<_F32>(Value.Base_HIT)) return false;
		if(!Read<_F32>(Value.Base_Evasion)) return false;
		if(!Read<_F32>(Value.Base_CRIT)) return false;
		if(!Read<_F32>(Value.Base_SP)) return false;
		if(!Read<_F32>(Value.Base_WS)) return false;
		if(!Read<_F32>(Value.Base_STR)) return false;
		if(!Read<_F32>(Value.Base_INT)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_ATTR_BASE_CONFIG>(const SG_ATTR_BASE_CONFIG& Value)
	{
		if(!Write<_F32>(Value.Base_HP)) return false;
		if(!Write<_F32>(Value.Base_ATK)) return false;
		if(!Write<_F32>(Value.Base_DEF)) return false;
		if(!Write<_F32>(Value.Base_HIT)) return false;
		if(!Write<_F32>(Value.Base_Evasion)) return false;
		if(!Write<_F32>(Value.Base_CRIT)) return false;
		if(!Write<_F32>(Value.Base_SP)) return false;
		if(!Write<_F32>(Value.Base_WS)) return false;
		if(!Write<_F32>(Value.Base_STR)) return false;
		if(!Write<_F32>(Value.Base_INT)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_ATTR_BASE_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_ATTR_BASE_CONFIG>(*((SG_ATTR_BASE_CONFIG*)data));
	}

	static bool _struct_SG_ATTR_BASE_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_ATTR_BASE_CONFIG>(*((const SG_ATTR_BASE_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_ATTR_BASE_CONFIG_fieldinfo[] =
	{
		{TYPE_F32, "Base_HP", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_BASE_CONFIG, Base_HP), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "Base_ATK", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_BASE_CONFIG, Base_ATK), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "Base_DEF", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_BASE_CONFIG, Base_DEF), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "Base_HIT", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_BASE_CONFIG, Base_HIT), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "Base_Evasion", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_BASE_CONFIG, Base_Evasion), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "Base_CRIT", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_BASE_CONFIG, Base_CRIT), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "Base_SP", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_BASE_CONFIG, Base_SP), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "Base_WS", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_BASE_CONFIG, Base_WS), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "Base_STR", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_BASE_CONFIG, Base_STR), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "Base_INT", 0, (_U16)ATLAS_OFFSETOF(SG_ATTR_BASE_CONFIG, Base_INT), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_ATTR_BASE_CONFIG_info = { NULL, "SG_ATTR_BASE_CONFIG", sizeof(SG_ATTR_BASE_CONFIG), 10, _struct_SG_ATTR_BASE_CONFIG_fieldinfo, _struct_SG_ATTR_BASE_CONFIG_readproc, _struct_SG_ATTR_BASE_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_ATTR_BASE_CONFIG>()
	{
		return &_rfl_struct_SG_ATTR_BASE_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PAWN_CONFIG>(SG_PAWN_CONFIG& Value)
	{
		if(!Read<SG_ATTR_BASE_CONFIG>(Value.BaseConfig)) return false;
		if(!Read<SG_ATTR_MOD_CONFIG>(Value.SigmaConfig)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_PAWN_CONFIG>(const SG_PAWN_CONFIG& Value)
	{
		if(!Write<SG_ATTR_BASE_CONFIG>(Value.BaseConfig)) return false;
		if(!Write<SG_ATTR_MOD_CONFIG>(Value.SigmaConfig)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_PAWN_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_PAWN_CONFIG>(*((SG_PAWN_CONFIG*)data));
	}

	static bool _struct_SG_PAWN_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_PAWN_CONFIG>(*((const SG_PAWN_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_PAWN_CONFIG_fieldinfo[] =
	{
		{TYPE_STRUCT, "BaseConfig", 0, (_U16)ATLAS_OFFSETOF(SG_PAWN_CONFIG, BaseConfig), &_rfl_struct_SG_ATTR_BASE_CONFIG_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_ATTR_BASE_CONFIG), NULL},
		{TYPE_STRUCT, "SigmaConfig", 0, (_U16)ATLAS_OFFSETOF(SG_PAWN_CONFIG, SigmaConfig), &_rfl_struct_SG_ATTR_MOD_CONFIG_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_ATTR_MOD_CONFIG), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_PAWN_CONFIG_info = { NULL, "SG_PAWN_CONFIG", sizeof(SG_PAWN_CONFIG), 2, _struct_SG_PAWN_CONFIG_fieldinfo, _struct_SG_PAWN_CONFIG_readproc, _struct_SG_PAWN_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_PAWN_CONFIG>()
	{
		return &_rfl_struct_SG_PAWN_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ITEM_CONFIG>(SG_ITEM_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.item_id)) return false;
		if(!Read<_U32>(Value.stack_max)) return false;
		if(!Read<_U32>(Value.price)) return false;
		if(!Read<_U32>(Value.U)) return false;
		if(!Read<_U32>(Value.V)) return false;
		if(!Read<_U32>(Value.UL)) return false;
		if(!Read<_U32>(Value.VL)) return false;
		if(!ReadString<SG_TEX_MAX>(Value.tex)) return false;
		if(!ReadString<SG_ITEM_NAME_MAX>(Value.item_name)) return false;
		if(!Read<_U8>(Value.quality)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_ITEM_CONFIG>(const SG_ITEM_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.item_id)) return false;
		if(!Write<_U32>(Value.stack_max)) return false;
		if(!Write<_U32>(Value.price)) return false;
		if(!Write<_U32>(Value.U)) return false;
		if(!Write<_U32>(Value.V)) return false;
		if(!Write<_U32>(Value.UL)) return false;
		if(!Write<_U32>(Value.VL)) return false;
		if(!WriteString<SG_TEX_MAX>(Value.tex)) return false;
		if(!WriteString<SG_ITEM_NAME_MAX>(Value.item_name)) return false;
		if(!Write<_U8>(Value.quality)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_ITEM_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_ITEM_CONFIG>(*((SG_ITEM_CONFIG*)data));
	}

	static bool _struct_SG_ITEM_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_ITEM_CONFIG>(*((const SG_ITEM_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_ITEM_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "item_id", 0, (_U16)ATLAS_OFFSETOF(SG_ITEM_CONFIG, item_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "stack_max", 0, (_U16)ATLAS_OFFSETOF(SG_ITEM_CONFIG, stack_max), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "price", 0, (_U16)ATLAS_OFFSETOF(SG_ITEM_CONFIG, price), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "U", 0, (_U16)ATLAS_OFFSETOF(SG_ITEM_CONFIG, U), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "V", 0, (_U16)ATLAS_OFFSETOF(SG_ITEM_CONFIG, V), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "UL", 0, (_U16)ATLAS_OFFSETOF(SG_ITEM_CONFIG, UL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "VL", 0, (_U16)ATLAS_OFFSETOF(SG_ITEM_CONFIG, VL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "tex", 0, (_U16)ATLAS_OFFSETOF(SG_ITEM_CONFIG, tex), NULL, (_U16)SG_TEX_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_TEX_MAX>), NULL},
		{TYPE_STRING, "item_name", 0, (_U16)ATLAS_OFFSETOF(SG_ITEM_CONFIG, item_name), NULL, (_U16)SG_ITEM_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_ITEM_NAME_MAX>), NULL},
		{TYPE_U8, "quality", 0, (_U16)ATLAS_OFFSETOF(SG_ITEM_CONFIG, quality), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_ITEM_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_ITEM_CONFIG", sizeof(SG_ITEM_CONFIG), 10, _struct_SG_ITEM_CONFIG_fieldinfo, _struct_SG_ITEM_CONFIG_readproc, _struct_SG_ITEM_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_ITEM_CONFIG>()
	{
		return &_rfl_struct_SG_ITEM_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_MATERIAL_CONFIG>(SG_MATERIAL_CONFIG& Value)
	{
		if(!BufferReader::Read<SG_ITEM_CONFIG>(Value)) return false;
		if(!ReadString<SG_MATERIAL_DESC_MAX>(Value.desc)) return false;
		if(!Read<_U32>(Value.req_level)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_MATERIAL_CONFIG>(const SG_MATERIAL_CONFIG& Value)
	{
		if(!BufferWriter::Write<SG_ITEM_CONFIG>(Value)) return false;
		if(!WriteString<SG_MATERIAL_DESC_MAX>(Value.desc)) return false;
		if(!Write<_U32>(Value.req_level)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_MATERIAL_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_MATERIAL_CONFIG>(*((SG_MATERIAL_CONFIG*)data));
	}

	static bool _struct_SG_MATERIAL_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_MATERIAL_CONFIG>(*((const SG_MATERIAL_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_MATERIAL_CONFIG_fieldinfo[] =
	{
		{TYPE_STRING, "desc", 0, (_U16)ATLAS_OFFSETOF(SG_MATERIAL_CONFIG, desc), NULL, (_U16)SG_MATERIAL_DESC_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_MATERIAL_DESC_MAX>), NULL},
		{TYPE_U32, "req_level", 0, (_U16)ATLAS_OFFSETOF(SG_MATERIAL_CONFIG, req_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_MATERIAL_CONFIG_info = { &_rfl_struct_SG_ITEM_CONFIG_info, "SG_MATERIAL_CONFIG", sizeof(SG_MATERIAL_CONFIG), 2, _struct_SG_MATERIAL_CONFIG_fieldinfo, _struct_SG_MATERIAL_CONFIG_readproc, _struct_SG_MATERIAL_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_MATERIAL_CONFIG>()
	{
		return &_rfl_struct_SG_MATERIAL_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_EQUIPT_ITEM_CONFIG>(SG_EQUIPT_ITEM_CONFIG& Value)
	{
		if(!BufferReader::Read<SG_ITEM_CONFIG>(Value)) return false;
		if(!Read<SG_ATTR_MOD_CONFIG>(Value.mod_config)) return false;
		if(!Read<_U8>(Value.item_type)) return false;
		if(!Read<_F32>(Value.quality_rate)) return false;
		if(!Read<_U32>(Value.req_level)) return false;
		if(!Read<_U8>(Value.major_attr)) return false;
		if(!Read<_U32>(Value.major_attr_num)) return false;
		if(!Read<_F32>(Value.turbo_rate)) return false;
		if(!Read<_U8>(Value.minor_attr_num)) return false;
		if(!Read<_U32>(Value.HP_MAX)) return false;
		if(!Read<_U32>(Value.POW_MAX)) return false;
		if(!Read<_U32>(Value.ITEM_INT_MAX)) return false;
		if(!Read<_F32>(Value.HIT_MAX)) return false;
		if(!Read<_F32>(Value.CRIT_MAX)) return false;
		if(!Read<_F32>(Value.MISS_MAX)) return false;
		if(!Read<_U32>(Value.SLOT_NUM)) return false;
		if(!Read<_U8>(Value.HAS_SKILL)) return false;
		if(!Read<_U32>(Value.COM_MATERIAL)) return false;
		if(!Read<_U32>(Value.COM_REQ_NUM)) return false;
		if(!Read<_U32>(Value.KEY_MATERIAL)) return false;
		if(!Read<_U32>(Value.KEY_REQ_NUM)) return false;
		if(!Read<_U32>(Value.COMBINE_COST)) return false;
		if(!Read<_U32>(Value.TURBO_BASE_COST)) return false;
		if(!Read<_U32>(Value.RESET_COST)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_EQUIPT_ITEM_CONFIG>(const SG_EQUIPT_ITEM_CONFIG& Value)
	{
		if(!BufferWriter::Write<SG_ITEM_CONFIG>(Value)) return false;
		if(!Write<SG_ATTR_MOD_CONFIG>(Value.mod_config)) return false;
		if(!Write<_U8>(Value.item_type)) return false;
		if(!Write<_F32>(Value.quality_rate)) return false;
		if(!Write<_U32>(Value.req_level)) return false;
		if(!Write<_U8>(Value.major_attr)) return false;
		if(!Write<_U32>(Value.major_attr_num)) return false;
		if(!Write<_F32>(Value.turbo_rate)) return false;
		if(!Write<_U8>(Value.minor_attr_num)) return false;
		if(!Write<_U32>(Value.HP_MAX)) return false;
		if(!Write<_U32>(Value.POW_MAX)) return false;
		if(!Write<_U32>(Value.ITEM_INT_MAX)) return false;
		if(!Write<_F32>(Value.HIT_MAX)) return false;
		if(!Write<_F32>(Value.CRIT_MAX)) return false;
		if(!Write<_F32>(Value.MISS_MAX)) return false;
		if(!Write<_U32>(Value.SLOT_NUM)) return false;
		if(!Write<_U8>(Value.HAS_SKILL)) return false;
		if(!Write<_U32>(Value.COM_MATERIAL)) return false;
		if(!Write<_U32>(Value.COM_REQ_NUM)) return false;
		if(!Write<_U32>(Value.KEY_MATERIAL)) return false;
		if(!Write<_U32>(Value.KEY_REQ_NUM)) return false;
		if(!Write<_U32>(Value.COMBINE_COST)) return false;
		if(!Write<_U32>(Value.TURBO_BASE_COST)) return false;
		if(!Write<_U32>(Value.RESET_COST)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_EQUIPT_ITEM_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_EQUIPT_ITEM_CONFIG>(*((SG_EQUIPT_ITEM_CONFIG*)data));
	}

	static bool _struct_SG_EQUIPT_ITEM_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_EQUIPT_ITEM_CONFIG>(*((const SG_EQUIPT_ITEM_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_EQUIPT_ITEM_CONFIG_fieldinfo[] =
	{
		{TYPE_STRUCT, "mod_config", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, mod_config), &_rfl_struct_SG_ATTR_MOD_CONFIG_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_ATTR_MOD_CONFIG), NULL},
		{TYPE_U8, "item_type", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, item_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_F32, "quality_rate", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, quality_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "req_level", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, req_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "major_attr", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, major_attr), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "major_attr_num", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, major_attr_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "turbo_rate", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, turbo_rate), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U8, "minor_attr_num", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, minor_attr_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "HP_MAX", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, HP_MAX), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "POW_MAX", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, POW_MAX), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "ITEM_INT_MAX", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, ITEM_INT_MAX), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_F32, "HIT_MAX", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, HIT_MAX), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "CRIT_MAX", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, CRIT_MAX), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "MISS_MAX", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, MISS_MAX), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "SLOT_NUM", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, SLOT_NUM), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "HAS_SKILL", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, HAS_SKILL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "COM_MATERIAL", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, COM_MATERIAL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "COM_REQ_NUM", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, COM_REQ_NUM), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "KEY_MATERIAL", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, KEY_MATERIAL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "KEY_REQ_NUM", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, KEY_REQ_NUM), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "COMBINE_COST", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, COMBINE_COST), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "TURBO_BASE_COST", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, TURBO_BASE_COST), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "RESET_COST", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM_CONFIG, RESET_COST), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_EQUIPT_ITEM_CONFIG_info = { &_rfl_struct_SG_ITEM_CONFIG_info, "SG_EQUIPT_ITEM_CONFIG", sizeof(SG_EQUIPT_ITEM_CONFIG), 23, _struct_SG_EQUIPT_ITEM_CONFIG_fieldinfo, _struct_SG_EQUIPT_ITEM_CONFIG_readproc, _struct_SG_EQUIPT_ITEM_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_EQUIPT_ITEM_CONFIG>()
	{
		return &_rfl_struct_SG_EQUIPT_ITEM_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_USABLE_ITEM_CONFIG>(SG_USABLE_ITEM_CONFIG& Value)
	{
		if(!BufferReader::Read<SG_ITEM_CONFIG>(Value)) return false;
		if(!ReadString<SG_USABLE_DESC_MAX>(Value.desc)) return false;
		if(!Read<_U8>(Value.salablity)) return false;
		if(!Read<_U32>(Value.req_level)) return false;
		if(!Read<_U8>(Value.usage_type)) return false;
		if(!Read<_F32>(Value.attri_value1)) return false;
		if(!Read<_F32>(Value.attri_value2)) return false;
		if(!Read<_F32>(Value.attri_value3)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_USABLE_ITEM_CONFIG>(const SG_USABLE_ITEM_CONFIG& Value)
	{
		if(!BufferWriter::Write<SG_ITEM_CONFIG>(Value)) return false;
		if(!WriteString<SG_USABLE_DESC_MAX>(Value.desc)) return false;
		if(!Write<_U8>(Value.salablity)) return false;
		if(!Write<_U32>(Value.req_level)) return false;
		if(!Write<_U8>(Value.usage_type)) return false;
		if(!Write<_F32>(Value.attri_value1)) return false;
		if(!Write<_F32>(Value.attri_value2)) return false;
		if(!Write<_F32>(Value.attri_value3)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_USABLE_ITEM_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_USABLE_ITEM_CONFIG>(*((SG_USABLE_ITEM_CONFIG*)data));
	}

	static bool _struct_SG_USABLE_ITEM_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_USABLE_ITEM_CONFIG>(*((const SG_USABLE_ITEM_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_USABLE_ITEM_CONFIG_fieldinfo[] =
	{
		{TYPE_STRING, "desc", 0, (_U16)ATLAS_OFFSETOF(SG_USABLE_ITEM_CONFIG, desc), NULL, (_U16)SG_USABLE_DESC_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_USABLE_DESC_MAX>), NULL},
		{TYPE_U8, "salablity", 0, (_U16)ATLAS_OFFSETOF(SG_USABLE_ITEM_CONFIG, salablity), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "req_level", 0, (_U16)ATLAS_OFFSETOF(SG_USABLE_ITEM_CONFIG, req_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "usage_type", 0, (_U16)ATLAS_OFFSETOF(SG_USABLE_ITEM_CONFIG, usage_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_F32, "attri_value1", 0, (_U16)ATLAS_OFFSETOF(SG_USABLE_ITEM_CONFIG, attri_value1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "attri_value2", 0, (_U16)ATLAS_OFFSETOF(SG_USABLE_ITEM_CONFIG, attri_value2), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_F32, "attri_value3", 0, (_U16)ATLAS_OFFSETOF(SG_USABLE_ITEM_CONFIG, attri_value3), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_USABLE_ITEM_CONFIG_info = { &_rfl_struct_SG_ITEM_CONFIG_info, "SG_USABLE_ITEM_CONFIG", sizeof(SG_USABLE_ITEM_CONFIG), 7, _struct_SG_USABLE_ITEM_CONFIG_fieldinfo, _struct_SG_USABLE_ITEM_CONFIG_readproc, _struct_SG_USABLE_ITEM_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_USABLE_ITEM_CONFIG>()
	{
		return &_rfl_struct_SG_USABLE_ITEM_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GEM_ITEM_CONFIG>(SG_GEM_ITEM_CONFIG& Value)
	{
		if(!BufferReader::Read<SG_ITEM_CONFIG>(Value)) return false;
		if(!ReadString<SG_GEM_DESC_MAX>(Value.desc)) return false;
		if(!Read<_U8>(Value.level)) return false;
		if(!Read<_U8>(Value.attri_type)) return false;
		if(!Read<_F32>(Value.attri)) return false;
		if(!Read<_U32>(Value.compose_next)) return false;
		if(!Read<_U32>(Value.compose_num)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_GEM_ITEM_CONFIG>(const SG_GEM_ITEM_CONFIG& Value)
	{
		if(!BufferWriter::Write<SG_ITEM_CONFIG>(Value)) return false;
		if(!WriteString<SG_GEM_DESC_MAX>(Value.desc)) return false;
		if(!Write<_U8>(Value.level)) return false;
		if(!Write<_U8>(Value.attri_type)) return false;
		if(!Write<_F32>(Value.attri)) return false;
		if(!Write<_U32>(Value.compose_next)) return false;
		if(!Write<_U32>(Value.compose_num)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_GEM_ITEM_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_GEM_ITEM_CONFIG>(*((SG_GEM_ITEM_CONFIG*)data));
	}

	static bool _struct_SG_GEM_ITEM_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_GEM_ITEM_CONFIG>(*((const SG_GEM_ITEM_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_GEM_ITEM_CONFIG_fieldinfo[] =
	{
		{TYPE_STRING, "desc", 0, (_U16)ATLAS_OFFSETOF(SG_GEM_ITEM_CONFIG, desc), NULL, (_U16)SG_GEM_DESC_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_GEM_DESC_MAX>), NULL},
		{TYPE_U8, "level", 0, (_U16)ATLAS_OFFSETOF(SG_GEM_ITEM_CONFIG, level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "attri_type", 0, (_U16)ATLAS_OFFSETOF(SG_GEM_ITEM_CONFIG, attri_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_F32, "attri", 0, (_U16)ATLAS_OFFSETOF(SG_GEM_ITEM_CONFIG, attri), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "compose_next", 0, (_U16)ATLAS_OFFSETOF(SG_GEM_ITEM_CONFIG, compose_next), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "compose_num", 0, (_U16)ATLAS_OFFSETOF(SG_GEM_ITEM_CONFIG, compose_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_GEM_ITEM_CONFIG_info = { &_rfl_struct_SG_ITEM_CONFIG_info, "SG_GEM_ITEM_CONFIG", sizeof(SG_GEM_ITEM_CONFIG), 6, _struct_SG_GEM_ITEM_CONFIG_fieldinfo, _struct_SG_GEM_ITEM_CONFIG_readproc, _struct_SG_GEM_ITEM_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_GEM_ITEM_CONFIG>()
	{
		return &_rfl_struct_SG_GEM_ITEM_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ASTROLOGY_BALL_CONFIG>(SG_ASTROLOGY_BALL_CONFIG& Value)
	{
		if(!BufferReader::Read<SG_ITEM_CONFIG>(Value)) return false;
		if(!Read<_U32>(Value.level)) return false;
		if(!ReadString<SG_ASTROLOGY_BALL_DESC_MAX>(Value.desc)) return false;
		if(!Read<_U8>(Value.attri_type)) return false;
		if(!Read<_F32>(Value.attri_num)) return false;
		if(!Read<_U32>(Value.levelup_ball)) return false;
		if(!Read<_U32>(Value.req_levelup)) return false;
		if(!Read<_U32>(Value.swllaow_obtain)) return false;
		if(!ReadString<ARCHETYPE_URL_LENGTH_MAX>(Value.archetype)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_ASTROLOGY_BALL_CONFIG>(const SG_ASTROLOGY_BALL_CONFIG& Value)
	{
		if(!BufferWriter::Write<SG_ITEM_CONFIG>(Value)) return false;
		if(!Write<_U32>(Value.level)) return false;
		if(!WriteString<SG_ASTROLOGY_BALL_DESC_MAX>(Value.desc)) return false;
		if(!Write<_U8>(Value.attri_type)) return false;
		if(!Write<_F32>(Value.attri_num)) return false;
		if(!Write<_U32>(Value.levelup_ball)) return false;
		if(!Write<_U32>(Value.req_levelup)) return false;
		if(!Write<_U32>(Value.swllaow_obtain)) return false;
		if(!WriteString<ARCHETYPE_URL_LENGTH_MAX>(Value.archetype)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_ASTROLOGY_BALL_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_ASTROLOGY_BALL_CONFIG>(*((SG_ASTROLOGY_BALL_CONFIG*)data));
	}

	static bool _struct_SG_ASTROLOGY_BALL_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_ASTROLOGY_BALL_CONFIG>(*((const SG_ASTROLOGY_BALL_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_ASTROLOGY_BALL_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "level", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGY_BALL_CONFIG, level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "desc", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGY_BALL_CONFIG, desc), NULL, (_U16)SG_ASTROLOGY_BALL_DESC_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_ASTROLOGY_BALL_DESC_MAX>), NULL},
		{TYPE_U8, "attri_type", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGY_BALL_CONFIG, attri_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_F32, "attri_num", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGY_BALL_CONFIG, attri_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_F32), NULL},
		{TYPE_U32, "levelup_ball", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGY_BALL_CONFIG, levelup_ball), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "req_levelup", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGY_BALL_CONFIG, req_levelup), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "swllaow_obtain", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGY_BALL_CONFIG, swllaow_obtain), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "archetype", 0, (_U16)ATLAS_OFFSETOF(SG_ASTROLOGY_BALL_CONFIG, archetype), NULL, (_U16)ARCHETYPE_URL_LENGTH_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<ARCHETYPE_URL_LENGTH_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_ASTROLOGY_BALL_CONFIG_info = { &_rfl_struct_SG_ITEM_CONFIG_info, "SG_ASTROLOGY_BALL_CONFIG", sizeof(SG_ASTROLOGY_BALL_CONFIG), 8, _struct_SG_ASTROLOGY_BALL_CONFIG_fieldinfo, _struct_SG_ASTROLOGY_BALL_CONFIG_readproc, _struct_SG_ASTROLOGY_BALL_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_ASTROLOGY_BALL_CONFIG>()
	{
		return &_rfl_struct_SG_ASTROLOGY_BALL_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ENEMY_CONFIG>(SG_ENEMY_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.enemy_id)) return false;
		if(!Read<SG_PAWN_CONFIG>(Value.PawnConfig)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_ENEMY_CONFIG>(const SG_ENEMY_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.enemy_id)) return false;
		if(!Write<SG_PAWN_CONFIG>(Value.PawnConfig)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_ENEMY_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_ENEMY_CONFIG>(*((SG_ENEMY_CONFIG*)data));
	}

	static bool _struct_SG_ENEMY_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_ENEMY_CONFIG>(*((const SG_ENEMY_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_ENEMY_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "enemy_id", 0, (_U16)ATLAS_OFFSETOF(SG_ENEMY_CONFIG, enemy_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRUCT, "PawnConfig", 0, (_U16)ATLAS_OFFSETOF(SG_ENEMY_CONFIG, PawnConfig), &_rfl_struct_SG_PAWN_CONFIG_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_PAWN_CONFIG), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_ENEMY_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_ENEMY_CONFIG", sizeof(SG_ENEMY_CONFIG), 2, _struct_SG_ENEMY_CONFIG_fieldinfo, _struct_SG_ENEMY_CONFIG_readproc, _struct_SG_ENEMY_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_ENEMY_CONFIG>()
	{
		return &_rfl_struct_SG_ENEMY_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SOLDIER_LEVEL_CONFIG>(SG_SOLDIER_LEVEL_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.attr_id)) return false;
		if(!Read<_U32>(Value.level)) return false;
		if(!Read<SG_PAWN_CONFIG>(Value.PawnConfig)) return false;
		if(!Read<_U32>(Value.exp)) return false;
		if(!Read<_S32>(Value.levelup_gold)) return false;
		if(!Read<_S32>(Value.levelup_rmb)) return false;
		if(!Read<_S32>(Value.levelup_XP)) return false;
		if(!Read<_U16>(Value.mod_scale)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_SOLDIER_LEVEL_CONFIG>(const SG_SOLDIER_LEVEL_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.attr_id)) return false;
		if(!Write<_U32>(Value.level)) return false;
		if(!Write<SG_PAWN_CONFIG>(Value.PawnConfig)) return false;
		if(!Write<_U32>(Value.exp)) return false;
		if(!Write<_S32>(Value.levelup_gold)) return false;
		if(!Write<_S32>(Value.levelup_rmb)) return false;
		if(!Write<_S32>(Value.levelup_XP)) return false;
		if(!Write<_U16>(Value.mod_scale)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_SOLDIER_LEVEL_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_SOLDIER_LEVEL_CONFIG>(*((SG_SOLDIER_LEVEL_CONFIG*)data));
	}

	static bool _struct_SG_SOLDIER_LEVEL_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_SOLDIER_LEVEL_CONFIG>(*((const SG_SOLDIER_LEVEL_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_SOLDIER_LEVEL_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "attr_id", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_LEVEL_CONFIG, attr_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "level", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_LEVEL_CONFIG, level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRUCT, "PawnConfig", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_LEVEL_CONFIG, PawnConfig), &_rfl_struct_SG_PAWN_CONFIG_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_PAWN_CONFIG), NULL},
		{TYPE_U32, "exp", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_LEVEL_CONFIG, exp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_S32, "levelup_gold", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_LEVEL_CONFIG, levelup_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "levelup_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_LEVEL_CONFIG, levelup_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "levelup_XP", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_LEVEL_CONFIG, levelup_XP), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_U16, "mod_scale", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_LEVEL_CONFIG, mod_scale), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U16), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_SOLDIER_LEVEL_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_SOLDIER_LEVEL_CONFIG", sizeof(SG_SOLDIER_LEVEL_CONFIG), 8, _struct_SG_SOLDIER_LEVEL_CONFIG_fieldinfo, _struct_SG_SOLDIER_LEVEL_CONFIG_readproc, _struct_SG_SOLDIER_LEVEL_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_SOLDIER_LEVEL_CONFIG>()
	{
		return &_rfl_struct_SG_SOLDIER_LEVEL_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GENERAL_LEVEL_CONFIG>(SG_GENERAL_LEVEL_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.attr_id)) return false;
		if(!Read<_U32>(Value.level)) return false;
		if(!Read<SG_PAWN_CONFIG>(Value.PawnConfig)) return false;
		if(!Read<_S32>(Value.levelup_gold)) return false;
		if(!Read<_S32>(Value.levelup_rmb)) return false;
		if(!Read<_S32>(Value.levelup_XP)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_GENERAL_LEVEL_CONFIG>(const SG_GENERAL_LEVEL_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.attr_id)) return false;
		if(!Write<_U32>(Value.level)) return false;
		if(!Write<SG_PAWN_CONFIG>(Value.PawnConfig)) return false;
		if(!Write<_S32>(Value.levelup_gold)) return false;
		if(!Write<_S32>(Value.levelup_rmb)) return false;
		if(!Write<_S32>(Value.levelup_XP)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_GENERAL_LEVEL_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_GENERAL_LEVEL_CONFIG>(*((SG_GENERAL_LEVEL_CONFIG*)data));
	}

	static bool _struct_SG_GENERAL_LEVEL_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_GENERAL_LEVEL_CONFIG>(*((const SG_GENERAL_LEVEL_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_GENERAL_LEVEL_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "attr_id", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_LEVEL_CONFIG, attr_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "level", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_LEVEL_CONFIG, level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRUCT, "PawnConfig", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_LEVEL_CONFIG, PawnConfig), &_rfl_struct_SG_PAWN_CONFIG_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_PAWN_CONFIG), NULL},
		{TYPE_S32, "levelup_gold", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_LEVEL_CONFIG, levelup_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "levelup_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_LEVEL_CONFIG, levelup_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "levelup_XP", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_LEVEL_CONFIG, levelup_XP), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_GENERAL_LEVEL_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_GENERAL_LEVEL_CONFIG", sizeof(SG_GENERAL_LEVEL_CONFIG), 6, _struct_SG_GENERAL_LEVEL_CONFIG_fieldinfo, _struct_SG_GENERAL_LEVEL_CONFIG_readproc, _struct_SG_GENERAL_LEVEL_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_GENERAL_LEVEL_CONFIG>()
	{
		return &_rfl_struct_SG_GENERAL_LEVEL_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SOLDIER_CONFIG>(SG_SOLDIER_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.soldier_id)) return false;
		if(!Read<_U32>(Value.attr_id)) return false;
		if(!Read<_U8>(Value.type)) return false;
		if(!Read<_U8>(Value.atk_type)) return false;
		if(!Read<_U8>(Value.def_type)) return false;
		if(!ReadString<SG_DESCRIPTION_MAX>(Value.description)) return false;
		if(!Read<_S32>(Value.req_gold)) return false;
		if(!Read<_S32>(Value.req_rmb)) return false;
		if(!Read<_S32>(Value.unlock_level)) return false;
		if(!Read<_S32>(Value.pre_general_id)) return false;
		if(!Read<_S32>(Value.pre_level)) return false;
		if(!ReadString<ARCHETYPE_URL_LENGTH_MAX>(Value.archetype)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_SOLDIER_CONFIG>(const SG_SOLDIER_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.soldier_id)) return false;
		if(!Write<_U32>(Value.attr_id)) return false;
		if(!Write<_U8>(Value.type)) return false;
		if(!Write<_U8>(Value.atk_type)) return false;
		if(!Write<_U8>(Value.def_type)) return false;
		if(!WriteString<SG_DESCRIPTION_MAX>(Value.description)) return false;
		if(!Write<_S32>(Value.req_gold)) return false;
		if(!Write<_S32>(Value.req_rmb)) return false;
		if(!Write<_S32>(Value.unlock_level)) return false;
		if(!Write<_S32>(Value.pre_general_id)) return false;
		if(!Write<_S32>(Value.pre_level)) return false;
		if(!WriteString<ARCHETYPE_URL_LENGTH_MAX>(Value.archetype)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_SOLDIER_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_SOLDIER_CONFIG>(*((SG_SOLDIER_CONFIG*)data));
	}

	static bool _struct_SG_SOLDIER_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_SOLDIER_CONFIG>(*((const SG_SOLDIER_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_SOLDIER_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "soldier_id", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_CONFIG, soldier_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "attr_id", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_CONFIG, attr_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "type", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_CONFIG, type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "atk_type", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_CONFIG, atk_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "def_type", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_CONFIG, def_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "description", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_CONFIG, description), NULL, (_U16)SG_DESCRIPTION_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_DESCRIPTION_MAX>), NULL},
		{TYPE_S32, "req_gold", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_CONFIG, req_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "req_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_CONFIG, req_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "unlock_level", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_CONFIG, unlock_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "pre_general_id", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_CONFIG, pre_general_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "pre_level", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_CONFIG, pre_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_STRING, "archetype", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER_CONFIG, archetype), NULL, (_U16)ARCHETYPE_URL_LENGTH_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<ARCHETYPE_URL_LENGTH_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_SOLDIER_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_SOLDIER_CONFIG", sizeof(SG_SOLDIER_CONFIG), 12, _struct_SG_SOLDIER_CONFIG_fieldinfo, _struct_SG_SOLDIER_CONFIG_readproc, _struct_SG_SOLDIER_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_SOLDIER_CONFIG>()
	{
		return &_rfl_struct_SG_SOLDIER_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GENERAL_CONFIG>(SG_GENERAL_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.general_id)) return false;
		if(!Read<_U32>(Value.attr_id)) return false;
		if(!Read<_U8>(Value.type)) return false;
		if(!ReadString<SG_DESCRIPTION_MAX>(Value.description)) return false;
		if(!Read<_S32>(Value.req_title)) return false;
		if(!Read<_S32>(Value.req_gold)) return false;
		if(!Read<_S32>(Value.req_rmb)) return false;
		if(!Read<_S32>(Value.unlock_level)) return false;
		if(!Read<_S32>(Value.pre_general_id)) return false;
		if(!Read<_S32>(Value.pre_level)) return false;
		if(!ReadString<ARCHETYPE_URL_LENGTH_MAX>(Value.archetype)) return false;
		if(!Read<_U32>(Value.gift_id)) return false;
		if(!ReadString<SG_SKILL_DESC_MAX>(Value.skill_name)) return false;
		if(!ReadString<SG_DESCRIPTION_MAX>(Value.skill_desc)) return false;
		if(!Read<_S32>(Value.rank)) return false;
		if(!Read<_U8>(Value.atk_type)) return false;
		if(!Read<_U8>(Value.def_type)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_GENERAL_CONFIG>(const SG_GENERAL_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.general_id)) return false;
		if(!Write<_U32>(Value.attr_id)) return false;
		if(!Write<_U8>(Value.type)) return false;
		if(!WriteString<SG_DESCRIPTION_MAX>(Value.description)) return false;
		if(!Write<_S32>(Value.req_title)) return false;
		if(!Write<_S32>(Value.req_gold)) return false;
		if(!Write<_S32>(Value.req_rmb)) return false;
		if(!Write<_S32>(Value.unlock_level)) return false;
		if(!Write<_S32>(Value.pre_general_id)) return false;
		if(!Write<_S32>(Value.pre_level)) return false;
		if(!WriteString<ARCHETYPE_URL_LENGTH_MAX>(Value.archetype)) return false;
		if(!Write<_U32>(Value.gift_id)) return false;
		if(!WriteString<SG_SKILL_DESC_MAX>(Value.skill_name)) return false;
		if(!WriteString<SG_DESCRIPTION_MAX>(Value.skill_desc)) return false;
		if(!Write<_S32>(Value.rank)) return false;
		if(!Write<_U8>(Value.atk_type)) return false;
		if(!Write<_U8>(Value.def_type)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_GENERAL_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_GENERAL_CONFIG>(*((SG_GENERAL_CONFIG*)data));
	}

	static bool _struct_SG_GENERAL_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_GENERAL_CONFIG>(*((const SG_GENERAL_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_GENERAL_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "general_id", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, general_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "attr_id", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, attr_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "type", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRING, "description", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, description), NULL, (_U16)SG_DESCRIPTION_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_DESCRIPTION_MAX>), NULL},
		{TYPE_S32, "req_title", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, req_title), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "req_gold", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, req_gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "req_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, req_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "unlock_level", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, unlock_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "pre_general_id", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, pre_general_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_S32, "pre_level", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, pre_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_STRING, "archetype", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, archetype), NULL, (_U16)ARCHETYPE_URL_LENGTH_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<ARCHETYPE_URL_LENGTH_MAX>), NULL},
		{TYPE_U32, "gift_id", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, gift_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "skill_name", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, skill_name), NULL, (_U16)SG_SKILL_DESC_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_SKILL_DESC_MAX>), NULL},
		{TYPE_STRING, "skill_desc", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, skill_desc), NULL, (_U16)SG_DESCRIPTION_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_DESCRIPTION_MAX>), NULL},
		{TYPE_S32, "rank", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, rank), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_U8, "atk_type", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, atk_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "def_type", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_CONFIG, def_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_GENERAL_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_GENERAL_CONFIG", sizeof(SG_GENERAL_CONFIG), 17, _struct_SG_GENERAL_CONFIG_fieldinfo, _struct_SG_GENERAL_CONFIG_readproc, _struct_SG_GENERAL_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_GENERAL_CONFIG>()
	{
		return &_rfl_struct_SG_GENERAL_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_EQUIPPED_UNIT_PVE>(SG_EQUIPPED_UNIT_PVE& Value)
	{
		if(!ReadString<ARCHETYPE_URL_LENGTH_MAX>(Value.ArchetypeURL)) return false;
		if(!Read<SG_PAWN_CONFIG>(Value.PawnConfig)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_EQUIPPED_UNIT_PVE>(const SG_EQUIPPED_UNIT_PVE& Value)
	{
		if(!WriteString<ARCHETYPE_URL_LENGTH_MAX>(Value.ArchetypeURL)) return false;
		if(!Write<SG_PAWN_CONFIG>(Value.PawnConfig)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_EQUIPPED_UNIT_PVE_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_EQUIPPED_UNIT_PVE>(*((SG_EQUIPPED_UNIT_PVE*)data));
	}

	static bool _struct_SG_EQUIPPED_UNIT_PVE_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_EQUIPPED_UNIT_PVE>(*((const SG_EQUIPPED_UNIT_PVE*)data));
	}

	static FIELD_INFO _struct_SG_EQUIPPED_UNIT_PVE_fieldinfo[] =
	{
		{TYPE_STRING, "ArchetypeURL", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPPED_UNIT_PVE, ArchetypeURL), NULL, (_U16)ARCHETYPE_URL_LENGTH_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<ARCHETYPE_URL_LENGTH_MAX>), NULL},
		{TYPE_STRUCT, "PawnConfig", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPPED_UNIT_PVE, PawnConfig), &_rfl_struct_SG_PAWN_CONFIG_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_PAWN_CONFIG), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_EQUIPPED_UNIT_PVE_info = { NULL, "SG_EQUIPPED_UNIT_PVE", sizeof(SG_EQUIPPED_UNIT_PVE), 2, _struct_SG_EQUIPPED_UNIT_PVE_fieldinfo, _struct_SG_EQUIPPED_UNIT_PVE_readproc, _struct_SG_EQUIPPED_UNIT_PVE_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_EQUIPPED_UNIT_PVE>()
	{
		return &_rfl_struct_SG_EQUIPPED_UNIT_PVE_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PLAYER_PVE>(SG_PLAYER_PVE& Value)
	{
		if(!ReadString<ARCHETYPE_URL_LENGTH_MAX>(Value.ArchetypeURL)) return false;
		if(!Read<SG_PAWN_CONFIG>(Value.PawnConfig)) return false;
		if(!ReadArray<SG_EQUIPPED_UNIT_PVE, 2>(Value.EquippedGenerals)) return false;
		if(!ReadArray<SG_EQUIPPED_UNIT_PVE, 3>(Value.EquippedSoldiers)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.Nick)) return false;
		if(!Read<_U32>(Value.Avatar_ID)) return false;
		if(!Read<_U32>(Value.horse_level)) return false;
		if(!Read<_U32>(Value.halo_level)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_PLAYER_PVE>(const SG_PLAYER_PVE& Value)
	{
		if(!WriteString<ARCHETYPE_URL_LENGTH_MAX>(Value.ArchetypeURL)) return false;
		if(!Write<SG_PAWN_CONFIG>(Value.PawnConfig)) return false;
		if(!WriteArray<SG_EQUIPPED_UNIT_PVE, 2>(Value.EquippedGenerals)) return false;
		if(!WriteArray<SG_EQUIPPED_UNIT_PVE, 3>(Value.EquippedSoldiers)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.Nick)) return false;
		if(!Write<_U32>(Value.Avatar_ID)) return false;
		if(!Write<_U32>(Value.horse_level)) return false;
		if(!Write<_U32>(Value.halo_level)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_PLAYER_PVE_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_PLAYER_PVE>(*((SG_PLAYER_PVE*)data));
	}

	static bool _struct_SG_PLAYER_PVE_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_PLAYER_PVE>(*((const SG_PLAYER_PVE*)data));
	}

	static FIELD_INFO _struct_SG_PLAYER_PVE_fieldinfo[] =
	{
		{TYPE_STRING, "ArchetypeURL", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_PVE, ArchetypeURL), NULL, (_U16)ARCHETYPE_URL_LENGTH_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<ARCHETYPE_URL_LENGTH_MAX>), NULL},
		{TYPE_STRUCT, "PawnConfig", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_PVE, PawnConfig), &_rfl_struct_SG_PAWN_CONFIG_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_PAWN_CONFIG), NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "EquippedGenerals", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_PVE, EquippedGenerals), &_rfl_struct_SG_EQUIPPED_UNIT_PVE_info, (_U16)-1, (_U16)2, (_U16)((size_t)(&((DDL::Array<SG_EQUIPPED_UNIT_PVE, 2>*)NULL)->_Array)), (_U16)sizeof(SG_EQUIPPED_UNIT_PVE), NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "EquippedSoldiers", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_PVE, EquippedSoldiers), &_rfl_struct_SG_EQUIPPED_UNIT_PVE_info, (_U16)-1, (_U16)3, (_U16)((size_t)(&((DDL::Array<SG_EQUIPPED_UNIT_PVE, 3>*)NULL)->_Array)), (_U16)sizeof(SG_EQUIPPED_UNIT_PVE), NULL},
		{TYPE_STRING, "Nick", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_PVE, Nick), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_U32, "Avatar_ID", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_PVE, Avatar_ID), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "horse_level", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_PVE, horse_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "halo_level", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_PVE, halo_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_PLAYER_PVE_info = { NULL, "SG_PLAYER_PVE", sizeof(SG_PLAYER_PVE), 8, _struct_SG_PLAYER_PVE_fieldinfo, _struct_SG_PLAYER_PVE_readproc, _struct_SG_PLAYER_PVE_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_PLAYER_PVE>()
	{
		return &_rfl_struct_SG_PLAYER_PVE_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_EQUIP_SLOTS>(SG_EQUIP_SLOTS& Value)
	{
		if(!Read<A_UUID>(Value.head)) return false;
		if(!Read<A_UUID>(Value.weapon)) return false;
		if(!Read<A_UUID>(Value.shoulder)) return false;
		if(!Read<A_UUID>(Value.chest)) return false;
		if(!Read<A_UUID>(Value.leg)) return false;
		if(!Read<A_UUID>(Value.decoration)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_EQUIP_SLOTS>(const SG_EQUIP_SLOTS& Value)
	{
		if(!Write<A_UUID>(Value.head)) return false;
		if(!Write<A_UUID>(Value.weapon)) return false;
		if(!Write<A_UUID>(Value.shoulder)) return false;
		if(!Write<A_UUID>(Value.chest)) return false;
		if(!Write<A_UUID>(Value.leg)) return false;
		if(!Write<A_UUID>(Value.decoration)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_EQUIP_SLOTS_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_EQUIP_SLOTS>(*((SG_EQUIP_SLOTS*)data));
	}

	static bool _struct_SG_EQUIP_SLOTS_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_EQUIP_SLOTS>(*((const SG_EQUIP_SLOTS*)data));
	}

	static FIELD_INFO _struct_SG_EQUIP_SLOTS_fieldinfo[] =
	{
		{TYPE_UUID, "head", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIP_SLOTS, head), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(A_UUID), NULL},
		{TYPE_UUID, "weapon", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIP_SLOTS, weapon), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(A_UUID), NULL},
		{TYPE_UUID, "shoulder", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIP_SLOTS, shoulder), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(A_UUID), NULL},
		{TYPE_UUID, "chest", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIP_SLOTS, chest), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(A_UUID), NULL},
		{TYPE_UUID, "leg", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIP_SLOTS, leg), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(A_UUID), NULL},
		{TYPE_UUID, "decoration", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIP_SLOTS, decoration), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(A_UUID), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_EQUIP_SLOTS_info = { NULL, "SG_EQUIP_SLOTS", sizeof(SG_EQUIP_SLOTS), 6, _struct_SG_EQUIP_SLOTS_fieldinfo, _struct_SG_EQUIP_SLOTS_readproc, _struct_SG_EQUIP_SLOTS_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_EQUIP_SLOTS>()
	{
		return &_rfl_struct_SG_EQUIP_SLOTS_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GENERAL>(SG_GENERAL& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.general_id)) return false;
		if(!Read<_U16>(Value.level)) return false;
		if(!Read<_U32>(Value.exp)) return false;
		if(!Read<_U8>(Value.status)) return false;
		if(!Read<SG_EQUIP_SLOTS>(Value.equip_slots)) return false;
		if(!ReadArray<_U32, 6>(Value.minghun_slots)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_GENERAL>(const SG_GENERAL& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.general_id)) return false;
		if(!Write<_U16>(Value.level)) return false;
		if(!Write<_U32>(Value.exp)) return false;
		if(!Write<_U8>(Value.status)) return false;
		if(!Write<SG_EQUIP_SLOTS>(Value.equip_slots)) return false;
		if(!WriteArray<_U32, 6>(Value.minghun_slots)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_GENERAL_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_GENERAL>(*((SG_GENERAL*)data));
	}

	static bool _struct_SG_GENERAL_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_GENERAL>(*((const SG_GENERAL*)data));
	}

	static FIELD_INFO _struct_SG_GENERAL_fieldinfo[] =
	{
		{TYPE_U32, "general_id", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL, general_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U16, "level", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL, level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U16), NULL},
		{TYPE_U32, "exp", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL, exp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "status", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL, status), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_STRUCT, "equip_slots", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL, equip_slots), &_rfl_struct_SG_EQUIP_SLOTS_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_EQUIP_SLOTS), NULL},
		{TYPE_U32|TYPE_ARRAY, "minghun_slots", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL, minghun_slots), NULL, (_U16)-1, (_U16)6, (_U16)((size_t)(&((DDL::Array<_U32, 6>*)NULL)->_Array)), (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_GENERAL_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_GENERAL", sizeof(SG_GENERAL), 6, _struct_SG_GENERAL_fieldinfo, _struct_SG_GENERAL_readproc, _struct_SG_GENERAL_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_GENERAL>()
	{
		return &_rfl_struct_SG_GENERAL_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SOLDIER>(SG_SOLDIER& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.soldier_id)) return false;
		if(!Read<_U16>(Value.level)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_SOLDIER>(const SG_SOLDIER& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.soldier_id)) return false;
		if(!Write<_U16>(Value.level)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_SOLDIER_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_SOLDIER>(*((SG_SOLDIER*)data));
	}

	static bool _struct_SG_SOLDIER_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_SOLDIER>(*((const SG_SOLDIER*)data));
	}

	static FIELD_INFO _struct_SG_SOLDIER_fieldinfo[] =
	{
		{TYPE_U32, "soldier_id", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER, soldier_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U16, "level", 0, (_U16)ATLAS_OFFSETOF(SG_SOLDIER, level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U16), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_SOLDIER_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_SOLDIER", sizeof(SG_SOLDIER), 2, _struct_SG_SOLDIER_fieldinfo, _struct_SG_SOLDIER_readproc, _struct_SG_SOLDIER_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_SOLDIER>()
	{
		return &_rfl_struct_SG_SOLDIER_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DAILY_ACTION_CONFIG>(SG_DAILY_ACTION_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.action_id)) return false;
		if(!ReadString<SG_DAILY_ACTION_NAME_MAX>(Value.action_name)) return false;
		if(!Read<_U8>(Value.display_position)) return false;
		if(!Read<_U8>(Value.type)) return false;
		if(!Read<_U32>(Value.req_league_level)) return false;
		if(!Read<_U32>(Value.req_level)) return false;
		if(!Read<_U8>(Value.condition1_type)) return false;
		if(!Read<_U32>(Value.condition1_param1)) return false;
		if(!Read<_U8>(Value.condition2_type)) return false;
		if(!Read<_U32>(Value.condition2_param1)) return false;
		if(!Read<_U32>(Value.hour)) return false;
		if(!Read<_U32>(Value.min)) return false;
		if(!Read<_U32>(Value.end_hour)) return false;
		if(!Read<_U32>(Value.end_min)) return false;
		if(!Read<_U32>(Value.times)) return false;
		if(!Read<_U32>(Value.prepare_min)) return false;
		if(!Read<_U32>(Value.reset_hour)) return false;
		if(!Read<_U32>(Value.reset_min)) return false;
		if(!ReadString<SG_ICON_MAX>(Value.icon)) return false;
		if(!Read<_U32>(Value.U)) return false;
		if(!Read<_U32>(Value.V)) return false;
		if(!Read<_U32>(Value.UL)) return false;
		if(!Read<_U32>(Value.VL)) return false;
		if(!Read<_U32>(Value.sort_seq)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_DAILY_ACTION_CONFIG>(const SG_DAILY_ACTION_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.action_id)) return false;
		if(!WriteString<SG_DAILY_ACTION_NAME_MAX>(Value.action_name)) return false;
		if(!Write<_U8>(Value.display_position)) return false;
		if(!Write<_U8>(Value.type)) return false;
		if(!Write<_U32>(Value.req_league_level)) return false;
		if(!Write<_U32>(Value.req_level)) return false;
		if(!Write<_U8>(Value.condition1_type)) return false;
		if(!Write<_U32>(Value.condition1_param1)) return false;
		if(!Write<_U8>(Value.condition2_type)) return false;
		if(!Write<_U32>(Value.condition2_param1)) return false;
		if(!Write<_U32>(Value.hour)) return false;
		if(!Write<_U32>(Value.min)) return false;
		if(!Write<_U32>(Value.end_hour)) return false;
		if(!Write<_U32>(Value.end_min)) return false;
		if(!Write<_U32>(Value.times)) return false;
		if(!Write<_U32>(Value.prepare_min)) return false;
		if(!Write<_U32>(Value.reset_hour)) return false;
		if(!Write<_U32>(Value.reset_min)) return false;
		if(!WriteString<SG_ICON_MAX>(Value.icon)) return false;
		if(!Write<_U32>(Value.U)) return false;
		if(!Write<_U32>(Value.V)) return false;
		if(!Write<_U32>(Value.UL)) return false;
		if(!Write<_U32>(Value.VL)) return false;
		if(!Write<_U32>(Value.sort_seq)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_DAILY_ACTION_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_DAILY_ACTION_CONFIG>(*((SG_DAILY_ACTION_CONFIG*)data));
	}

	static bool _struct_SG_DAILY_ACTION_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_DAILY_ACTION_CONFIG>(*((const SG_DAILY_ACTION_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_DAILY_ACTION_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "action_id", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, action_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "action_name", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, action_name), NULL, (_U16)SG_DAILY_ACTION_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_DAILY_ACTION_NAME_MAX>), NULL},
		{TYPE_U8, "display_position", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, display_position), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "type", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "req_league_level", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, req_league_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "req_level", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, req_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "condition1_type", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, condition1_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "condition1_param1", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, condition1_param1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "condition2_type", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, condition2_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "condition2_param1", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, condition2_param1), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "hour", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, hour), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "min", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, min), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "end_hour", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, end_hour), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "end_min", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, end_min), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "times", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, times), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "prepare_min", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, prepare_min), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reset_hour", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, reset_hour), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reset_min", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, reset_min), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "icon", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, icon), NULL, (_U16)SG_ICON_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_ICON_MAX>), NULL},
		{TYPE_U32, "U", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, U), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "V", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, V), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "UL", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, UL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "VL", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, VL), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "sort_seq", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_CONFIG, sort_seq), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_DAILY_ACTION_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_DAILY_ACTION_CONFIG", sizeof(SG_DAILY_ACTION_CONFIG), 24, _struct_SG_DAILY_ACTION_CONFIG_fieldinfo, _struct_SG_DAILY_ACTION_CONFIG_readproc, _struct_SG_DAILY_ACTION_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_DAILY_ACTION_CONFIG>()
	{
		return &_rfl_struct_SG_DAILY_ACTION_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DAILY_ACTION_DESC_CONFIG>(SG_DAILY_ACTION_DESC_CONFIG& Value)
	{
		if(!BufferReader::Read<A_CONTENT_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.action_id)) return false;
		if(!ReadString<SG_DAILY_ACTION_NAME_MAX>(Value.action_name)) return false;
		if(!ReadString<SG_DAILY_ACTION_DESC>(Value.desc)) return false;
		if(!Read<_U8>(Value.display_type)) return false;
		if(!Read<_U32>(Value.sort_seq)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_DAILY_ACTION_DESC_CONFIG>(const SG_DAILY_ACTION_DESC_CONFIG& Value)
	{
		if(!BufferWriter::Write<A_CONTENT_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.action_id)) return false;
		if(!WriteString<SG_DAILY_ACTION_NAME_MAX>(Value.action_name)) return false;
		if(!WriteString<SG_DAILY_ACTION_DESC>(Value.desc)) return false;
		if(!Write<_U8>(Value.display_type)) return false;
		if(!Write<_U32>(Value.sort_seq)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_DAILY_ACTION_DESC_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_DAILY_ACTION_DESC_CONFIG>(*((SG_DAILY_ACTION_DESC_CONFIG*)data));
	}

	static bool _struct_SG_DAILY_ACTION_DESC_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_DAILY_ACTION_DESC_CONFIG>(*((const SG_DAILY_ACTION_DESC_CONFIG*)data));
	}

	static FIELD_INFO _struct_SG_DAILY_ACTION_DESC_CONFIG_fieldinfo[] =
	{
		{TYPE_U32, "action_id", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_DESC_CONFIG, action_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "action_name", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_DESC_CONFIG, action_name), NULL, (_U16)SG_DAILY_ACTION_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_DAILY_ACTION_NAME_MAX>), NULL},
		{TYPE_STRING, "desc", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_DESC_CONFIG, desc), NULL, (_U16)SG_DAILY_ACTION_DESC, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_DAILY_ACTION_DESC>), NULL},
		{TYPE_U8, "display_type", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_DESC_CONFIG, display_type), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "sort_seq", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_DESC_CONFIG, sort_seq), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_DAILY_ACTION_DESC_CONFIG_info = { &_rfl_struct_A_CONTENT_OBJECT_info, "SG_DAILY_ACTION_DESC_CONFIG", sizeof(SG_DAILY_ACTION_DESC_CONFIG), 5, _struct_SG_DAILY_ACTION_DESC_CONFIG_fieldinfo, _struct_SG_DAILY_ACTION_DESC_CONFIG_readproc, _struct_SG_DAILY_ACTION_DESC_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_DAILY_ACTION_DESC_CONFIG>()
	{
		return &_rfl_struct_SG_DAILY_ACTION_DESC_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DAILY_ACTION_INFO>(SG_DAILY_ACTION_INFO& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.action_id)) return false;
		if(!Read<_U32>(Value.times)) return false;
		if(!Read<_U32>(Value.reset_time)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_DAILY_ACTION_INFO>(const SG_DAILY_ACTION_INFO& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.action_id)) return false;
		if(!Write<_U32>(Value.times)) return false;
		if(!Write<_U32>(Value.reset_time)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_DAILY_ACTION_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_DAILY_ACTION_INFO>(*((SG_DAILY_ACTION_INFO*)data));
	}

	static bool _struct_SG_DAILY_ACTION_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_DAILY_ACTION_INFO>(*((const SG_DAILY_ACTION_INFO*)data));
	}

	static FIELD_INFO _struct_SG_DAILY_ACTION_INFO_fieldinfo[] =
	{
		{TYPE_U32, "action_id", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_INFO, action_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "times", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_INFO, times), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "reset_time", 0, (_U16)ATLAS_OFFSETOF(SG_DAILY_ACTION_INFO, reset_time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_DAILY_ACTION_INFO_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_DAILY_ACTION_INFO", sizeof(SG_DAILY_ACTION_INFO), 3, _struct_SG_DAILY_ACTION_INFO_fieldinfo, _struct_SG_DAILY_ACTION_INFO_readproc, _struct_SG_DAILY_ACTION_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_DAILY_ACTION_INFO>()
	{
		return &_rfl_struct_SG_DAILY_ACTION_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PLAYER>(SG_PLAYER& Value)
	{
		if(!BufferReader::Read<SG_GENERAL>(Value)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.nick)) return false;
		if(!Read<_U32>(Value.avatar_id)) return false;
		if(!Read<_U32>(Value.total_rmb)) return false;
		if(!Read<_U32>(Value.gold)) return false;
		if(!Read<_U32>(Value.rmb)) return false;
		if(!ReadArray<_U32, 2>(Value.equip_generals)) return false;
		if(!ReadArray<_U32, 3>(Value.equip_soldiers)) return false;
		if(!Read<_U8>(Value.increase_equipt_times)) return false;
		if(!Read<_U8>(Value.title)) return false;
		if(!Read<_U32>(Value.reputation)) return false;
		if(!Read<_U32>(Value.energy)) return false;
		if(!Read<_U32>(Value.halo_level)) return false;
		if(!Read<_U32>(Value.halo_exp)) return false;
		if(!ReadArray<SG_DAILY_ACTION_INFO, SG_DAILY_ACTION_TYPE_MAX>(Value.daily_actions)) return false;
		if(!Read<_U32>(Value.next_level)) return false;
		if(!Read<_U32>(Value.rank)) return false;
		if(!Read<_U32>(Value.last_rank)) return false;
		if(!Read<_U32>(Value.vip_level)) return false;
		if(!Read<_U32>(Value.league_id)) return false;
		if(!ReadArray<_U32, SG_LEAGUE_APPLY_MAX>(Value.league_apply_list)) return false;
		if(!Read<_U32>(Value.wake_pt)) return false;
		if(!Read<_U32>(Value.turbo_level)) return false;
		if(!ReadStringArray<ARCHETYPE_URL_LENGTH_MAX, SG_TURBO_UNLOCK_SKILL_MAX>(Value.skills)) return false;
		if(!Read<SG_TURBO_SKILL_SLOT>(Value.turbo_skill_slot)) return false;
		if(!Read<_U32>(Value.last_operation_time)) return false;
		if(!ReadString<SG_MAP_URL_MAX>(Value.last_town_map)) return false;
		if(!Read<_U32>(Value.minghun_value)) return false;
		if(!Read<_U32>(Value.current_zhanxing_value)) return false;
		if(!Read<_U32>(Value.horse_exp)) return false;
		if(!Read<_U32>(Value.horse_level)) return false;
		if(!Read<_U32>(Value.furthest_level)) return false;
		if(!Read<_U32>(Value.xunbao_circle)) return false;
		if(!Read<_U32>(Value.xunbao_step)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_PLAYER>(const SG_PLAYER& Value)
	{
		if(!BufferWriter::Write<SG_GENERAL>(Value)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.nick)) return false;
		if(!Write<_U32>(Value.avatar_id)) return false;
		if(!Write<_U32>(Value.total_rmb)) return false;
		if(!Write<_U32>(Value.gold)) return false;
		if(!Write<_U32>(Value.rmb)) return false;
		if(!WriteArray<_U32, 2>(Value.equip_generals)) return false;
		if(!WriteArray<_U32, 3>(Value.equip_soldiers)) return false;
		if(!Write<_U8>(Value.increase_equipt_times)) return false;
		if(!Write<_U8>(Value.title)) return false;
		if(!Write<_U32>(Value.reputation)) return false;
		if(!Write<_U32>(Value.energy)) return false;
		if(!Write<_U32>(Value.halo_level)) return false;
		if(!Write<_U32>(Value.halo_exp)) return false;
		if(!WriteArray<SG_DAILY_ACTION_INFO, SG_DAILY_ACTION_TYPE_MAX>(Value.daily_actions)) return false;
		if(!Write<_U32>(Value.next_level)) return false;
		if(!Write<_U32>(Value.rank)) return false;
		if(!Write<_U32>(Value.last_rank)) return false;
		if(!Write<_U32>(Value.vip_level)) return false;
		if(!Write<_U32>(Value.league_id)) return false;
		if(!WriteArray<_U32, SG_LEAGUE_APPLY_MAX>(Value.league_apply_list)) return false;
		if(!Write<_U32>(Value.wake_pt)) return false;
		if(!Write<_U32>(Value.turbo_level)) return false;
		if(!WriteStringArray<ARCHETYPE_URL_LENGTH_MAX, SG_TURBO_UNLOCK_SKILL_MAX>(Value.skills)) return false;
		if(!Write<SG_TURBO_SKILL_SLOT>(Value.turbo_skill_slot)) return false;
		if(!Write<_U32>(Value.last_operation_time)) return false;
		if(!WriteString<SG_MAP_URL_MAX>(Value.last_town_map)) return false;
		if(!Write<_U32>(Value.minghun_value)) return false;
		if(!Write<_U32>(Value.current_zhanxing_value)) return false;
		if(!Write<_U32>(Value.horse_exp)) return false;
		if(!Write<_U32>(Value.horse_level)) return false;
		if(!Write<_U32>(Value.furthest_level)) return false;
		if(!Write<_U32>(Value.xunbao_circle)) return false;
		if(!Write<_U32>(Value.xunbao_step)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_PLAYER_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_PLAYER>(*((SG_PLAYER*)data));
	}

	static bool _struct_SG_PLAYER_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_PLAYER>(*((const SG_PLAYER*)data));
	}

	static FIELD_INFO _struct_SG_PLAYER_fieldinfo[] =
	{
		{TYPE_STRING, "nick", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, nick), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_U32, "avatar_id", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, avatar_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "total_rmb", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, total_rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "gold", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, gold), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "rmb", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, rmb), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32|TYPE_ARRAY, "equip_generals", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, equip_generals), NULL, (_U16)-1, (_U16)2, (_U16)((size_t)(&((DDL::Array<_U32, 2>*)NULL)->_Array)), (_U16)sizeof(_U32), NULL},
		{TYPE_U32|TYPE_ARRAY, "equip_soldiers", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, equip_soldiers), NULL, (_U16)-1, (_U16)3, (_U16)((size_t)(&((DDL::Array<_U32, 3>*)NULL)->_Array)), (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "increase_equipt_times", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, increase_equipt_times), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "title", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, title), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "reputation", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, reputation), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "energy", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, energy), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "halo_level", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, halo_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "halo_exp", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, halo_exp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "daily_actions", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, daily_actions), &_rfl_struct_SG_DAILY_ACTION_INFO_info, (_U16)-1, (_U16)SG_DAILY_ACTION_TYPE_MAX, (_U16)((size_t)(&((DDL::Array<SG_DAILY_ACTION_INFO, SG_DAILY_ACTION_TYPE_MAX>*)NULL)->_Array)), (_U16)sizeof(SG_DAILY_ACTION_INFO), NULL},
		{TYPE_U32, "next_level", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, next_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "rank", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, rank), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "last_rank", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, last_rank), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "vip_level", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, vip_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "league_id", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, league_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32|TYPE_ARRAY, "league_apply_list", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, league_apply_list), NULL, (_U16)-1, (_U16)SG_LEAGUE_APPLY_MAX, (_U16)((size_t)(&((DDL::Array<_U32, SG_LEAGUE_APPLY_MAX>*)NULL)->_Array)), (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "wake_pt", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, wake_pt), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "turbo_level", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, turbo_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING|TYPE_ARRAY, "skills", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, skills), NULL, (_U16)ARCHETYPE_URL_LENGTH_MAX, (_U16)SG_TURBO_UNLOCK_SKILL_MAX, (_U16)((size_t)(&((DDL::Array<DDL::String<ARCHETYPE_URL_LENGTH_MAX>, SG_TURBO_UNLOCK_SKILL_MAX>*)NULL)->_Array)), (_U16)sizeof(DDL::String<ARCHETYPE_URL_LENGTH_MAX>), NULL},
		{TYPE_STRUCT, "turbo_skill_slot", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, turbo_skill_slot), &_rfl_struct_SG_TURBO_SKILL_SLOT_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_TURBO_SKILL_SLOT), NULL},
		{TYPE_U32, "last_operation_time", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, last_operation_time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "last_town_map", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, last_town_map), NULL, (_U16)SG_MAP_URL_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_MAP_URL_MAX>), NULL},
		{TYPE_U32, "minghun_value", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, minghun_value), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "current_zhanxing_value", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, current_zhanxing_value), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "horse_exp", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, horse_exp), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "horse_level", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, horse_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "furthest_level", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, furthest_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "xunbao_circle", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, xunbao_circle), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "xunbao_step", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER, xunbao_step), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_PLAYER_info = { &_rfl_struct_SG_GENERAL_info, "SG_PLAYER", sizeof(SG_PLAYER), 33, _struct_SG_PLAYER_fieldinfo, _struct_SG_PLAYER_readproc, _struct_SG_PLAYER_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_PLAYER>()
	{
		return &_rfl_struct_SG_PLAYER_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PLAYER_INFO>(SG_PLAYER_INFO& Value)
	{
		if(!BufferReader::Read<SG_GENERAL>(Value)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.nick)) return false;
		if(!Read<_U32>(Value.avatar_id)) return false;
		if(!Read<_U8>(Value.title)) return false;
		if(!Read<_U32>(Value.reputation)) return false;
		if(!Read<_U32>(Value.rank)) return false;
		if(!Read<_U32>(Value.vip_level)) return false;
		if(!Read<_U32>(Value.league_id)) return false;
		if(!Read<_U32>(Value.horse_level)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_PLAYER_INFO>(const SG_PLAYER_INFO& Value)
	{
		if(!BufferWriter::Write<SG_GENERAL>(Value)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.nick)) return false;
		if(!Write<_U32>(Value.avatar_id)) return false;
		if(!Write<_U8>(Value.title)) return false;
		if(!Write<_U32>(Value.reputation)) return false;
		if(!Write<_U32>(Value.rank)) return false;
		if(!Write<_U32>(Value.vip_level)) return false;
		if(!Write<_U32>(Value.league_id)) return false;
		if(!Write<_U32>(Value.horse_level)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_PLAYER_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_PLAYER_INFO>(*((SG_PLAYER_INFO*)data));
	}

	static bool _struct_SG_PLAYER_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_PLAYER_INFO>(*((const SG_PLAYER_INFO*)data));
	}

	static FIELD_INFO _struct_SG_PLAYER_INFO_fieldinfo[] =
	{
		{TYPE_STRING, "nick", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_INFO, nick), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_U32, "avatar_id", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_INFO, avatar_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "title", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_INFO, title), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32, "reputation", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_INFO, reputation), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "rank", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_INFO, rank), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "vip_level", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_INFO, vip_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "league_id", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_INFO, league_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "horse_level", 0, (_U16)ATLAS_OFFSETOF(SG_PLAYER_INFO, horse_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_PLAYER_INFO_info = { &_rfl_struct_SG_GENERAL_info, "SG_PLAYER_INFO", sizeof(SG_PLAYER_INFO), 8, _struct_SG_PLAYER_INFO_fieldinfo, _struct_SG_PLAYER_INFO_readproc, _struct_SG_PLAYER_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_PLAYER_INFO>()
	{
		return &_rfl_struct_SG_PLAYER_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ITEM>(SG_ITEM& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.item_id)) return false;
		if(!Read<_U32>(Value.count)) return false;
		if(!Read<_U32>(Value.expired_time)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_ITEM>(const SG_ITEM& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.item_id)) return false;
		if(!Write<_U32>(Value.count)) return false;
		if(!Write<_U32>(Value.expired_time)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_ITEM_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_ITEM>(*((SG_ITEM*)data));
	}

	static bool _struct_SG_ITEM_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_ITEM>(*((const SG_ITEM*)data));
	}

	static FIELD_INFO _struct_SG_ITEM_fieldinfo[] =
	{
		{TYPE_U32, "item_id", 0, (_U16)ATLAS_OFFSETOF(SG_ITEM, item_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "count", 0, (_U16)ATLAS_OFFSETOF(SG_ITEM, count), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "expired_time", 0, (_U16)ATLAS_OFFSETOF(SG_ITEM, expired_time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_ITEM_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_ITEM", sizeof(SG_ITEM), 3, _struct_SG_ITEM_fieldinfo, _struct_SG_ITEM_readproc, _struct_SG_ITEM_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_ITEM>()
	{
		return &_rfl_struct_SG_ITEM_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_EQUIPT_ITEM>(SG_EQUIPT_ITEM& Value)
	{
		if(!BufferReader::Read<SG_ITEM>(Value)) return false;
		if(!Read<SG_ATTR_MOD_CONFIG>(Value.mod_config)) return false;
		if(!Read<_U8>(Value.turbo_level)) return false;
		if(!ReadArray<_U32, SG_EUQIPT_GEM_SLOTS_MAX>(Value.gems_slots)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_EQUIPT_ITEM>(const SG_EQUIPT_ITEM& Value)
	{
		if(!BufferWriter::Write<SG_ITEM>(Value)) return false;
		if(!Write<SG_ATTR_MOD_CONFIG>(Value.mod_config)) return false;
		if(!Write<_U8>(Value.turbo_level)) return false;
		if(!WriteArray<_U32, SG_EUQIPT_GEM_SLOTS_MAX>(Value.gems_slots)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_EQUIPT_ITEM_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_EQUIPT_ITEM>(*((SG_EQUIPT_ITEM*)data));
	}

	static bool _struct_SG_EQUIPT_ITEM_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_EQUIPT_ITEM>(*((const SG_EQUIPT_ITEM*)data));
	}

	static FIELD_INFO _struct_SG_EQUIPT_ITEM_fieldinfo[] =
	{
		{TYPE_STRUCT, "mod_config", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM, mod_config), &_rfl_struct_SG_ATTR_MOD_CONFIG_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_ATTR_MOD_CONFIG), NULL},
		{TYPE_U8, "turbo_level", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM, turbo_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U32|TYPE_ARRAY, "gems_slots", 0, (_U16)ATLAS_OFFSETOF(SG_EQUIPT_ITEM, gems_slots), NULL, (_U16)-1, (_U16)SG_EUQIPT_GEM_SLOTS_MAX, (_U16)((size_t)(&((DDL::Array<_U32, SG_EUQIPT_GEM_SLOTS_MAX>*)NULL)->_Array)), (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_EQUIPT_ITEM_info = { &_rfl_struct_SG_ITEM_info, "SG_EQUIPT_ITEM", sizeof(SG_EQUIPT_ITEM), 3, _struct_SG_EQUIPT_ITEM_fieldinfo, _struct_SG_EQUIPT_ITEM_readproc, _struct_SG_EQUIPT_ITEM_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_EQUIPT_ITEM>()
	{
		return &_rfl_struct_SG_EQUIPT_ITEM_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_USABLE_ITEM>(SG_USABLE_ITEM& Value)
	{
		if(!BufferReader::Read<SG_ITEM>(Value)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_USABLE_ITEM>(const SG_USABLE_ITEM& Value)
	{
		if(!BufferWriter::Write<SG_ITEM>(Value)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_USABLE_ITEM_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_USABLE_ITEM>(*((SG_USABLE_ITEM*)data));
	}

	static bool _struct_SG_USABLE_ITEM_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_USABLE_ITEM>(*((const SG_USABLE_ITEM*)data));
	}

	STRUCT_INFO _rfl_struct_SG_USABLE_ITEM_info = { &_rfl_struct_SG_ITEM_info, "SG_USABLE_ITEM", sizeof(SG_USABLE_ITEM), 0, NULL, _struct_SG_USABLE_ITEM_readproc, _struct_SG_USABLE_ITEM_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_USABLE_ITEM>()
	{
		return &_rfl_struct_SG_USABLE_ITEM_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GEM_ITEM>(SG_GEM_ITEM& Value)
	{
		if(!BufferReader::Read<SG_ITEM>(Value)) return false;
		if(!Read<_U8>(Value.status)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_GEM_ITEM>(const SG_GEM_ITEM& Value)
	{
		if(!BufferWriter::Write<SG_ITEM>(Value)) return false;
		if(!Write<_U8>(Value.status)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_GEM_ITEM_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_GEM_ITEM>(*((SG_GEM_ITEM*)data));
	}

	static bool _struct_SG_GEM_ITEM_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_GEM_ITEM>(*((const SG_GEM_ITEM*)data));
	}

	static FIELD_INFO _struct_SG_GEM_ITEM_fieldinfo[] =
	{
		{TYPE_U8, "status", 0, (_U16)ATLAS_OFFSETOF(SG_GEM_ITEM, status), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_GEM_ITEM_info = { &_rfl_struct_SG_ITEM_info, "SG_GEM_ITEM", sizeof(SG_GEM_ITEM), 1, _struct_SG_GEM_ITEM_fieldinfo, _struct_SG_GEM_ITEM_readproc, _struct_SG_GEM_ITEM_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_GEM_ITEM>()
	{
		return &_rfl_struct_SG_GEM_ITEM_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_MATERIAL_ITEM>(SG_MATERIAL_ITEM& Value)
	{
		if(!BufferReader::Read<SG_ITEM>(Value)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_MATERIAL_ITEM>(const SG_MATERIAL_ITEM& Value)
	{
		if(!BufferWriter::Write<SG_ITEM>(Value)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_MATERIAL_ITEM_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_MATERIAL_ITEM>(*((SG_MATERIAL_ITEM*)data));
	}

	static bool _struct_SG_MATERIAL_ITEM_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_MATERIAL_ITEM>(*((const SG_MATERIAL_ITEM*)data));
	}

	STRUCT_INFO _rfl_struct_SG_MATERIAL_ITEM_info = { &_rfl_struct_SG_ITEM_info, "SG_MATERIAL_ITEM", sizeof(SG_MATERIAL_ITEM), 0, NULL, _struct_SG_MATERIAL_ITEM_readproc, _struct_SG_MATERIAL_ITEM_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_MATERIAL_ITEM>()
	{
		return &_rfl_struct_SG_MATERIAL_ITEM_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ASTROLOGY_BALL_ITEM>(SG_ASTROLOGY_BALL_ITEM& Value)
	{
		if(!BufferReader::Read<SG_ITEM>(Value)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_ASTROLOGY_BALL_ITEM>(const SG_ASTROLOGY_BALL_ITEM& Value)
	{
		if(!BufferWriter::Write<SG_ITEM>(Value)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_ASTROLOGY_BALL_ITEM_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_ASTROLOGY_BALL_ITEM>(*((SG_ASTROLOGY_BALL_ITEM*)data));
	}

	static bool _struct_SG_ASTROLOGY_BALL_ITEM_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_ASTROLOGY_BALL_ITEM>(*((const SG_ASTROLOGY_BALL_ITEM*)data));
	}

	STRUCT_INFO _rfl_struct_SG_ASTROLOGY_BALL_ITEM_info = { &_rfl_struct_SG_ITEM_info, "SG_ASTROLOGY_BALL_ITEM", sizeof(SG_ASTROLOGY_BALL_ITEM), 0, NULL, _struct_SG_ASTROLOGY_BALL_ITEM_readproc, _struct_SG_ASTROLOGY_BALL_ITEM_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_ASTROLOGY_BALL_ITEM>()
	{
		return &_rfl_struct_SG_ASTROLOGY_BALL_ITEM_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_FRIEND_BASE_INFO>(SG_FRIEND_BASE_INFO& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.avatar_id)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.nick)) return false;
		if(!Read<_U32>(Value.title)) return false;
		if(!Read<_U32>(Value.level)) return false;
		if(!Read<_U32>(Value.battle_value)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_FRIEND_BASE_INFO>(const SG_FRIEND_BASE_INFO& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.avatar_id)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.nick)) return false;
		if(!Write<_U32>(Value.title)) return false;
		if(!Write<_U32>(Value.level)) return false;
		if(!Write<_U32>(Value.battle_value)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_FRIEND_BASE_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_FRIEND_BASE_INFO>(*((SG_FRIEND_BASE_INFO*)data));
	}

	static bool _struct_SG_FRIEND_BASE_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_FRIEND_BASE_INFO>(*((const SG_FRIEND_BASE_INFO*)data));
	}

	static FIELD_INFO _struct_SG_FRIEND_BASE_INFO_fieldinfo[] =
	{
		{TYPE_U32, "avatar_id", 0, (_U16)ATLAS_OFFSETOF(SG_FRIEND_BASE_INFO, avatar_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "nick", 0, (_U16)ATLAS_OFFSETOF(SG_FRIEND_BASE_INFO, nick), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_U32, "title", 0, (_U16)ATLAS_OFFSETOF(SG_FRIEND_BASE_INFO, title), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "level", 0, (_U16)ATLAS_OFFSETOF(SG_FRIEND_BASE_INFO, level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "battle_value", 0, (_U16)ATLAS_OFFSETOF(SG_FRIEND_BASE_INFO, battle_value), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_FRIEND_BASE_INFO_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_FRIEND_BASE_INFO", sizeof(SG_FRIEND_BASE_INFO), 5, _struct_SG_FRIEND_BASE_INFO_fieldinfo, _struct_SG_FRIEND_BASE_INFO_readproc, _struct_SG_FRIEND_BASE_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_FRIEND_BASE_INFO>()
	{
		return &_rfl_struct_SG_FRIEND_BASE_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_FRIEND_INFO>(SG_FRIEND_INFO& Value)
	{
		if(!BufferReader::Read<SG_FRIEND_BASE_INFO>(Value)) return false;
		if(!Read<_U32>(Value.recent_op_time)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_FRIEND_INFO>(const SG_FRIEND_INFO& Value)
	{
		if(!BufferWriter::Write<SG_FRIEND_BASE_INFO>(Value)) return false;
		if(!Write<_U32>(Value.recent_op_time)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_FRIEND_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_FRIEND_INFO>(*((SG_FRIEND_INFO*)data));
	}

	static bool _struct_SG_FRIEND_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_FRIEND_INFO>(*((const SG_FRIEND_INFO*)data));
	}

	static FIELD_INFO _struct_SG_FRIEND_INFO_fieldinfo[] =
	{
		{TYPE_U32, "recent_op_time", 0, (_U16)ATLAS_OFFSETOF(SG_FRIEND_INFO, recent_op_time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_FRIEND_INFO_info = { &_rfl_struct_SG_FRIEND_BASE_INFO_info, "SG_FRIEND_INFO", sizeof(SG_FRIEND_INFO), 1, _struct_SG_FRIEND_INFO_fieldinfo, _struct_SG_FRIEND_INFO_readproc, _struct_SG_FRIEND_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_FRIEND_INFO>()
	{
		return &_rfl_struct_SG_FRIEND_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_FRIEND_SEARCH_INFO>(SG_FRIEND_SEARCH_INFO& Value)
	{
		if(!BufferReader::Read<SG_FRIEND_BASE_INFO>(Value)) return false;
		if(!Read<_U32>(Value.current_friend_num)) return false;
		if(!Read<_U32>(Value.max_friend_num)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_FRIEND_SEARCH_INFO>(const SG_FRIEND_SEARCH_INFO& Value)
	{
		if(!BufferWriter::Write<SG_FRIEND_BASE_INFO>(Value)) return false;
		if(!Write<_U32>(Value.current_friend_num)) return false;
		if(!Write<_U32>(Value.max_friend_num)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_FRIEND_SEARCH_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_FRIEND_SEARCH_INFO>(*((SG_FRIEND_SEARCH_INFO*)data));
	}

	static bool _struct_SG_FRIEND_SEARCH_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_FRIEND_SEARCH_INFO>(*((const SG_FRIEND_SEARCH_INFO*)data));
	}

	static FIELD_INFO _struct_SG_FRIEND_SEARCH_INFO_fieldinfo[] =
	{
		{TYPE_U32, "current_friend_num", 0, (_U16)ATLAS_OFFSETOF(SG_FRIEND_SEARCH_INFO, current_friend_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "max_friend_num", 0, (_U16)ATLAS_OFFSETOF(SG_FRIEND_SEARCH_INFO, max_friend_num), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_FRIEND_SEARCH_INFO_info = { &_rfl_struct_SG_FRIEND_BASE_INFO_info, "SG_FRIEND_SEARCH_INFO", sizeof(SG_FRIEND_SEARCH_INFO), 2, _struct_SG_FRIEND_SEARCH_INFO_fieldinfo, _struct_SG_FRIEND_SEARCH_INFO_readproc, _struct_SG_FRIEND_SEARCH_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_FRIEND_SEARCH_INFO>()
	{
		return &_rfl_struct_SG_FRIEND_SEARCH_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_FRIEND_INVITATION>(SG_FRIEND_INVITATION& Value)
	{
		if(!BufferReader::Read<SG_FRIEND_BASE_INFO>(Value)) return false;
		if(!Read<_U32>(Value.recent_op_time)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_FRIEND_INVITATION>(const SG_FRIEND_INVITATION& Value)
	{
		if(!BufferWriter::Write<SG_FRIEND_BASE_INFO>(Value)) return false;
		if(!Write<_U32>(Value.recent_op_time)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_FRIEND_INVITATION_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_FRIEND_INVITATION>(*((SG_FRIEND_INVITATION*)data));
	}

	static bool _struct_SG_FRIEND_INVITATION_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_FRIEND_INVITATION>(*((const SG_FRIEND_INVITATION*)data));
	}

	static FIELD_INFO _struct_SG_FRIEND_INVITATION_fieldinfo[] =
	{
		{TYPE_U32, "recent_op_time", 0, (_U16)ATLAS_OFFSETOF(SG_FRIEND_INVITATION, recent_op_time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_FRIEND_INVITATION_info = { &_rfl_struct_SG_FRIEND_BASE_INFO_info, "SG_FRIEND_INVITATION", sizeof(SG_FRIEND_INVITATION), 1, _struct_SG_FRIEND_INVITATION_fieldinfo, _struct_SG_FRIEND_INVITATION_readproc, _struct_SG_FRIEND_INVITATION_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_FRIEND_INVITATION>()
	{
		return &_rfl_struct_SG_FRIEND_INVITATION_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SERVER_INFO>(SG_SERVER_INFO& Value)
	{
		if(!Read<_U32>(Value.server_id)) return false;
		if(!ReadString<100>(Value.server_name)) return false;
		if(!Read<_U32>(Value.server_state)) return false;
		if(!ReadString<100>(Value.avatar_nick)) return false;
		if(!Read<_U32>(Value.general_id)) return false;
		if(!Read<_U32>(Value.level)) return false;
		if(!Read<_U32>(Value.server_level)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_SERVER_INFO>(const SG_SERVER_INFO& Value)
	{
		if(!Write<_U32>(Value.server_id)) return false;
		if(!WriteString<100>(Value.server_name)) return false;
		if(!Write<_U32>(Value.server_state)) return false;
		if(!WriteString<100>(Value.avatar_nick)) return false;
		if(!Write<_U32>(Value.general_id)) return false;
		if(!Write<_U32>(Value.level)) return false;
		if(!Write<_U32>(Value.server_level)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_SERVER_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_SERVER_INFO>(*((SG_SERVER_INFO*)data));
	}

	static bool _struct_SG_SERVER_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_SERVER_INFO>(*((const SG_SERVER_INFO*)data));
	}

	static FIELD_INFO _struct_SG_SERVER_INFO_fieldinfo[] =
	{
		{TYPE_U32, "server_id", 0, (_U16)ATLAS_OFFSETOF(SG_SERVER_INFO, server_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "server_name", 0, (_U16)ATLAS_OFFSETOF(SG_SERVER_INFO, server_name), NULL, (_U16)100, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<100>), NULL},
		{TYPE_U32, "server_state", 0, (_U16)ATLAS_OFFSETOF(SG_SERVER_INFO, server_state), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "avatar_nick", 0, (_U16)ATLAS_OFFSETOF(SG_SERVER_INFO, avatar_nick), NULL, (_U16)100, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<100>), NULL},
		{TYPE_U32, "general_id", 0, (_U16)ATLAS_OFFSETOF(SG_SERVER_INFO, general_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "level", 0, (_U16)ATLAS_OFFSETOF(SG_SERVER_INFO, level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "server_level", 0, (_U16)ATLAS_OFFSETOF(SG_SERVER_INFO, server_level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_SERVER_INFO_info = { NULL, "SG_SERVER_INFO", sizeof(SG_SERVER_INFO), 7, _struct_SG_SERVER_INFO_fieldinfo, _struct_SG_SERVER_INFO_readproc, _struct_SG_SERVER_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_SERVER_INFO>()
	{
		return &_rfl_struct_SG_SERVER_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GENERAL_QUERY_INFO>(SG_GENERAL_QUERY_INFO& Value)
	{
		if(!Read<SG_GENERAL>(Value.general)) return false;
		if(!Read<SG_GENERAL_CONFIG>(Value.general_config)) return false;
		if(!Read<SG_GENERAL_LEVEL_CONFIG>(Value.level_config)) return false;
		if(!Read<SG_PAWN_CONFIG>(Value.PawnConfig)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_GENERAL_QUERY_INFO>(const SG_GENERAL_QUERY_INFO& Value)
	{
		if(!Write<SG_GENERAL>(Value.general)) return false;
		if(!Write<SG_GENERAL_CONFIG>(Value.general_config)) return false;
		if(!Write<SG_GENERAL_LEVEL_CONFIG>(Value.level_config)) return false;
		if(!Write<SG_PAWN_CONFIG>(Value.PawnConfig)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_GENERAL_QUERY_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_GENERAL_QUERY_INFO>(*((SG_GENERAL_QUERY_INFO*)data));
	}

	static bool _struct_SG_GENERAL_QUERY_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_GENERAL_QUERY_INFO>(*((const SG_GENERAL_QUERY_INFO*)data));
	}

	static FIELD_INFO _struct_SG_GENERAL_QUERY_INFO_fieldinfo[] =
	{
		{TYPE_STRUCT, "general", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_QUERY_INFO, general), &_rfl_struct_SG_GENERAL_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_GENERAL), NULL},
		{TYPE_STRUCT, "general_config", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_QUERY_INFO, general_config), &_rfl_struct_SG_GENERAL_CONFIG_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_GENERAL_CONFIG), NULL},
		{TYPE_STRUCT, "level_config", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_QUERY_INFO, level_config), &_rfl_struct_SG_GENERAL_LEVEL_CONFIG_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_GENERAL_LEVEL_CONFIG), NULL},
		{TYPE_STRUCT, "PawnConfig", 0, (_U16)ATLAS_OFFSETOF(SG_GENERAL_QUERY_INFO, PawnConfig), &_rfl_struct_SG_PAWN_CONFIG_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_PAWN_CONFIG), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_GENERAL_QUERY_INFO_info = { NULL, "SG_GENERAL_QUERY_INFO", sizeof(SG_GENERAL_QUERY_INFO), 4, _struct_SG_GENERAL_QUERY_INFO_fieldinfo, _struct_SG_GENERAL_QUERY_INFO_readproc, _struct_SG_GENERAL_QUERY_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_GENERAL_QUERY_INFO>()
	{
		return &_rfl_struct_SG_GENERAL_QUERY_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_CHAT_SEND_INFO>(SG_CHAT_SEND_INFO& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.channel_id)) return false;
		if(!Read<_U32>(Value.receiver_id)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.receiver_nick)) return false;
		if(!Read<_U32>(Value.time)) return false;
		if(!ReadString<SG_CHAT_CONTENT_MAX>(Value.content)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_CHAT_SEND_INFO>(const SG_CHAT_SEND_INFO& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.channel_id)) return false;
		if(!Write<_U32>(Value.receiver_id)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.receiver_nick)) return false;
		if(!Write<_U32>(Value.time)) return false;
		if(!WriteString<SG_CHAT_CONTENT_MAX>(Value.content)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_CHAT_SEND_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_CHAT_SEND_INFO>(*((SG_CHAT_SEND_INFO*)data));
	}

	static bool _struct_SG_CHAT_SEND_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_CHAT_SEND_INFO>(*((const SG_CHAT_SEND_INFO*)data));
	}

	static FIELD_INFO _struct_SG_CHAT_SEND_INFO_fieldinfo[] =
	{
		{TYPE_U32, "channel_id", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_SEND_INFO, channel_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "receiver_id", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_SEND_INFO, receiver_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "receiver_nick", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_SEND_INFO, receiver_nick), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_U32, "time", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_SEND_INFO, time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "content", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_SEND_INFO, content), NULL, (_U16)SG_CHAT_CONTENT_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_CHAT_CONTENT_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_CHAT_SEND_INFO_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_CHAT_SEND_INFO", sizeof(SG_CHAT_SEND_INFO), 5, _struct_SG_CHAT_SEND_INFO_fieldinfo, _struct_SG_CHAT_SEND_INFO_readproc, _struct_SG_CHAT_SEND_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_CHAT_SEND_INFO>()
	{
		return &_rfl_struct_SG_CHAT_SEND_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_CHAT_RECV_INFO>(SG_CHAT_RECV_INFO& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.channel_id)) return false;
		if(!Read<_U32>(Value.sender_id)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.sender_nick)) return false;
		if(!Read<_U32>(Value.time)) return false;
		if(!ReadString<SG_CHAT_CONTENT_MAX>(Value.content)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_CHAT_RECV_INFO>(const SG_CHAT_RECV_INFO& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.channel_id)) return false;
		if(!Write<_U32>(Value.sender_id)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.sender_nick)) return false;
		if(!Write<_U32>(Value.time)) return false;
		if(!WriteString<SG_CHAT_CONTENT_MAX>(Value.content)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_CHAT_RECV_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_CHAT_RECV_INFO>(*((SG_CHAT_RECV_INFO*)data));
	}

	static bool _struct_SG_CHAT_RECV_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_CHAT_RECV_INFO>(*((const SG_CHAT_RECV_INFO*)data));
	}

	static FIELD_INFO _struct_SG_CHAT_RECV_INFO_fieldinfo[] =
	{
		{TYPE_U32, "channel_id", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_RECV_INFO, channel_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "sender_id", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_RECV_INFO, sender_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "sender_nick", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_RECV_INFO, sender_nick), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_U32, "time", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_RECV_INFO, time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "content", 0, (_U16)ATLAS_OFFSETOF(SG_CHAT_RECV_INFO, content), NULL, (_U16)SG_CHAT_CONTENT_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_CHAT_CONTENT_MAX>), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_CHAT_RECV_INFO_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_CHAT_RECV_INFO", sizeof(SG_CHAT_RECV_INFO), 5, _struct_SG_CHAT_RECV_INFO_fieldinfo, _struct_SG_CHAT_RECV_INFO_readproc, _struct_SG_CHAT_RECV_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_CHAT_RECV_INFO>()
	{
		return &_rfl_struct_SG_CHAT_RECV_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PVP_HEROLIST_PLAYER>(SG_PVP_HEROLIST_PLAYER& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.nick)) return false;
		if(!Read<_U32>(Value.level)) return false;
		if(!Read<_U32>(Value.rank)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_PVP_HEROLIST_PLAYER>(const SG_PVP_HEROLIST_PLAYER& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.nick)) return false;
		if(!Write<_U32>(Value.level)) return false;
		if(!Write<_U32>(Value.rank)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_PVP_HEROLIST_PLAYER_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_PVP_HEROLIST_PLAYER>(*((SG_PVP_HEROLIST_PLAYER*)data));
	}

	static bool _struct_SG_PVP_HEROLIST_PLAYER_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_PVP_HEROLIST_PLAYER>(*((const SG_PVP_HEROLIST_PLAYER*)data));
	}

	static FIELD_INFO _struct_SG_PVP_HEROLIST_PLAYER_fieldinfo[] =
	{
		{TYPE_STRING, "nick", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_HEROLIST_PLAYER, nick), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_U32, "level", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_HEROLIST_PLAYER, level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "rank", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_HEROLIST_PLAYER, rank), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_PVP_HEROLIST_PLAYER_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_PVP_HEROLIST_PLAYER", sizeof(SG_PVP_HEROLIST_PLAYER), 3, _struct_SG_PVP_HEROLIST_PLAYER_fieldinfo, _struct_SG_PVP_HEROLIST_PLAYER_readproc, _struct_SG_PVP_HEROLIST_PLAYER_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_PVP_HEROLIST_PLAYER>()
	{
		return &_rfl_struct_SG_PVP_HEROLIST_PLAYER_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PVP_RANK_PLAYER>(SG_PVP_RANK_PLAYER& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.avatar_id)) return false;
		if(!Read<_U32>(Value.general_id)) return false;
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.nick)) return false;
		if(!Read<_U32>(Value.level)) return false;
		if(!Read<_U32>(Value.rank)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_PVP_RANK_PLAYER>(const SG_PVP_RANK_PLAYER& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.avatar_id)) return false;
		if(!Write<_U32>(Value.general_id)) return false;
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.nick)) return false;
		if(!Write<_U32>(Value.level)) return false;
		if(!Write<_U32>(Value.rank)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_PVP_RANK_PLAYER_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_PVP_RANK_PLAYER>(*((SG_PVP_RANK_PLAYER*)data));
	}

	static bool _struct_SG_PVP_RANK_PLAYER_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_PVP_RANK_PLAYER>(*((const SG_PVP_RANK_PLAYER*)data));
	}

	static FIELD_INFO _struct_SG_PVP_RANK_PLAYER_fieldinfo[] =
	{
		{TYPE_U32, "avatar_id", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_RANK_PLAYER, avatar_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "general_id", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_RANK_PLAYER, general_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_STRING, "nick", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_RANK_PLAYER, nick), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_U32, "level", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_RANK_PLAYER, level), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "rank", 0, (_U16)ATLAS_OFFSETOF(SG_PVP_RANK_PLAYER, rank), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_PVP_RANK_PLAYER_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_PVP_RANK_PLAYER", sizeof(SG_PVP_RANK_PLAYER), 5, _struct_SG_PVP_RANK_PLAYER_fieldinfo, _struct_SG_PVP_RANK_PLAYER_readproc, _struct_SG_PVP_RANK_PLAYER_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_PVP_RANK_PLAYER>()
	{
		return &_rfl_struct_SG_PVP_RANK_PLAYER_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_NEWCOMER_GUIDE_INFO>(SG_NEWCOMER_GUIDE_INFO& Value)
	{
		if(!BufferReader::Read<A_LIVE_OBJECT>(Value)) return false;
		if(!Read<_U32>(Value.function_id)) return false;
		if(!Read<_U8>(Value.status)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_NEWCOMER_GUIDE_INFO>(const SG_NEWCOMER_GUIDE_INFO& Value)
	{
		if(!BufferWriter::Write<A_LIVE_OBJECT>(Value)) return false;
		if(!Write<_U32>(Value.function_id)) return false;
		if(!Write<_U8>(Value.status)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_NEWCOMER_GUIDE_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_NEWCOMER_GUIDE_INFO>(*((SG_NEWCOMER_GUIDE_INFO*)data));
	}

	static bool _struct_SG_NEWCOMER_GUIDE_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_NEWCOMER_GUIDE_INFO>(*((const SG_NEWCOMER_GUIDE_INFO*)data));
	}

	static FIELD_INFO _struct_SG_NEWCOMER_GUIDE_INFO_fieldinfo[] =
	{
		{TYPE_U32, "function_id", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_INFO, function_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "status", 0, (_U16)ATLAS_OFFSETOF(SG_NEWCOMER_GUIDE_INFO, status), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_NEWCOMER_GUIDE_INFO_info = { &_rfl_struct_A_LIVE_OBJECT_info, "SG_NEWCOMER_GUIDE_INFO", sizeof(SG_NEWCOMER_GUIDE_INFO), 2, _struct_SG_NEWCOMER_GUIDE_INFO_fieldinfo, _struct_SG_NEWCOMER_GUIDE_INFO_readproc, _struct_SG_NEWCOMER_GUIDE_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_NEWCOMER_GUIDE_INFO>()
	{
		return &_rfl_struct_SG_NEWCOMER_GUIDE_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_WORLDBOSS_RANK_ITEM>(SG_WORLDBOSS_RANK_ITEM& Value)
	{
		if(!ReadString<SG_PLAYER_NAME_MAX>(Value.nick)) return false;
		if(!Read<_U32>(Value.rank)) return false;
		if(!Read<_U32>(Value.total_damage)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_WORLDBOSS_RANK_ITEM>(const SG_WORLDBOSS_RANK_ITEM& Value)
	{
		if(!WriteString<SG_PLAYER_NAME_MAX>(Value.nick)) return false;
		if(!Write<_U32>(Value.rank)) return false;
		if(!Write<_U32>(Value.total_damage)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_WORLDBOSS_RANK_ITEM_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_WORLDBOSS_RANK_ITEM>(*((SG_WORLDBOSS_RANK_ITEM*)data));
	}

	static bool _struct_SG_WORLDBOSS_RANK_ITEM_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_WORLDBOSS_RANK_ITEM>(*((const SG_WORLDBOSS_RANK_ITEM*)data));
	}

	static FIELD_INFO _struct_SG_WORLDBOSS_RANK_ITEM_fieldinfo[] =
	{
		{TYPE_STRING, "nick", 0, (_U16)ATLAS_OFFSETOF(SG_WORLDBOSS_RANK_ITEM, nick), NULL, (_U16)SG_PLAYER_NAME_MAX, (_U16)-1, (_U16)0, (_U16)sizeof(DDL::String<SG_PLAYER_NAME_MAX>), NULL},
		{TYPE_U32, "rank", 0, (_U16)ATLAS_OFFSETOF(SG_WORLDBOSS_RANK_ITEM, rank), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "total_damage", 0, (_U16)ATLAS_OFFSETOF(SG_WORLDBOSS_RANK_ITEM, total_damage), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_WORLDBOSS_RANK_ITEM_info = { NULL, "SG_WORLDBOSS_RANK_ITEM", sizeof(SG_WORLDBOSS_RANK_ITEM), 3, _struct_SG_WORLDBOSS_RANK_ITEM_fieldinfo, _struct_SG_WORLDBOSS_RANK_ITEM_readproc, _struct_SG_WORLDBOSS_RANK_ITEM_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_WORLDBOSS_RANK_ITEM>()
	{
		return &_rfl_struct_SG_WORLDBOSS_RANK_ITEM_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_WORLDBOSS_RANK_INFO>(SG_WORLDBOSS_RANK_INFO& Value)
	{
		if(!ReadArray<SG_WORLDBOSS_RANK_ITEM, SG_WORLDBOSS_RANK_LIST_MAX>(Value.last_rank_list)) return false;
		if(!Read<SG_WORLDBOSS_RANK_ITEM>(Value.my_last_rank)) return false;
		if(!Read<_U8>(Value.attendance_reward)) return false;
		if(!Read<_U8>(Value.rank_reward)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_WORLDBOSS_RANK_INFO>(const SG_WORLDBOSS_RANK_INFO& Value)
	{
		if(!WriteArray<SG_WORLDBOSS_RANK_ITEM, SG_WORLDBOSS_RANK_LIST_MAX>(Value.last_rank_list)) return false;
		if(!Write<SG_WORLDBOSS_RANK_ITEM>(Value.my_last_rank)) return false;
		if(!Write<_U8>(Value.attendance_reward)) return false;
		if(!Write<_U8>(Value.rank_reward)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_WORLDBOSS_RANK_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_WORLDBOSS_RANK_INFO>(*((SG_WORLDBOSS_RANK_INFO*)data));
	}

	static bool _struct_SG_WORLDBOSS_RANK_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_WORLDBOSS_RANK_INFO>(*((const SG_WORLDBOSS_RANK_INFO*)data));
	}

	static FIELD_INFO _struct_SG_WORLDBOSS_RANK_INFO_fieldinfo[] =
	{
		{TYPE_STRUCT|TYPE_ARRAY, "last_rank_list", 0, (_U16)ATLAS_OFFSETOF(SG_WORLDBOSS_RANK_INFO, last_rank_list), &_rfl_struct_SG_WORLDBOSS_RANK_ITEM_info, (_U16)-1, (_U16)SG_WORLDBOSS_RANK_LIST_MAX, (_U16)((size_t)(&((DDL::Array<SG_WORLDBOSS_RANK_ITEM, SG_WORLDBOSS_RANK_LIST_MAX>*)NULL)->_Array)), (_U16)sizeof(SG_WORLDBOSS_RANK_ITEM), NULL},
		{TYPE_STRUCT, "my_last_rank", 0, (_U16)ATLAS_OFFSETOF(SG_WORLDBOSS_RANK_INFO, my_last_rank), &_rfl_struct_SG_WORLDBOSS_RANK_ITEM_info, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(SG_WORLDBOSS_RANK_ITEM), NULL},
		{TYPE_U8, "attendance_reward", 0, (_U16)ATLAS_OFFSETOF(SG_WORLDBOSS_RANK_INFO, attendance_reward), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
		{TYPE_U8, "rank_reward", 0, (_U16)ATLAS_OFFSETOF(SG_WORLDBOSS_RANK_INFO, rank_reward), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_WORLDBOSS_RANK_INFO_info = { NULL, "SG_WORLDBOSS_RANK_INFO", sizeof(SG_WORLDBOSS_RANK_INFO), 4, _struct_SG_WORLDBOSS_RANK_INFO_fieldinfo, _struct_SG_WORLDBOSS_RANK_INFO_readproc, _struct_SG_WORLDBOSS_RANK_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_WORLDBOSS_RANK_INFO>()
	{
		return &_rfl_struct_SG_WORLDBOSS_RANK_INFO_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_WORLDBOSS_INFO>(SG_WORLDBOSS_INFO& Value)
	{
		if(!Read<_U32>(Value.boss_id)) return false;
		if(!Read<_U32>(Value.HP)) return false;
		if(!Read<_U8>(Value.status)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<SG_WORLDBOSS_INFO>(const SG_WORLDBOSS_INFO& Value)
	{
		if(!Write<_U32>(Value.boss_id)) return false;
		if(!Write<_U32>(Value.HP)) return false;
		if(!Write<_U8>(Value.status)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_SG_WORLDBOSS_INFO_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<SG_WORLDBOSS_INFO>(*((SG_WORLDBOSS_INFO*)data));
	}

	static bool _struct_SG_WORLDBOSS_INFO_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<SG_WORLDBOSS_INFO>(*((const SG_WORLDBOSS_INFO*)data));
	}

	static FIELD_INFO _struct_SG_WORLDBOSS_INFO_fieldinfo[] =
	{
		{TYPE_U32, "boss_id", 0, (_U16)ATLAS_OFFSETOF(SG_WORLDBOSS_INFO, boss_id), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "HP", 0, (_U16)ATLAS_OFFSETOF(SG_WORLDBOSS_INFO, HP), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U8, "status", 0, (_U16)ATLAS_OFFSETOF(SG_WORLDBOSS_INFO, status), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U8), NULL},
	};
	STRUCT_INFO _rfl_struct_SG_WORLDBOSS_INFO_info = { NULL, "SG_WORLDBOSS_INFO", sizeof(SG_WORLDBOSS_INFO), 3, _struct_SG_WORLDBOSS_INFO_fieldinfo, _struct_SG_WORLDBOSS_INFO_readproc, _struct_SG_WORLDBOSS_INFO_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<SG_WORLDBOSS_INFO>()
	{
		return &_rfl_struct_SG_WORLDBOSS_INFO_info;
	}
}

namespace DDLReflect
{
	static FIELD_INFO _class_SGGAME_C2S_fieldinfos[] = 
	{
		// 0 Ping
		// 1 GetServerList
		// 2 EnterServer
		{TYPE_U32, "server_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 3 QueryAvatar
		// 4 CreateAvatar
		{TYPE_STRING, "nick", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "general_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 5 DeleteAvatar
		// 6 EnterGame
		// 7 LeaveGame
		// 8 QueryServerTime
		// 9 QueryPlayer
		{TYPE_U8, "nSync", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 10 QueryGenerals
		{TYPE_U8, "nSync", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 11 QuerySoldiers
		{TYPE_U8, "nSync", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 12 QueryBag
		{TYPE_U8, "nSync", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 13 QueryOtherPlayers
		{TYPE_STRING, "current_town_map", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "num", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 14 EquipItem
		{TYPE_U32, "general_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "slots", 0, 0, &_rfl_struct_SG_EQUIP_SLOTS_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 15 EquipGenerals
		{TYPE_U32|TYPE_ARRAY, "generals", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 16 EquipSoldiers
		{TYPE_U32|TYPE_ARRAY, "soldiers", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 17 UnLockSoldier
		{TYPE_U32, "soldier_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 18 EnhanceSoldier
		{TYPE_U32, "soldier_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 19 EnhanceEquipt
		{TYPE_UUID, "uuid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 20 ExtendEquipt
		{TYPE_UUID, "uuid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_UUID, "puuid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 21 EnhanceCoolDown
		// 22 EnhanceCoolDownClear
		// 23 IncreaseEquipCoolDown
		// 24 RefreshEquipNormal
		{TYPE_UUID, "uuid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 25 RefreshEquipProperty
		{TYPE_UUID, "uuid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 26 RefreshEquipAbility
		{TYPE_UUID, "uuid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 27 RefreshEquipDecideAccept
		{TYPE_UUID, "uuid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 28 BeginBattle
		{TYPE_STRING, "name", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 29 EndBattle
		{TYPE_STRING, "name", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "result", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "auto_combat", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 30 EquipGem
		{TYPE_UUID, "item_uuid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gem_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 31 UnequipGem
		{TYPE_UUID, "item_uuid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gem_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 32 GemCombine
		{TYPE_U32, "item_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 33 SetGeneralStatus
		{TYPE_U32, "general_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "status", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 34 QueryPlayerQuest
		{TYPE_U8, "nSync", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 35 SaveQuestData
		{TYPE_U32, "quest_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "counter", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "status", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 36 FinishQuest
		{TYPE_U32, "quest_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 37 HaloCoolDown
		// 38 HaloIncreaseEXP
		{TYPE_U8, "halo_type", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 39 HaloGetCoolDown
		// 40 GetPaid
		// 41 UpgradeTitle
		// 42 BuyGoods
		{TYPE_U32, "item_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 43 SellItem
		{TYPE_UUID, "uuid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "item_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 44 QueryPlayerPVPInfo
		{TYPE_U32, "avatar_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 45 QueryPlayerRankList
		// 46 PVPCoolDown
		// 47 PVPGetRestTime
		// 48 PVPRecord
		// 49 PVPHeroList
		// 50 PVPDailyReward
		// 51 PVPBattleBegin
		{TYPE_U32, "defender", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 52 PVPBattleEnd
		{TYPE_U32, "defender", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 53 PVPCoolDownClear
		// 54 PVPIncreateBattleTimes
		// 55 QueryInstance
		// 56 EnterInstance
		{TYPE_U32, "instance_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "difficulty", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 57 BeginInstanceBattle
		{TYPE_U32, "instance_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRING, "map_url", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 58 EndInstanceBattle
		{TYPE_U32, "instance_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRING, "map_url", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "result", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "auto_combat", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 59 ResetInstance
		{TYPE_U32, "instance_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 60 SaveLastTownMap
		{TYPE_STRING, "last_town_map", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 61 CreateLeague
		{TYPE_STRING, "league_name", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 62 ApplyJoinLeague
		{TYPE_U32, "league_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 63 QueryLeagueApplyList
		{TYPE_U32, "league_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 64 QueryLeague
		{TYPE_U32, "league_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 65 QueryLeagueList
		// 66 QueryLeagueMemberList
		{TYPE_U32, "league_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 67 QueryLeagueMemberInfo
		{TYPE_U32, "member_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 68 ContributeLeague
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "energy", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 69 HandleApply
		{TYPE_U32, "applyer_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "allowed", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 70 QueryLeagueNotice
		// 71 SetLeagueNotice
		{TYPE_U32, "league_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRING, "notice_content", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 72 SetLeagueOwner
		{TYPE_U32, "member_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 73 DissolveLeague
		// 74 SetMemberPosition
		{TYPE_U32, "member_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "position", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 75 DismissMember
		{TYPE_U32, "member_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 76 ExitLeague
		// 77 QueryLeagueLog
		// 78 LeagueToast
		{TYPE_U8, "wine_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 79 SalaryGet
		// 80 SalaryGetBat
		// 81 BuyEnergy
		// 82 EnhanceTurbo
		// 83 EquipTurboSkill
		{TYPE_STRUCT, "skill_slot", 0, 0, &_rfl_struct_SG_TURBO_SKILL_SLOT_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 84 MakeEquipt
		{TYPE_U32, "equipt_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 85 QueryActionAvailable
		{TYPE_U32|TYPE_ARRAY, "action_list", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 86 QueryFriendList
		// 87 QueryFriendSearchList
		{TYPE_STRING, "nick", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 88 QueryFriendInvitationList
		// 89 InviteFriend
		{TYPE_U32, "avatar_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 90 AcceptFriend
		{TYPE_U32, "avatar_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 91 RefuseInvitation
		{TYPE_U32, "avatar_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 92 DelFriend
		{TYPE_U32, "avatar_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 93 SendChat
		{TYPE_STRUCT, "send_info", 0, 0, &_rfl_struct_SG_CHAT_SEND_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 94 ReceiveChat
		{TYPE_U32|TYPE_ARRAY, "channel_list", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 95 QueryLeagueDianjiangList
		{TYPE_U32, "league_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 96 JoinLeagueDianjiang
		{TYPE_U32, "league_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 97 QueryLeagueDianjiangReward
		{TYPE_U32, "league_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "avatar_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 98 LeagueDianjiangSummonNPC
		{TYPE_U32, "league_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 99 QueryAstrologyBag
		// 100 SaveToBag
		{TYPE_U32, "item_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 101 SetAstrologyBallStatus
		{TYPE_U32, "general_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "ball_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "status", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 102 EnhanceAstrologyBall
		{TYPE_U32, "ball_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "general_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "index", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 103 Strology
		{TYPE_U32, "astrologer_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 104 StrologyAuto
		{TYPE_U32, "RestSlotCount", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 105 Devour
		{TYPE_U8, "bag_type", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 106 UseItem
		{TYPE_UUID, "uuid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "item_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "target_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 107 FeedHorse
		{TYPE_U8, "feed_type", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 108 QueryBossRushInfo
		// 109 QueryBossRushSupportInfo
		// 110 BeginBossRushBattle
		{TYPE_U32, "level_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRING, "level_url", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "init_boss_hp", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 111 EndBossRushBattle
		{TYPE_STRING, "level_url", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "result", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "total_damage", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 112 BeginBossRushSupportBattle
		{TYPE_U32, "friend_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "level_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRING, "level_url", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 113 EndBossRushSupportBattle
		{TYPE_U32, "friend_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRING, "level_url", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "result", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "total_damage", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 114 RequestBossRushSupport
		// 115 CancelBossRush
		// 116 AddBossRushRemainingTimes
		// 117 AwardBossRush
		// 118 AwardBossRushSupport
		{TYPE_U32, "friend_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "level_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRING, "level_url", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 119 QueryDiceNum
		// 120 QueryNewcomerGuideInfo
		// 121 ActivateNewcomerGuide
		{TYPE_U32, "function_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 122 FinishNewcomerGuide
		{TYPE_U32, "function_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 123 QueryWorldBossRankInfo
		// 124 BeginWorldBossBattle
		{TYPE_U32, "bInstantResurrection", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 125 InspireWorldBossBattle
		// 126 UpdateWorldBossBattle
		{TYPE_U32, "damage", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 127 EndWorldBossBattle
		{TYPE_U32, "damage", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 128 AwardWorldBossRank
		// 129 AwardWorldBossAttendance
		// 130 Recharge
		{TYPE_U32, "index", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
	};
	static FUNCTION_INFO _class_SGGAME_C2S_funcinfos[] = 
	{
		{"Ping", 0, _class_SGGAME_C2S_fieldinfos+0},
		{"GetServerList", 0, _class_SGGAME_C2S_fieldinfos+0},
		{"EnterServer", 1, _class_SGGAME_C2S_fieldinfos+0},
		{"QueryAvatar", 0, _class_SGGAME_C2S_fieldinfos+1},
		{"CreateAvatar", 2, _class_SGGAME_C2S_fieldinfos+1},
		{"DeleteAvatar", 0, _class_SGGAME_C2S_fieldinfos+3},
		{"EnterGame", 0, _class_SGGAME_C2S_fieldinfos+3},
		{"LeaveGame", 0, _class_SGGAME_C2S_fieldinfos+3},
		{"QueryServerTime", 0, _class_SGGAME_C2S_fieldinfos+3},
		{"QueryPlayer", 1, _class_SGGAME_C2S_fieldinfos+3},
		{"QueryGenerals", 1, _class_SGGAME_C2S_fieldinfos+4},
		{"QuerySoldiers", 1, _class_SGGAME_C2S_fieldinfos+5},
		{"QueryBag", 1, _class_SGGAME_C2S_fieldinfos+6},
		{"QueryOtherPlayers", 2, _class_SGGAME_C2S_fieldinfos+7},
		{"EquipItem", 2, _class_SGGAME_C2S_fieldinfos+9},
		{"EquipGenerals", 2, _class_SGGAME_C2S_fieldinfos+11},
		{"EquipSoldiers", 2, _class_SGGAME_C2S_fieldinfos+13},
		{"UnLockSoldier", 1, _class_SGGAME_C2S_fieldinfos+15},
		{"EnhanceSoldier", 1, _class_SGGAME_C2S_fieldinfos+16},
		{"EnhanceEquipt", 1, _class_SGGAME_C2S_fieldinfos+17},
		{"ExtendEquipt", 2, _class_SGGAME_C2S_fieldinfos+18},
		{"EnhanceCoolDown", 0, _class_SGGAME_C2S_fieldinfos+20},
		{"EnhanceCoolDownClear", 0, _class_SGGAME_C2S_fieldinfos+20},
		{"IncreaseEquipCoolDown", 0, _class_SGGAME_C2S_fieldinfos+20},
		{"RefreshEquipNormal", 1, _class_SGGAME_C2S_fieldinfos+20},
		{"RefreshEquipProperty", 1, _class_SGGAME_C2S_fieldinfos+21},
		{"RefreshEquipAbility", 1, _class_SGGAME_C2S_fieldinfos+22},
		{"RefreshEquipDecideAccept", 1, _class_SGGAME_C2S_fieldinfos+23},
		{"BeginBattle", 1, _class_SGGAME_C2S_fieldinfos+24},
		{"EndBattle", 3, _class_SGGAME_C2S_fieldinfos+25},
		{"EquipGem", 2, _class_SGGAME_C2S_fieldinfos+28},
		{"UnequipGem", 2, _class_SGGAME_C2S_fieldinfos+30},
		{"GemCombine", 1, _class_SGGAME_C2S_fieldinfos+32},
		{"SetGeneralStatus", 2, _class_SGGAME_C2S_fieldinfos+33},
		{"QueryPlayerQuest", 1, _class_SGGAME_C2S_fieldinfos+35},
		{"SaveQuestData", 3, _class_SGGAME_C2S_fieldinfos+36},
		{"FinishQuest", 2, _class_SGGAME_C2S_fieldinfos+39},
		{"HaloCoolDown", 0, _class_SGGAME_C2S_fieldinfos+41},
		{"HaloIncreaseEXP", 1, _class_SGGAME_C2S_fieldinfos+41},
		{"HaloGetCoolDown", 0, _class_SGGAME_C2S_fieldinfos+42},
		{"GetPaid", 0, _class_SGGAME_C2S_fieldinfos+42},
		{"UpgradeTitle", 0, _class_SGGAME_C2S_fieldinfos+42},
		{"BuyGoods", 1, _class_SGGAME_C2S_fieldinfos+42},
		{"SellItem", 3, _class_SGGAME_C2S_fieldinfos+43},
		{"QueryPlayerPVPInfo", 1, _class_SGGAME_C2S_fieldinfos+46},
		{"QueryPlayerRankList", 0, _class_SGGAME_C2S_fieldinfos+47},
		{"PVPCoolDown", 0, _class_SGGAME_C2S_fieldinfos+47},
		{"PVPGetRestTime", 0, _class_SGGAME_C2S_fieldinfos+47},
		{"PVPRecord", 0, _class_SGGAME_C2S_fieldinfos+47},
		{"PVPHeroList", 0, _class_SGGAME_C2S_fieldinfos+47},
		{"PVPDailyReward", 0, _class_SGGAME_C2S_fieldinfos+47},
		{"PVPBattleBegin", 1, _class_SGGAME_C2S_fieldinfos+47},
		{"PVPBattleEnd", 2, _class_SGGAME_C2S_fieldinfos+48},
		{"PVPCoolDownClear", 0, _class_SGGAME_C2S_fieldinfos+50},
		{"PVPIncreateBattleTimes", 0, _class_SGGAME_C2S_fieldinfos+50},
		{"QueryInstance", 0, _class_SGGAME_C2S_fieldinfos+50},
		{"EnterInstance", 2, _class_SGGAME_C2S_fieldinfos+50},
		{"BeginInstanceBattle", 2, _class_SGGAME_C2S_fieldinfos+52},
		{"EndInstanceBattle", 4, _class_SGGAME_C2S_fieldinfos+54},
		{"ResetInstance", 1, _class_SGGAME_C2S_fieldinfos+58},
		{"SaveLastTownMap", 1, _class_SGGAME_C2S_fieldinfos+59},
		{"CreateLeague", 1, _class_SGGAME_C2S_fieldinfos+60},
		{"ApplyJoinLeague", 1, _class_SGGAME_C2S_fieldinfos+61},
		{"QueryLeagueApplyList", 1, _class_SGGAME_C2S_fieldinfos+62},
		{"QueryLeague", 1, _class_SGGAME_C2S_fieldinfos+63},
		{"QueryLeagueList", 0, _class_SGGAME_C2S_fieldinfos+64},
		{"QueryLeagueMemberList", 1, _class_SGGAME_C2S_fieldinfos+64},
		{"QueryLeagueMemberInfo", 1, _class_SGGAME_C2S_fieldinfos+65},
		{"ContributeLeague", 2, _class_SGGAME_C2S_fieldinfos+66},
		{"HandleApply", 2, _class_SGGAME_C2S_fieldinfos+68},
		{"QueryLeagueNotice", 0, _class_SGGAME_C2S_fieldinfos+70},
		{"SetLeagueNotice", 2, _class_SGGAME_C2S_fieldinfos+70},
		{"SetLeagueOwner", 1, _class_SGGAME_C2S_fieldinfos+72},
		{"DissolveLeague", 0, _class_SGGAME_C2S_fieldinfos+73},
		{"SetMemberPosition", 2, _class_SGGAME_C2S_fieldinfos+73},
		{"DismissMember", 1, _class_SGGAME_C2S_fieldinfos+75},
		{"ExitLeague", 0, _class_SGGAME_C2S_fieldinfos+76},
		{"QueryLeagueLog", 0, _class_SGGAME_C2S_fieldinfos+76},
		{"LeagueToast", 1, _class_SGGAME_C2S_fieldinfos+76},
		{"SalaryGet", 0, _class_SGGAME_C2S_fieldinfos+77},
		{"SalaryGetBat", 0, _class_SGGAME_C2S_fieldinfos+77},
		{"BuyEnergy", 0, _class_SGGAME_C2S_fieldinfos+77},
		{"EnhanceTurbo", 0, _class_SGGAME_C2S_fieldinfos+77},
		{"EquipTurboSkill", 1, _class_SGGAME_C2S_fieldinfos+77},
		{"MakeEquipt", 1, _class_SGGAME_C2S_fieldinfos+78},
		{"QueryActionAvailable", 2, _class_SGGAME_C2S_fieldinfos+79},
		{"QueryFriendList", 0, _class_SGGAME_C2S_fieldinfos+81},
		{"QueryFriendSearchList", 1, _class_SGGAME_C2S_fieldinfos+81},
		{"QueryFriendInvitationList", 0, _class_SGGAME_C2S_fieldinfos+82},
		{"InviteFriend", 1, _class_SGGAME_C2S_fieldinfos+82},
		{"AcceptFriend", 1, _class_SGGAME_C2S_fieldinfos+83},
		{"RefuseInvitation", 1, _class_SGGAME_C2S_fieldinfos+84},
		{"DelFriend", 1, _class_SGGAME_C2S_fieldinfos+85},
		{"SendChat", 1, _class_SGGAME_C2S_fieldinfos+86},
		{"ReceiveChat", 2, _class_SGGAME_C2S_fieldinfos+87},
		{"QueryLeagueDianjiangList", 1, _class_SGGAME_C2S_fieldinfos+89},
		{"JoinLeagueDianjiang", 1, _class_SGGAME_C2S_fieldinfos+90},
		{"QueryLeagueDianjiangReward", 2, _class_SGGAME_C2S_fieldinfos+91},
		{"LeagueDianjiangSummonNPC", 1, _class_SGGAME_C2S_fieldinfos+93},
		{"QueryAstrologyBag", 0, _class_SGGAME_C2S_fieldinfos+94},
		{"SaveToBag", 1, _class_SGGAME_C2S_fieldinfos+94},
		{"SetAstrologyBallStatus", 3, _class_SGGAME_C2S_fieldinfos+95},
		{"EnhanceAstrologyBall", 3, _class_SGGAME_C2S_fieldinfos+98},
		{"Strology", 1, _class_SGGAME_C2S_fieldinfos+101},
		{"StrologyAuto", 1, _class_SGGAME_C2S_fieldinfos+102},
		{"Devour", 1, _class_SGGAME_C2S_fieldinfos+103},
		{"UseItem", 4, _class_SGGAME_C2S_fieldinfos+104},
		{"FeedHorse", 1, _class_SGGAME_C2S_fieldinfos+108},
		{"QueryBossRushInfo", 0, _class_SGGAME_C2S_fieldinfos+109},
		{"QueryBossRushSupportInfo", 0, _class_SGGAME_C2S_fieldinfos+109},
		{"BeginBossRushBattle", 3, _class_SGGAME_C2S_fieldinfos+109},
		{"EndBossRushBattle", 3, _class_SGGAME_C2S_fieldinfos+112},
		{"BeginBossRushSupportBattle", 3, _class_SGGAME_C2S_fieldinfos+115},
		{"EndBossRushSupportBattle", 4, _class_SGGAME_C2S_fieldinfos+118},
		{"RequestBossRushSupport", 0, _class_SGGAME_C2S_fieldinfos+122},
		{"CancelBossRush", 0, _class_SGGAME_C2S_fieldinfos+122},
		{"AddBossRushRemainingTimes", 0, _class_SGGAME_C2S_fieldinfos+122},
		{"AwardBossRush", 0, _class_SGGAME_C2S_fieldinfos+122},
		{"AwardBossRushSupport", 3, _class_SGGAME_C2S_fieldinfos+122},
		{"QueryDiceNum", 0, _class_SGGAME_C2S_fieldinfos+125},
		{"QueryNewcomerGuideInfo", 0, _class_SGGAME_C2S_fieldinfos+125},
		{"ActivateNewcomerGuide", 1, _class_SGGAME_C2S_fieldinfos+125},
		{"FinishNewcomerGuide", 1, _class_SGGAME_C2S_fieldinfos+126},
		{"QueryWorldBossRankInfo", 0, _class_SGGAME_C2S_fieldinfos+127},
		{"BeginWorldBossBattle", 1, _class_SGGAME_C2S_fieldinfos+127},
		{"InspireWorldBossBattle", 0, _class_SGGAME_C2S_fieldinfos+128},
		{"UpdateWorldBossBattle", 1, _class_SGGAME_C2S_fieldinfos+128},
		{"EndWorldBossBattle", 1, _class_SGGAME_C2S_fieldinfos+129},
		{"AwardWorldBossRank", 0, _class_SGGAME_C2S_fieldinfos+130},
		{"AwardWorldBossAttendance", 0, _class_SGGAME_C2S_fieldinfos+130},
		{"Recharge", 1, _class_SGGAME_C2S_fieldinfos+130},
	};
	static CLASS_INFO _class_SGGAME_C2S_info = { 0, "SGGAME_C2S", 131, _class_SGGAME_C2S_funcinfos };
	template<>
	const CLASS_INFO* GetClass<SGGAME_C2S>()
	{
		return &_class_SGGAME_C2S_info;
	}
}

namespace DDLReflect
{
	static FIELD_INFO _class_SGGAME_S2C_fieldinfos[] = 
	{
		// 0 Pong
		// 1 QueryServerTimeResult
		{TYPE_U32, "time", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 2 GetServerListResult
		{TYPE_STRUCT|TYPE_ARRAY, "infos", 0, 0, &_rfl_struct_SG_SERVER_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "last_server", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 3 QueryAvatarFailed
		{TYPE_U32, "code", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 4 QueryAvatarResult
		{TYPE_STRUCT, "player", 0, 0, &_rfl_struct_SG_PLAYER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 5 EnterGameResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 6 CreateAvatarResult
		{TYPE_U32, "code", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 7 QueryPlayerResult
		{TYPE_STRUCT, "player", 0, 0, &_rfl_struct_SG_PLAYER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "nSync", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 8 QueryGeneralResult
		{TYPE_STRUCT|TYPE_ARRAY, "generals", 0, 0, &_rfl_struct_SG_GENERAL_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "nSync", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 9 QuerySoldierResult
		{TYPE_STRUCT|TYPE_ARRAY, "soldiers", 0, 0, &_rfl_struct_SG_SOLDIER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "nSync", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 10 QueryBagBegin
		// 11 QueryBagEquipt
		{TYPE_STRUCT|TYPE_ARRAY, "items", 0, 0, &_rfl_struct_SG_EQUIPT_ITEM_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 12 QueryBagUsable
		{TYPE_STRUCT|TYPE_ARRAY, "items", 0, 0, &_rfl_struct_SG_USABLE_ITEM_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 13 QueryBagGen
		{TYPE_STRUCT|TYPE_ARRAY, "items", 0, 0, &_rfl_struct_SG_GEM_ITEM_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 14 QueryBagMaterial
		{TYPE_STRUCT|TYPE_ARRAY, "items", 0, 0, &_rfl_struct_SG_MATERIAL_ITEM_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 15 QueryBagEnd
		{TYPE_U8, "nSync", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 16 QueryOtherPlayersResult
		{TYPE_STRUCT|TYPE_ARRAY, "players", 0, 0, &_rfl_struct_SG_PLAYER_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 17 EnhanceEquiptResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "equip_item", 0, 0, &_rfl_struct_SG_EQUIPT_ITEM_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 18 ExtendEquiptResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "equip_item", 0, 0, &_rfl_struct_SG_EQUIPT_ITEM_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_UUID, "reduce_uuid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 19 EnhanceCoolDownResult
		{TYPE_U32, "time", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 20 RefreshEquipDone
		{TYPE_STRUCT, "euipt", 0, 0, &_rfl_struct_SG_EQUIPT_ITEM_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 21 GemCombineResult
		{TYPE_STRUCT, "gem", 0, 0, &_rfl_struct_SG_GEM_ITEM_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 22 HaloIncreaseEXPResult
		{TYPE_U32, "time", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 23 HaloCoolDownResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "consume_rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 24 HaloGetCoolDownResult
		{TYPE_U32, "time", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 25 BeginBattleResult
		{TYPE_STRUCT, "PlayerPVE", 0, 0, &_rfl_struct_SG_PLAYER_PVE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 26 EndBattleResult
		{TYPE_U32, "level", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "exp_addition", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "exp", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "wake_pt", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "drops", 0, 0, &_rfl_struct_SG_DROP_ITEM_CONFIG_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "drop_count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 27 QueryPlayerQuestResult
		{TYPE_STRUCT|TYPE_ARRAY, "quest_list", 0, 0, &_rfl_struct_SG_QUEST_LIVE_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "nSync", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 28 FinishQuestDone
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "quest_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "exp_addition", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "exp", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "level", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "reputation", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "energy", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "drops", 0, 0, &_rfl_struct_SG_DROP_ITEM_BASE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "drop_count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "consume_rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 29 BuyGoodsResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_UUID|TYPE_ARRAY, "goods", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32|TYPE_ARRAY, "id_list", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 30 SellItemResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_UUID, "uuid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "item_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 31 QueryPlayerPVPInfoResult
		{TYPE_STRUCT, "pve", 0, 0, &_rfl_struct_SG_PLAYER_PVE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 32 QueryPlayerRankListResult
		{TYPE_STRUCT|TYPE_ARRAY, "players", 0, 0, &_rfl_struct_SG_PVP_RANK_PLAYER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 33 PVPCoolDownResult
		{TYPE_U32, "time", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 34 PVPGetRestTimeResult
		{TYPE_U32, "rest_time", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 35 PVPRecordResult
		{TYPE_STRUCT|TYPE_ARRAY, "record", 0, 0, &_rfl_struct_SG_PVP_RECORD_ITEM_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 36 PVPHeroListRecord
		{TYPE_STRUCT|TYPE_ARRAY, "players", 0, 0, &_rfl_struct_SG_PVP_HEROLIST_PLAYER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 37 PVPDailyReward
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "reputation", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "items", 0, 0, &_rfl_struct_SG_ITEM_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 38 PVPBattleBeginResult
		{TYPE_STRUCT, "SelfPVE", 0, 0, &_rfl_struct_SG_PLAYER_PVE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "DefenderPVE", 0, 0, &_rfl_struct_SG_PLAYER_PVE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 39 PVPBattleEndResult
		{TYPE_U32, "reputation", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 40 PVPCoolDownClearResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "cost", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 41 PVPIncreateBattleTimesResult
		{TYPE_U32, "rest_times", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 42 QueryInstanceResult
		{TYPE_STRUCT|TYPE_ARRAY, "instances", 0, 0, &_rfl_struct_SG_INSTANCE_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 43 BeginInstanceBattleResult
		{TYPE_STRUCT, "PlayerPVE", 0, 0, &_rfl_struct_SG_PLAYER_PVE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 44 EnterInstanceResult
		{TYPE_STRUCT, "instance", 0, 0, &_rfl_struct_SG_INSTANCE_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 45 EndInstanceBattleResult
		{TYPE_U32, "level", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "exp_addition", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "exp", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "wake_pt", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "result", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "drops", 0, 0, &_rfl_struct_SG_DROP_ITEM_CONFIG_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "drop_count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 46 ResetInstanceResult
		{TYPE_U8, "result", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "instance", 0, 0, &_rfl_struct_SG_INSTANCE_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 47 CreateLeagueResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "league", 0, 0, &_rfl_struct_SG_LEAGUE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 48 QueryLeagueApplyListResult
		{TYPE_STRUCT|TYPE_ARRAY, "applyer", 0, 0, &_rfl_struct_SG_LEAGUE_APPLYER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 49 QueryLeagueResult
		{TYPE_STRUCT, "league", 0, 0, &_rfl_struct_SG_LEAGUE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 50 QueryLeagueListResult
		{TYPE_STRUCT|TYPE_ARRAY, "league_list", 0, 0, &_rfl_struct_SG_LEAGUE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 51 QueryLeagueMemberListResult
		{TYPE_STRUCT|TYPE_ARRAY, "league_members", 0, 0, &_rfl_struct_SG_LEAGUE_MEMBER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 52 QueryLeagueMemberInfoResult
		{TYPE_STRUCT, "member_info", 0, 0, &_rfl_struct_SG_LEAGUE_MEMBER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 53 ContributeLeagueResult
		{TYPE_STRUCT, "self_info", 0, 0, &_rfl_struct_SG_LEAGUE_MEMBER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "league_info", 0, 0, &_rfl_struct_SG_LEAGUE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 54 HandleApplyResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "new_joiner", 0, 0, &_rfl_struct_SG_LEAGUE_MEMBER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 55 QueryLeagueNoticeResult
		{TYPE_STRING, "notice_content", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 56 SetLeagueNoticeResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRING, "notice_content", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 57 SetLeagueOwnerResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "member_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 58 SetMemberPositionResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "member_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "position", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 59 DismissMemberResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "member_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 60 ExitLeagueResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 61 QueryLeagueLogResult
		{TYPE_STRUCT|TYPE_ARRAY, "league_log", 0, 0, &_rfl_struct_SG_LEAGUE_LOG_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 62 LeagueToastResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "reward_reputation", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "reward_league_xp", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 63 SalaryGetResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 64 SalaryGetBatResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "times", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 65 BuyEnergyResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "energy", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "times", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 66 EnhanceTurboResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "turbo_level", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "wake_pt", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 67 MakeEquiptResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "new_euqipt", 0, 0, &_rfl_struct_SG_EQUIPT_ITEM_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "com_material", 0, 0, &_rfl_struct_SG_MATERIAL_ITEM_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "key_material", 0, 0, &_rfl_struct_SG_MATERIAL_ITEM_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 68 QueryActionAvailableResult
		{TYPE_U32|TYPE_ARRAY, "action_list", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32|TYPE_ARRAY, "available_list", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 69 QueryFriendListResult
		{TYPE_STRUCT|TYPE_ARRAY, "friend_list", 0, 0, &_rfl_struct_SG_FRIEND_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 70 QueryFriendListSearchResult
		{TYPE_STRUCT|TYPE_ARRAY, "search_list", 0, 0, &_rfl_struct_SG_FRIEND_SEARCH_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 71 QueryFriendInvitationListResult
		{TYPE_STRUCT|TYPE_ARRAY, "invitation_list", 0, 0, &_rfl_struct_SG_FRIEND_INVITATION_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 72 AcceptFriendResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "avatar_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 73 SendChatResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 74 ReceiveChatResult
		{TYPE_STRUCT|TYPE_ARRAY, "chat_list", 0, 0, &_rfl_struct_SG_CHAT_RECV_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 75 QueryLeagueDianjiangListResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "joiner_list", 0, 0, &_rfl_struct_SG_LEAGUE_DIANJIANG_JOINER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 76 JoinLeagueDianjiangResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "self", 0, 0, &_rfl_struct_SG_LEAGUE_DIANJIANG_JOINER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 77 QueryLeagueDianjiangRewardResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "reputation", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 78 LeagueDianjiangSummonNPCResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "npc_joiner", 0, 0, &_rfl_struct_SG_LEAGUE_DIANJIANG_JOINER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 79 QueryAstrologyBagResult
		{TYPE_U32|TYPE_ARRAY, "bag_list", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count1", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32|TYPE_ARRAY, "tmp_bag_list", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count2", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 80 SaveToBagResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "item_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 81 SetAstrologyBallStatusResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "general", 0, 0, &_rfl_struct_SG_GENERAL_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 82 EnhanceAstrologyBallResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "ball_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "new_ball_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 83 StrologyResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "ball_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "atrologer_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "last_atrologer_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 84 StrologyAutoResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32|TYPE_ARRAY, "ball_list", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "atrologer_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 85 DevourResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "bag_type", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32|TYPE_ARRAY, "ball_list", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32|TYPE_ARRAY, "devoured_list", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count2", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 86 UseItemResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_UUID, "uuid", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "target_id", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "player_info", 0, 0, &_rfl_struct_SG_PLAYER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "general", 0, 0, &_rfl_struct_SG_GENERAL_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "drops", 0, 0, &_rfl_struct_SG_ITEM_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "drop_count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 87 FeedHorseResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "xp", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "xp_add", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "level", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "xp_add_type", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "feed_type", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 88 QueryBossRushInfoResult
		{TYPE_STRUCT, "bossrush_info", 0, 0, &_rfl_struct_SG_BOSSRUSH_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 89 QueryBossRushSupportInfoResult
		{TYPE_STRUCT|TYPE_ARRAY, "support_list", 0, 0, &_rfl_struct_SG_BOSSRUSH_SUPPORT_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 90 BeginBossRushBattleResult
		{TYPE_STRUCT, "PlayerPVE", 0, 0, &_rfl_struct_SG_PLAYER_PVE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 91 EndBossRushBattleResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "level", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "exp_addition", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "exp", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "reputation", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "drops", 0, 0, &_rfl_struct_SG_DROP_ITEM_CONFIG_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "drop_count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 92 BeginBossRushSupportBattleResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "PlayerPVE", 0, 0, &_rfl_struct_SG_PLAYER_PVE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 93 EndBossRushSupportBattleResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "level", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "exp_addition", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "exp", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "reputation", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "drops", 0, 0, &_rfl_struct_SG_DROP_ITEM_CONFIG_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "drop_count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 94 AddBossRushRemainingTimesResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U8, "remain_times", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 95 AwardBossRushResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "level", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "exp_addition", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "exp", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "reputation", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "drops", 0, 0, &_rfl_struct_SG_DROP_ITEM_CONFIG_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "drop_count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 96 AwardBossRushSupportResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "level", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "exp_addition", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "exp", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "reputation", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "drops", 0, 0, &_rfl_struct_SG_DROP_ITEM_CONFIG_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "drop_count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 97 QueryDiceNumResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "dice_num", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "reward_time", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "energy", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "drops", 0, 0, &_rfl_struct_SG_DROP_ITEM_CONFIG_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "drop_count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "circle_num", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "step", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 98 QueryNewcomerGuideInfoResult
		{TYPE_STRUCT|TYPE_ARRAY, "guide_list", 0, 0, &_rfl_struct_SG_NEWCOMER_GUIDE_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 99 QueryWorldBossRankInfoResult
		{TYPE_STRUCT, "rank_info", 0, 0, &_rfl_struct_SG_WORLDBOSS_RANK_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 100 BeginWorldBossBattleResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "selfPve", 0, 0, &_rfl_struct_SG_PLAYER_PVE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "bossInfo", 0, 0, &_rfl_struct_SG_WORLDBOSS_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "ranklist", 0, 0, &_rfl_struct_SG_WORLDBOSS_RANK_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "otherPlayers", 0, 0, &_rfl_struct_SG_PLAYER_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count1", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "drops", 0, 0, &_rfl_struct_SG_DROP_ITEM_BASE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count2", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 101 InspireWorldBossBattleResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 102 AwardWorldBossRankResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "Gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "Reputation", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "ItemList", 0, 0, &_rfl_struct_SG_DROP_ITEM_BASE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 103 UpdateWorldBossBattleResult
		{TYPE_STRUCT, "bossInfo", 0, 0, &_rfl_struct_SG_WORLDBOSS_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "rankinfo", 0, 0, &_rfl_struct_SG_WORLDBOSS_RANK_INFO_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 104 EndWorldBossBattleResult
		// 105 AwardWorldBossAttendanceResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "Gold", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "Reputation", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT|TYPE_ARRAY, "ItemList", 0, 0, &_rfl_struct_SG_DROP_ITEM_BASE_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "count", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		// 106 RechargeResult
		{TYPE_U8, "ret", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_U32, "rmb", 0, 0, NULL, (_U16)-1,(_U16) -1, 0, 0, NULL},
		{TYPE_STRUCT, "selfplayer", 0, 0, &_rfl_struct_SG_PLAYER_info, (_U16)-1,(_U16) -1, 0, 0, NULL},
	};
	static FUNCTION_INFO _class_SGGAME_S2C_funcinfos[] = 
	{
		{"Pong", 0, _class_SGGAME_S2C_fieldinfos+0},
		{"QueryServerTimeResult", 1, _class_SGGAME_S2C_fieldinfos+0},
		{"GetServerListResult", 3, _class_SGGAME_S2C_fieldinfos+1},
		{"QueryAvatarFailed", 1, _class_SGGAME_S2C_fieldinfos+4},
		{"QueryAvatarResult", 1, _class_SGGAME_S2C_fieldinfos+5},
		{"EnterGameResult", 1, _class_SGGAME_S2C_fieldinfos+6},
		{"CreateAvatarResult", 1, _class_SGGAME_S2C_fieldinfos+7},
		{"QueryPlayerResult", 2, _class_SGGAME_S2C_fieldinfos+8},
		{"QueryGeneralResult", 3, _class_SGGAME_S2C_fieldinfos+10},
		{"QuerySoldierResult", 3, _class_SGGAME_S2C_fieldinfos+13},
		{"QueryBagBegin", 0, _class_SGGAME_S2C_fieldinfos+16},
		{"QueryBagEquipt", 2, _class_SGGAME_S2C_fieldinfos+16},
		{"QueryBagUsable", 2, _class_SGGAME_S2C_fieldinfos+18},
		{"QueryBagGen", 2, _class_SGGAME_S2C_fieldinfos+20},
		{"QueryBagMaterial", 2, _class_SGGAME_S2C_fieldinfos+22},
		{"QueryBagEnd", 1, _class_SGGAME_S2C_fieldinfos+24},
		{"QueryOtherPlayersResult", 2, _class_SGGAME_S2C_fieldinfos+25},
		{"EnhanceEquiptResult", 3, _class_SGGAME_S2C_fieldinfos+27},
		{"ExtendEquiptResult", 3, _class_SGGAME_S2C_fieldinfos+30},
		{"EnhanceCoolDownResult", 1, _class_SGGAME_S2C_fieldinfos+33},
		{"RefreshEquipDone", 1, _class_SGGAME_S2C_fieldinfos+34},
		{"GemCombineResult", 1, _class_SGGAME_S2C_fieldinfos+35},
		{"HaloIncreaseEXPResult", 1, _class_SGGAME_S2C_fieldinfos+36},
		{"HaloCoolDownResult", 2, _class_SGGAME_S2C_fieldinfos+37},
		{"HaloGetCoolDownResult", 1, _class_SGGAME_S2C_fieldinfos+39},
		{"BeginBattleResult", 1, _class_SGGAME_S2C_fieldinfos+40},
		{"EndBattleResult", 7, _class_SGGAME_S2C_fieldinfos+41},
		{"QueryPlayerQuestResult", 3, _class_SGGAME_S2C_fieldinfos+48},
		{"FinishQuestDone", 12, _class_SGGAME_S2C_fieldinfos+51},
		{"BuyGoodsResult", 4, _class_SGGAME_S2C_fieldinfos+63},
		{"SellItemResult", 4, _class_SGGAME_S2C_fieldinfos+67},
		{"QueryPlayerPVPInfoResult", 1, _class_SGGAME_S2C_fieldinfos+71},
		{"QueryPlayerRankListResult", 2, _class_SGGAME_S2C_fieldinfos+72},
		{"PVPCoolDownResult", 1, _class_SGGAME_S2C_fieldinfos+74},
		{"PVPGetRestTimeResult", 1, _class_SGGAME_S2C_fieldinfos+75},
		{"PVPRecordResult", 2, _class_SGGAME_S2C_fieldinfos+76},
		{"PVPHeroListRecord", 2, _class_SGGAME_S2C_fieldinfos+78},
		{"PVPDailyReward", 4, _class_SGGAME_S2C_fieldinfos+80},
		{"PVPBattleBeginResult", 2, _class_SGGAME_S2C_fieldinfos+84},
		{"PVPBattleEndResult", 1, _class_SGGAME_S2C_fieldinfos+86},
		{"PVPCoolDownClearResult", 2, _class_SGGAME_S2C_fieldinfos+87},
		{"PVPIncreateBattleTimesResult", 1, _class_SGGAME_S2C_fieldinfos+89},
		{"QueryInstanceResult", 2, _class_SGGAME_S2C_fieldinfos+90},
		{"BeginInstanceBattleResult", 1, _class_SGGAME_S2C_fieldinfos+92},
		{"EnterInstanceResult", 1, _class_SGGAME_S2C_fieldinfos+93},
		{"EndInstanceBattleResult", 8, _class_SGGAME_S2C_fieldinfos+94},
		{"ResetInstanceResult", 3, _class_SGGAME_S2C_fieldinfos+102},
		{"CreateLeagueResult", 2, _class_SGGAME_S2C_fieldinfos+105},
		{"QueryLeagueApplyListResult", 2, _class_SGGAME_S2C_fieldinfos+107},
		{"QueryLeagueResult", 1, _class_SGGAME_S2C_fieldinfos+109},
		{"QueryLeagueListResult", 2, _class_SGGAME_S2C_fieldinfos+110},
		{"QueryLeagueMemberListResult", 2, _class_SGGAME_S2C_fieldinfos+112},
		{"QueryLeagueMemberInfoResult", 1, _class_SGGAME_S2C_fieldinfos+114},
		{"ContributeLeagueResult", 2, _class_SGGAME_S2C_fieldinfos+115},
		{"HandleApplyResult", 2, _class_SGGAME_S2C_fieldinfos+117},
		{"QueryLeagueNoticeResult", 1, _class_SGGAME_S2C_fieldinfos+119},
		{"SetLeagueNoticeResult", 2, _class_SGGAME_S2C_fieldinfos+120},
		{"SetLeagueOwnerResult", 2, _class_SGGAME_S2C_fieldinfos+122},
		{"SetMemberPositionResult", 3, _class_SGGAME_S2C_fieldinfos+124},
		{"DismissMemberResult", 2, _class_SGGAME_S2C_fieldinfos+127},
		{"ExitLeagueResult", 1, _class_SGGAME_S2C_fieldinfos+129},
		{"QueryLeagueLogResult", 2, _class_SGGAME_S2C_fieldinfos+130},
		{"LeagueToastResult", 5, _class_SGGAME_S2C_fieldinfos+132},
		{"SalaryGetResult", 3, _class_SGGAME_S2C_fieldinfos+137},
		{"SalaryGetBatResult", 4, _class_SGGAME_S2C_fieldinfos+140},
		{"BuyEnergyResult", 4, _class_SGGAME_S2C_fieldinfos+144},
		{"EnhanceTurboResult", 3, _class_SGGAME_S2C_fieldinfos+148},
		{"MakeEquiptResult", 4, _class_SGGAME_S2C_fieldinfos+151},
		{"QueryActionAvailableResult", 3, _class_SGGAME_S2C_fieldinfos+155},
		{"QueryFriendListResult", 2, _class_SGGAME_S2C_fieldinfos+158},
		{"QueryFriendListSearchResult", 2, _class_SGGAME_S2C_fieldinfos+160},
		{"QueryFriendInvitationListResult", 2, _class_SGGAME_S2C_fieldinfos+162},
		{"AcceptFriendResult", 2, _class_SGGAME_S2C_fieldinfos+164},
		{"SendChatResult", 1, _class_SGGAME_S2C_fieldinfos+166},
		{"ReceiveChatResult", 2, _class_SGGAME_S2C_fieldinfos+167},
		{"QueryLeagueDianjiangListResult", 3, _class_SGGAME_S2C_fieldinfos+169},
		{"JoinLeagueDianjiangResult", 2, _class_SGGAME_S2C_fieldinfos+172},
		{"QueryLeagueDianjiangRewardResult", 2, _class_SGGAME_S2C_fieldinfos+174},
		{"LeagueDianjiangSummonNPCResult", 4, _class_SGGAME_S2C_fieldinfos+176},
		{"QueryAstrologyBagResult", 4, _class_SGGAME_S2C_fieldinfos+180},
		{"SaveToBagResult", 2, _class_SGGAME_S2C_fieldinfos+184},
		{"SetAstrologyBallStatusResult", 2, _class_SGGAME_S2C_fieldinfos+186},
		{"EnhanceAstrologyBallResult", 4, _class_SGGAME_S2C_fieldinfos+188},
		{"StrologyResult", 5, _class_SGGAME_S2C_fieldinfos+192},
		{"StrologyAutoResult", 5, _class_SGGAME_S2C_fieldinfos+197},
		{"DevourResult", 6, _class_SGGAME_S2C_fieldinfos+202},
		{"UseItemResult", 8, _class_SGGAME_S2C_fieldinfos+208},
		{"FeedHorseResult", 8, _class_SGGAME_S2C_fieldinfos+216},
		{"QueryBossRushInfoResult", 1, _class_SGGAME_S2C_fieldinfos+224},
		{"QueryBossRushSupportInfoResult", 2, _class_SGGAME_S2C_fieldinfos+225},
		{"BeginBossRushBattleResult", 1, _class_SGGAME_S2C_fieldinfos+227},
		{"EndBossRushBattleResult", 8, _class_SGGAME_S2C_fieldinfos+228},
		{"BeginBossRushSupportBattleResult", 2, _class_SGGAME_S2C_fieldinfos+236},
		{"EndBossRushSupportBattleResult", 8, _class_SGGAME_S2C_fieldinfos+238},
		{"AddBossRushRemainingTimesResult", 3, _class_SGGAME_S2C_fieldinfos+246},
		{"AwardBossRushResult", 8, _class_SGGAME_S2C_fieldinfos+249},
		{"AwardBossRushSupportResult", 8, _class_SGGAME_S2C_fieldinfos+257},
		{"QueryDiceNumResult", 9, _class_SGGAME_S2C_fieldinfos+265},
		{"QueryNewcomerGuideInfoResult", 2, _class_SGGAME_S2C_fieldinfos+274},
		{"QueryWorldBossRankInfoResult", 1, _class_SGGAME_S2C_fieldinfos+276},
		{"BeginWorldBossBattleResult", 10, _class_SGGAME_S2C_fieldinfos+277},
		{"InspireWorldBossBattleResult", 2, _class_SGGAME_S2C_fieldinfos+287},
		{"AwardWorldBossRankResult", 5, _class_SGGAME_S2C_fieldinfos+289},
		{"UpdateWorldBossBattleResult", 2, _class_SGGAME_S2C_fieldinfos+294},
		{"EndWorldBossBattleResult", 0, _class_SGGAME_S2C_fieldinfos+296},
		{"AwardWorldBossAttendanceResult", 5, _class_SGGAME_S2C_fieldinfos+296},
		{"RechargeResult", 3, _class_SGGAME_S2C_fieldinfos+301},
	};
	static CLASS_INFO _class_SGGAME_S2C_info = { 0, "SGGAME_S2C", 107, _class_SGGAME_S2C_funcinfos };
	template<>
	const CLASS_INFO* GetClass<SGGAME_S2C>()
	{
		return &_class_SGGAME_S2C_info;
	}
}

