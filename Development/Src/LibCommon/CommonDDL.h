////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED. DO NOT MODIFY! //
////////////////////////////////////////////////

#ifndef __COMMONDDL_DDL_CODEGEN__
#define __COMMONDDL_DDL_CODEGEN__

#pragma pack(push)
#pragma pack(4)

struct A_CONTENT_OBJECT
{
	A_UUID _uuid;
	DDL::String<100> _name;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<A_CONTENT_OBJECT>(A_CONTENT_OBJECT& Value);
	template<>
	bool BufferWriter::Write<A_CONTENT_OBJECT>(const A_CONTENT_OBJECT& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<A_CONTENT_OBJECT>();
	extern STRUCT_INFO _rfl_struct_A_CONTENT_OBJECT_info;

	template<A_CONTENT_OBJECT&>
	bool GetField(FIELD_INFO& info)
	{
		memset(&info, 0, sizeof(info));
		info.type = TYPE_STRUCT;
		info.sinfo = &_rfl_struct_A_CONTENT_OBJECT_info;
		info.ref_type = "A_CONTENT_OBJECT";
		return true;
	}
}

struct A_LIVE_OBJECT
{
	A_UUID _uuid;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<A_LIVE_OBJECT>(A_LIVE_OBJECT& Value);
	template<>
	bool BufferWriter::Write<A_LIVE_OBJECT>(const A_LIVE_OBJECT& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<A_LIVE_OBJECT>();
	extern STRUCT_INFO _rfl_struct_A_LIVE_OBJECT_info;

	template<A_LIVE_OBJECT&>
	bool GetField(FIELD_INFO& info)
	{
		memset(&info, 0, sizeof(info));
		info.type = TYPE_STRUCT;
		info.sinfo = &_rfl_struct_A_LIVE_OBJECT_info;
		info.ref_type = "A_LIVE_OBJECT";
		return true;
	}
}


#pragma pack(pop)

#endif
