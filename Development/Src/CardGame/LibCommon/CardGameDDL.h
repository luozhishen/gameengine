////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED. DO NOT MODIFY! //
////////////////////////////////////////////////

#ifndef __CARDGAMEDDL_DDL_CODEGEN__
#define __CARDGAMEDDL_DDL_CODEGEN__

#pragma pack(push)
#pragma pack(4)

#include "../../LibCommon/CommonDDL.h"

struct CARD_AVATAR_OPERATOR : A_CONTENT_OBJECT
{
};

namespace DDL
{
	template<>
	bool BufferReader::Read<CARD_AVATAR_OPERATOR>(CARD_AVATAR_OPERATOR& Value);
	template<>
	bool BufferWriter::Write<CARD_AVATAR_OPERATOR>(const CARD_AVATAR_OPERATOR& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<CARD_AVATAR_OPERATOR>();
	extern STRUCT_INFO _rfl_struct_CARD_AVATAR_OPERATOR_info;

	template<CARD_AVATAR_OPERATOR&>
	bool GetField(FIELD_INFO& info)
	{
		memset(&info, 0, sizeof(info));
		info.type = TYPE_STRUCT;
		info.sinfo = &_rfl_struct_CARD_AVATAR_OPERATOR_info;
		info.ref_type = "CARD_AVATAR_OPERATOR";
		return true;
	}
}

struct CARD_AVATAR_DESC : A_LIVE_OBJECT
{
	_U32 avatar_id;
	DDL::String<100> avatar_name;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<CARD_AVATAR_DESC>(CARD_AVATAR_DESC& Value);
	template<>
	bool BufferWriter::Write<CARD_AVATAR_DESC>(const CARD_AVATAR_DESC& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<CARD_AVATAR_DESC>();
	extern STRUCT_INFO _rfl_struct_CARD_AVATAR_DESC_info;

	template<CARD_AVATAR_DESC&>
	bool GetField(FIELD_INFO& info)
	{
		memset(&info, 0, sizeof(info));
		info.type = TYPE_STRUCT;
		info.sinfo = &_rfl_struct_CARD_AVATAR_DESC_info;
		info.ref_type = "CARD_AVATAR_DESC";
		return true;
	}
}

struct CARD_AVATAR : A_LIVE_OBJECT
{
	DDL::String<100> avatar_name;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<CARD_AVATAR>(CARD_AVATAR& Value);
	template<>
	bool BufferWriter::Write<CARD_AVATAR>(const CARD_AVATAR& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<CARD_AVATAR>();
	extern STRUCT_INFO _rfl_struct_CARD_AVATAR_info;

	template<CARD_AVATAR&>
	bool GetField(FIELD_INFO& info)
	{
		memset(&info, 0, sizeof(info));
		info.type = TYPE_STRUCT;
		info.sinfo = &_rfl_struct_CARD_AVATAR_info;
		info.ref_type = "CARD_AVATAR";
		return true;
	}
}

struct CARD_AVATAR_OWNOBJ : A_LIVE_OBJECT
{
	DDL::String<100> obj_name;
	_S32 obj_value;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<CARD_AVATAR_OWNOBJ>(CARD_AVATAR_OWNOBJ& Value);
	template<>
	bool BufferWriter::Write<CARD_AVATAR_OWNOBJ>(const CARD_AVATAR_OWNOBJ& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<CARD_AVATAR_OWNOBJ>();
	extern STRUCT_INFO _rfl_struct_CARD_AVATAR_OWNOBJ_info;

	template<CARD_AVATAR_OWNOBJ&>
	bool GetField(FIELD_INFO& info)
	{
		memset(&info, 0, sizeof(info));
		info.type = TYPE_STRUCT;
		info.sinfo = &_rfl_struct_CARD_AVATAR_OWNOBJ_info;
		info.ref_type = "CARD_AVATAR_OWNOBJ";
		return true;
	}
}

class CARDGAME_C2S;

class CARDGAME_S2C;

namespace DDLStub
{

	template<typename CLASS>
	class CARDGAME_C2S : public DDLStub<CLASS>
	{
	public:
		CARDGAME_C2S(CLASS* Class) : DDLStub<CLASS>(Class)
		{
		}

		virtual const DDLReflect::CLASS_INFO* GetClassInfo()
		{
			return DDLReflect::GetClass<CARDGAME_C2S>();
		}
		
		virtual bool Dispatcher(_U16 fid, DDL::BufferReader& Buf)
		{
			if(fid==0)
			{


				// call implement
				DDLStub<CLASS>::GetClass()->Ping();
				return true;
			}
			if(fid==1)
			{
				_U32 _prefix_server_id;

				// <_U32> <server_id> <> <>;
				if(!Buf.Read(_prefix_server_id)) return false;

				// call implement
				DDLStub<CLASS>::GetClass()->SelectServer(_prefix_server_id);
				return true;
			}
			if(fid==2)
			{


				// call implement
				DDLStub<CLASS>::GetClass()->GetAvatarList();
				return true;
			}
			if(fid==3)
			{
				_U32 __length;
				char* _prefix_avatar_name;
				_U32 _prefix_type;

				// <string> <avatar_name> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_avatar_name = (char*)alloca(sizeof(_prefix_avatar_name[0])*(__length+1));
				if(!_prefix_avatar_name) return false;
				if(!Buf.ReadBuffer(_prefix_avatar_name, (unsigned int)sizeof(_prefix_avatar_name[0])*__length)) return false;
				_prefix_avatar_name[__length] = '\0';
				// <_U32> <type> <> <>;
				if(!Buf.Read(_prefix_type)) return false;

				// call implement
				DDLStub<CLASS>::GetClass()->CreateAvatar(_prefix_avatar_name, _prefix_type);
				return true;
			}
			if(fid==4)
			{
				_U32 _prefix_avatar_id;

				// <_U32> <avatar_id> <> <>;
				if(!Buf.Read(_prefix_avatar_id)) return false;

				// call implement
				DDLStub<CLASS>::GetClass()->EnterGame(_prefix_avatar_id);
				return true;
			}
			if(fid==5)
			{
				A_UUID _prefix_obj_uuid;
				_S32 _prefix_value;

				// <A_UUID> <obj_uuid> <> <>;
				if(!Buf.Read(_prefix_obj_uuid)) return false;
				// <_S32> <value> <> <>;
				if(!Buf.Read(_prefix_value)) return false;

				// call implement
				DDLStub<CLASS>::GetClass()->Change(_prefix_obj_uuid, _prefix_value);
				return true;
			}
			if(fid==6)
			{


				// call implement
				DDLStub<CLASS>::GetClass()->LeaveGame();
				return true;
			}
			return false;
		}
	};

}

namespace DDLProxy
{

	template<typename CLIENT, typename BUFFER>
	class CARDGAME_C2S : public DDLProxy<CLIENT, BUFFER>
	{
	public:
		CARDGAME_C2S(CLIENT* Client) : DDLProxy<CLIENT, BUFFER>(Client, DDLReflect::GetClassID<typename ::CARDGAME_C2S>())
		{
		}

		static CARDGAME_C2S<CLIENT, BUFFER> Get(CLIENT* Client)
		{
			CARDGAME_C2S<CLIENT, BUFFER> Proxy(Client);
			return Proxy;
		}

		bool Ping()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 0, Buf);
		}

		bool SelectServer(_U32 server_id)
		{
			BUFFER Buf;
			// <_U32> <server_id> <> <>
			if(!Buf.Write(server_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 1, Buf);
		}

		bool GetAvatarList()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 2, Buf);
		}

		bool CreateAvatar(const char* avatar_name, _U32 type)
		{
			BUFFER Buf;
			_U32 __length;
			// <string> <avatar_name> <> <>
			__length = DDL::StringLength(avatar_name);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(avatar_name, (unsigned int)sizeof(avatar_name[0])*__length)) return false;
			// <_U32> <type> <> <>
			if(!Buf.Write(type)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 3, Buf);
		}

		bool EnterGame(_U32 avatar_id)
		{
			BUFFER Buf;
			// <_U32> <avatar_id> <> <>
			if(!Buf.Write(avatar_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 4, Buf);
		}

		bool Change(const A_UUID& obj_uuid, _S32 value)
		{
			BUFFER Buf;
			// <A_UUID> <obj_uuid> <> <>
			if(!Buf.Write(obj_uuid)) return false;
			// <_S32> <value> <> <>
			if(!Buf.Write(value)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 5, Buf);
		}

		bool LeaveGame()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 6, Buf);
		}
	};

}

namespace DDLReflect
{
	template<>
	const CLASS_INFO* GetClass<CARDGAME_C2S>();
}

namespace DDLStub
{

	template<typename CLASS>
	class CARDGAME_S2C : public DDLStub<CLASS>
	{
	public:
		CARDGAME_S2C(CLASS* Class) : DDLStub<CLASS>(Class)
		{
		}

		virtual const DDLReflect::CLASS_INFO* GetClassInfo()
		{
			return DDLReflect::GetClass<CARDGAME_S2C>();
		}
		
		virtual bool Dispatcher(_U16 fid, DDL::BufferReader& Buf)
		{
			if(fid==0)
			{


				// call implement
				DDLStub<CLASS>::GetClass()->Pong();
				return true;
			}
			if(fid==1)
			{
				_U32 __length;
				_U32 _prefix_errcode;
				CARD_AVATAR_DESC* _prefix_arr;
				_U32 _prefix_count;

				// <_U32> <errcode> <> <>;
				if(!Buf.Read(_prefix_errcode)) return false;
				// <CARD_AVATAR_DESC> <arr> <> <100>;
				if(!Buf.Read(__length)) return false;
				_prefix_arr = (CARD_AVATAR_DESC*)alloca(sizeof(_prefix_arr[0])*__length);
				if(!_prefix_arr) return false;
				if(!Buf.ReadPointer(_prefix_arr, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CLASS>::GetClass()->GetAvatarListCallback(_prefix_errcode, _prefix_arr, _prefix_count);
				return true;
			}
			if(fid==2)
			{
				_U32 _prefix_errcode;

				// <_U32> <errcode> <> <>;
				if(!Buf.Read(_prefix_errcode)) return false;

				// call implement
				DDLStub<CLASS>::GetClass()->CreateAvatarCallback(_prefix_errcode);
				return true;
			}
			if(fid==3)
			{
				_U32 _prefix_errcode;

				// <_U32> <errcode> <> <>;
				if(!Buf.Read(_prefix_errcode)) return false;

				// call implement
				DDLStub<CLASS>::GetClass()->EnterGameCallback(_prefix_errcode);
				return true;
			}
			if(fid==4)
			{
				CARD_AVATAR _prefix_avatar;

				// <CARD_AVATAR> <avatar> <> <>;
				if(!Buf.Read(_prefix_avatar)) return false;

				// call implement
				DDLStub<CLASS>::GetClass()->SyncAvatar(_prefix_avatar);
				return true;
			}
			if(fid==5)
			{
				CARD_AVATAR_OWNOBJ _prefix_ownobj;

				// <CARD_AVATAR_OWNOBJ> <ownobj> <> <>;
				if(!Buf.Read(_prefix_ownobj)) return false;

				// call implement
				DDLStub<CLASS>::GetClass()->SyncAvatarOwnObj(_prefix_ownobj);
				return true;
			}
			if(fid==6)
			{


				// call implement
				DDLStub<CLASS>::GetClass()->SyncCompleted();
				return true;
			}
			if(fid==7)
			{
				_U32 _prefix_errcode;

				// <_U32> <errcode> <> <>;
				if(!Buf.Read(_prefix_errcode)) return false;

				// call implement
				DDLStub<CLASS>::GetClass()->LeaveGameCallback(_prefix_errcode);
				return true;
			}
			return false;
		}
	};

}

namespace DDLProxy
{

	template<typename CLIENT, typename BUFFER>
	class CARDGAME_S2C : public DDLProxy<CLIENT, BUFFER>
	{
	public:
		CARDGAME_S2C(CLIENT* Client) : DDLProxy<CLIENT, BUFFER>(Client, DDLReflect::GetClassID<typename ::CARDGAME_S2C>())
		{
		}

		static CARDGAME_S2C<CLIENT, BUFFER> Get(CLIENT* Client)
		{
			CARDGAME_S2C<CLIENT, BUFFER> Proxy(Client);
			return Proxy;
		}

		bool Pong()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 0, Buf);
		}

		bool GetAvatarListCallback(_U32 errcode, const CARD_AVATAR_DESC* arr, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <_U32> <errcode> <> <>
			if(!Buf.Write(errcode)) return false;
			// <CARD_AVATAR_DESC> <arr> <> <100>
			__length = (_U16)(100);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(arr, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 1, Buf);
		}

		bool CreateAvatarCallback(_U32 errcode)
		{
			BUFFER Buf;
			// <_U32> <errcode> <> <>
			if(!Buf.Write(errcode)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 2, Buf);
		}

		bool EnterGameCallback(_U32 errcode)
		{
			BUFFER Buf;
			// <_U32> <errcode> <> <>
			if(!Buf.Write(errcode)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 3, Buf);
		}

		bool SyncAvatar(const CARD_AVATAR& avatar)
		{
			BUFFER Buf;
			// <CARD_AVATAR> <avatar> <> <>
			if(!Buf.Write(avatar)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 4, Buf);
		}

		bool SyncAvatarOwnObj(const CARD_AVATAR_OWNOBJ& ownobj)
		{
			BUFFER Buf;
			// <CARD_AVATAR_OWNOBJ> <ownobj> <> <>
			if(!Buf.Write(ownobj)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 5, Buf);
		}

		bool SyncCompleted()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 6, Buf);
		}

		bool LeaveGameCallback(_U32 errcode)
		{
			BUFFER Buf;
			// <_U32> <errcode> <> <>
			if(!Buf.Write(errcode)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 7, Buf);
		}
	};

}

namespace DDLReflect
{
	template<>
	const CLASS_INFO* GetClass<CARDGAME_S2C>();
}


#pragma pack(pop)

#endif
