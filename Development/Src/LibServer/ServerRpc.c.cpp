////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED. DO NOT MODIFY! //
////////////////////////////////////////////////

#include <AtlasBase.h>
#include <AsyncRPCImpl.h>
#include "ServerRpc.c.h"

static void SessionRpc_Client_Register();
static void ClusterRpc_Client_Register();
static void NodeRpc_Client_Register();
static void WorkerRpc_Client_Register();

Atlas::RPC_RESULT SRPC_UserLoginDone(Atlas::HSERVER hServer, _U64 sndx, _U64 cndx)
{
	SessionRpc_Client_Register();
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(sndx)+_aligned_sizeof(cndx));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(sndx)) return(RPC_RES_TMP);
	if(!buf.Serialize(cndx)) return(RPC_RES_TMP);
	buf.SetID(0, 0);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT SRPC_KickUser(Atlas::HSERVER hServer, _U64 sndx)
{
	SessionRpc_Client_Register();
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(sndx));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(sndx)) return(RPC_RES_TMP);
	buf.SetID(0, 1);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT SRPC_ForwardUserData(Atlas::HSERVER hServer, _U64 sndx, _U16 code, _U32 len, const _U8* data)
{
	SessionRpc_Client_Register();
	_U32 data__length = (_U32)(len);
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(sndx)+_aligned_sizeof(code)+_aligned_sizeof(len)+_aligned_sizeof(data__length)+_buffer_alignof(sizeof(data[0])*data__length));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(sndx)) return(RPC_RES_TMP);
	if(!buf.Serialize(code)) return(RPC_RES_TMP);
	if(!buf.Serialize(len)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length, data)) return(RPC_RES_TMP);
	buf.SetID(0, 2);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT SRPC_SetNode(Atlas::HSERVER hServer, _U64 sndx, _U32 nodeid, _U64 nndx, _U32 ip, _U16 port)
{
	SessionRpc_Client_Register();
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(sndx)+_aligned_sizeof(nodeid)+_aligned_sizeof(nndx)+_aligned_sizeof(ip)+_aligned_sizeof(port));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(sndx)) return(RPC_RES_TMP);
	if(!buf.Serialize(nodeid)) return(RPC_RES_TMP);
	if(!buf.Serialize(nndx)) return(RPC_RES_TMP);
	if(!buf.Serialize(ip)) return(RPC_RES_TMP);
	if(!buf.Serialize(port)) return(RPC_RES_TMP);
	buf.SetID(0, 3);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT CRPC_UserLogin(Atlas::HSERVER hServer, _U32 uid, const char* token, _U64 sndx)
{
	ClusterRpc_Client_Register();
	_U32 token__length = (_U32)(strlen(token)+1);
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(uid)+_aligned_sizeof(token__length)+_buffer_alignof(sizeof(token[0])*token__length)+_aligned_sizeof(sndx));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(uid)) return(RPC_RES_TMP);
	if(!buf.Serialize(token__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(token__length, token)) return(RPC_RES_TMP);
	if(!buf.Serialize(sndx)) return(RPC_RES_TMP);
	buf.SetID(1, 0);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT CRPC_UserLogout(Atlas::HSERVER hServer, _U32 uid, _U64 sndx)
{
	ClusterRpc_Client_Register();
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(uid)+_aligned_sizeof(sndx));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(uid)) return(RPC_RES_TMP);
	if(!buf.Serialize(sndx)) return(RPC_RES_TMP);
	buf.SetID(1, 1);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT CRPC_KickUser(Atlas::HSERVER hServer, _U32 uid)
{
	ClusterRpc_Client_Register();
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(uid));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(uid)) return(RPC_RES_TMP);
	buf.SetID(1, 2);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT CRPC_OnUserData(Atlas::HSERVER hServer, _U64 cndx, _U16 code, _U32 len, const _U8* data)
{
	ClusterRpc_Client_Register();
	_U32 data__length = (_U32)(len);
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(cndx)+_aligned_sizeof(code)+_aligned_sizeof(len)+_aligned_sizeof(data__length)+_buffer_alignof(sizeof(data[0])*data__length));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(cndx)) return(RPC_RES_TMP);
	if(!buf.Serialize(code)) return(RPC_RES_TMP);
	if(!buf.Serialize(len)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length, data)) return(RPC_RES_TMP);
	buf.SetID(1, 3);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT CRPC_ForwardUserDataByCNDX(Atlas::HSERVER hServer, _U64 cndx, _U16 code, _U32 len, const _U8* data)
{
	ClusterRpc_Client_Register();
	_U32 data__length = (_U32)(len);
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(cndx)+_aligned_sizeof(code)+_aligned_sizeof(len)+_aligned_sizeof(data__length)+_buffer_alignof(sizeof(data[0])*data__length));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(cndx)) return(RPC_RES_TMP);
	if(!buf.Serialize(code)) return(RPC_RES_TMP);
	if(!buf.Serialize(len)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length, data)) return(RPC_RES_TMP);
	buf.SetID(1, 4);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT CRPC_ForwardUserDataByUID(Atlas::HSERVER hServer, _U32 uid, _U16 code, _U32 len, const _U8* data)
{
	ClusterRpc_Client_Register();
	_U32 data__length = (_U32)(len);
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(uid)+_aligned_sizeof(code)+_aligned_sizeof(len)+_aligned_sizeof(data__length)+_buffer_alignof(sizeof(data[0])*data__length));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(uid)) return(RPC_RES_TMP);
	if(!buf.Serialize(code)) return(RPC_RES_TMP);
	if(!buf.Serialize(len)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length, data)) return(RPC_RES_TMP);
	buf.SetID(1, 5);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT CRPC_ForwardUserDataByAID(Atlas::HSERVER hServer, _U32 aid, _U16 code, _U32 len, const _U8* data)
{
	ClusterRpc_Client_Register();
	_U32 data__length = (_U32)(len);
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(aid)+_aligned_sizeof(code)+_aligned_sizeof(len)+_aligned_sizeof(data__length)+_buffer_alignof(sizeof(data[0])*data__length));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(aid)) return(RPC_RES_TMP);
	if(!buf.Serialize(code)) return(RPC_RES_TMP);
	if(!buf.Serialize(len)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length, data)) return(RPC_RES_TMP);
	buf.SetID(1, 6);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT CRPC_ForwardEventByCNDX(Atlas::HSERVER hServer, _U64 cndx, _U32 nodeid, _U16 code, _U32 len, const _U8* data)
{
	ClusterRpc_Client_Register();
	_U32 data__length = (_U32)(len);
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(cndx)+_aligned_sizeof(nodeid)+_aligned_sizeof(code)+_aligned_sizeof(len)+_aligned_sizeof(data__length)+_buffer_alignof(sizeof(data[0])*data__length));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(cndx)) return(RPC_RES_TMP);
	if(!buf.Serialize(nodeid)) return(RPC_RES_TMP);
	if(!buf.Serialize(code)) return(RPC_RES_TMP);
	if(!buf.Serialize(len)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length, data)) return(RPC_RES_TMP);
	buf.SetID(1, 7);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT CRPC_ForwardEventByUID(Atlas::HSERVER hServer, _U32 uid, _U32 nodeid, _U16 code, _U32 len, const _U8* data)
{
	ClusterRpc_Client_Register();
	_U32 data__length = (_U32)(len);
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(uid)+_aligned_sizeof(nodeid)+_aligned_sizeof(code)+_aligned_sizeof(len)+_aligned_sizeof(data__length)+_buffer_alignof(sizeof(data[0])*data__length));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(uid)) return(RPC_RES_TMP);
	if(!buf.Serialize(nodeid)) return(RPC_RES_TMP);
	if(!buf.Serialize(code)) return(RPC_RES_TMP);
	if(!buf.Serialize(len)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length, data)) return(RPC_RES_TMP);
	buf.SetID(1, 8);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT CRPC_ForwardEventByAID(Atlas::HSERVER hServer, _U32 aid, _U32 nodeid, _U16 code, _U32 len, const _U8* data)
{
	ClusterRpc_Client_Register();
	_U32 data__length = (_U32)(len);
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(aid)+_aligned_sizeof(nodeid)+_aligned_sizeof(code)+_aligned_sizeof(len)+_aligned_sizeof(data__length)+_buffer_alignof(sizeof(data[0])*data__length));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(aid)) return(RPC_RES_TMP);
	if(!buf.Serialize(nodeid)) return(RPC_RES_TMP);
	if(!buf.Serialize(code)) return(RPC_RES_TMP);
	if(!buf.Serialize(len)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length, data)) return(RPC_RES_TMP);
	buf.SetID(1, 9);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT CRPC_NodeConnect(Atlas::HSERVER hServer, _U64 cndx, _U32 nodeid, _U32 nodeseq, _U64 nndx)
{
	ClusterRpc_Client_Register();
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(cndx)+_aligned_sizeof(nodeid)+_aligned_sizeof(nodeseq)+_aligned_sizeof(nndx));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(cndx)) return(RPC_RES_TMP);
	if(!buf.Serialize(nodeid)) return(RPC_RES_TMP);
	if(!buf.Serialize(nodeseq)) return(RPC_RES_TMP);
	if(!buf.Serialize(nndx)) return(RPC_RES_TMP);
	buf.SetID(1, 10);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT CRPC_NodeDisconnect(Atlas::HSERVER hServer, _U64 cndx, _U32 nodeid, _U32 nodeseq)
{
	ClusterRpc_Client_Register();
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(cndx)+_aligned_sizeof(nodeid)+_aligned_sizeof(nodeseq));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(cndx)) return(RPC_RES_TMP);
	if(!buf.Serialize(nodeid)) return(RPC_RES_TMP);
	if(!buf.Serialize(nodeseq)) return(RPC_RES_TMP);
	buf.SetID(1, 11);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT CRPC_SetWorkload(Atlas::HSERVER hServer, _U32 type, const WORKLOAD_INFO& info)
{
	ClusterRpc_Client_Register();
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(type)+_aligned_sizeof(info));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(type)) return(RPC_RES_TMP);
	if(!buf.Serialize(info)) return(RPC_RES_TMP);
	buf.SetID(1, 12);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT CRPC_GetWorkload(Atlas::HSERVER hServer)
{
	ClusterRpc_Client_Register();
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD);
	if(!buf) return(RPC_RES_OOM);
	buf.SetID(1, 13);
	return(buf.SendTo(hServer));
}

static bool CRPC_SessionWorkLoadResult_stub_0(Atlas::HSERVER hServer, Atlas::RPC_INPUT_BUF& buf)
{
	_U32* type;
	WORKLOAD_INFO* infos;
	unsigned int* infos__length;
	_U32* count;
	if(!buf.Serialize(type)) return false;
	if(!buf.Serialize(infos__length)) return false;
	if(!buf.Serialize(*infos__length, infos)) return false;
	if(!buf.Serialize(count)) return false;
	CRPC_SessionWorkLoadResult(hServer, *type, infos, *count);
	return true;
}

Atlas::RPC_RESULT NRPC_Connect(Atlas::HSERVER hServer, _U64 cndx, _U32 nodeid, _U32 nodeseq, _U32 len, const _U8* data)
{
	NodeRpc_Client_Register();
	_U32 data__length = (_U32)(len);
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(cndx)+_aligned_sizeof(nodeid)+_aligned_sizeof(nodeseq)+_aligned_sizeof(len)+_aligned_sizeof(data__length)+_buffer_alignof(sizeof(data[0])*data__length));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(cndx)) return(RPC_RES_TMP);
	if(!buf.Serialize(nodeid)) return(RPC_RES_TMP);
	if(!buf.Serialize(nodeseq)) return(RPC_RES_TMP);
	if(!buf.Serialize(len)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length, data)) return(RPC_RES_TMP);
	buf.SetID(2, 0);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT NRPC_SessionAck(Atlas::HSERVER hServer, _U64 nndx, _U64 sndx)
{
	NodeRpc_Client_Register();
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(nndx)+_aligned_sizeof(sndx));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(nndx)) return(RPC_RES_TMP);
	if(!buf.Serialize(sndx)) return(RPC_RES_TMP);
	buf.SetID(2, 1);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT NRPC_Disconnect(Atlas::HSERVER hServer, _U64 nndx, _U32 nodeseq)
{
	NodeRpc_Client_Register();
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(nndx)+_aligned_sizeof(nodeseq));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(nndx)) return(RPC_RES_TMP);
	if(!buf.Serialize(nodeseq)) return(RPC_RES_TMP);
	buf.SetID(2, 2);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT NRPC_OnUserData(Atlas::HSERVER hServer, _U64 nndx, _U16 code, _U32 len, const _U8* data)
{
	NodeRpc_Client_Register();
	_U32 data__length = (_U32)(len);
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(nndx)+_aligned_sizeof(code)+_aligned_sizeof(len)+_aligned_sizeof(data__length)+_buffer_alignof(sizeof(data[0])*data__length));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(nndx)) return(RPC_RES_TMP);
	if(!buf.Serialize(code)) return(RPC_RES_TMP);
	if(!buf.Serialize(len)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length, data)) return(RPC_RES_TMP);
	buf.SetID(2, 3);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT NRPC_OnForwardEvent(Atlas::HSERVER hServer, _U64 nndx, _U16 code, _U32 len, const _U8* data)
{
	NodeRpc_Client_Register();
	_U32 data__length = (_U32)(len);
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(nndx)+_aligned_sizeof(code)+_aligned_sizeof(len)+_aligned_sizeof(data__length)+_buffer_alignof(sizeof(data[0])*data__length));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(nndx)) return(RPC_RES_TMP);
	if(!buf.Serialize(code)) return(RPC_RES_TMP);
	if(!buf.Serialize(len)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length, data)) return(RPC_RES_TMP);
	buf.SetID(2, 4);
	return(buf.SendTo(hServer));
}

Atlas::RPC_RESULT WRPC_DoRequest(Atlas::HSERVER hServer, _U64 tid, _U16 code, _U32 len, const _U8* data)
{
	WorkerRpc_Client_Register();
	_U32 data__length = (_U32)(len);
	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(tid)+_aligned_sizeof(code)+_aligned_sizeof(len)+_aligned_sizeof(data__length)+_buffer_alignof(sizeof(data[0])*data__length));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(tid)) return(RPC_RES_TMP);
	if(!buf.Serialize(code)) return(RPC_RES_TMP);
	if(!buf.Serialize(len)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(data__length, data)) return(RPC_RES_TMP);
	buf.SetID(3, 0);
	return(buf.SendTo(hServer));
}

	static Atlas::RPC_CBFUNC_STUB SessionRpc_callback_table[] = {
	NULL};
void SessionRpc_Client_Register() {
	Atlas::lwrpc_cbinterface_table[0].cbfcount = sizeof(SessionRpc_callback_table)/sizeof(SessionRpc_callback_table[0]) - 1;
	Atlas::lwrpc_cbinterface_table[0].cbfunc_tbl = SessionRpc_callback_table;
}
	static Atlas::RPC_CBFUNC_STUB ClusterRpc_callback_table[] = {
	CRPC_SessionWorkLoadResult_stub_0,
	NULL};
void ClusterRpc_Client_Register() {
	Atlas::lwrpc_cbinterface_table[1].cbfcount = sizeof(ClusterRpc_callback_table)/sizeof(ClusterRpc_callback_table[0]) - 1;
	Atlas::lwrpc_cbinterface_table[1].cbfunc_tbl = ClusterRpc_callback_table;
}
	static Atlas::RPC_CBFUNC_STUB NodeRpc_callback_table[] = {
	NULL};
void NodeRpc_Client_Register() {
	Atlas::lwrpc_cbinterface_table[2].cbfcount = sizeof(NodeRpc_callback_table)/sizeof(NodeRpc_callback_table[0]) - 1;
	Atlas::lwrpc_cbinterface_table[2].cbfunc_tbl = NodeRpc_callback_table;
}
	static Atlas::RPC_CBFUNC_STUB WorkerRpc_callback_table[] = {
	NULL};
void WorkerRpc_Client_Register() {
	Atlas::lwrpc_cbinterface_table[3].cbfcount = sizeof(WorkerRpc_callback_table)/sizeof(WorkerRpc_callback_table[0]) - 1;
	Atlas::lwrpc_cbinterface_table[3].cbfunc_tbl = WorkerRpc_callback_table;
}
