////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED. DO NOT MODIFY! //
////////////////////////////////////////////////

#ifndef __SGGAMEDDL_DDL_CODEGEN__
#define __SGGAMEDDL_DDL_CODEGEN__

#include <AtlasDefines.h>
#include <AtlasUUID.h>
#include <DDL.h>
#include <DDLProxy.h>
#include <DDLStub.h>
#include <DDLReflect.h>

#pragma pack(push)
#pragma pack(4)

#include "../../LibCommon/CommonDDL.h"

const _U32 SG_PLAYERNAME_LENMAX = 100;

const _U32 SG_ENEMYNAME_LENMAX = 100;

const _U32 SG_BAGITEM_MAX = 20;

const _U32 SG_GENERAL_MAX = 10;

const _U32 SG_SOLDIER_MAX = 10;

struct SG_PAWN_CONFIG : A_CONTENT_OBJECT
{
	_F32 BaseHP;
	_F32 SigmaHPAddition;
	_F32 SigmaHPPercent;
	_F32 SigmaExtraHP;
	_F32 BaseATK;
	_F32 SigmaATKAddition;
	_F32 SigmaATKPercent;
	_F32 SigmaExtraATK;
	_F32 BaseDEF;
	_F32 SigmaDEFAddition;
	_F32 SigmaDEFPercent;
	_F32 SigmaExtraDEF;
	_F32 BaseHIT;
	_F32 SigmaHITAddition;
	_F32 BaseEvasion;
	_F32 SigmaEvasionAddition;
	_F32 BaseCRIT;
	_F32 SigmaCRITAddition;
	_F32 BaseSP;
	_F32 SigmaSPAddition;
	_F32 BaseWS;
	_F32 SigmaWSAddition;
	_F32 SigmaWSPercent;
	_F32 SigmaExtraWS;
	_F32 BaseSTR;
	_F32 SigmaSTRAddition;
	_F32 SigmaSTRPercent;
	_F32 SigmaExtraSTR;
	_F32 BaseINT;
	_F32 SigmaINTAddition;
	_F32 SigmaINTPercent;
	_F32 SigmaExtraINT;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PAWN_CONFIG>(SG_PAWN_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_PAWN_CONFIG>(const SG_PAWN_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PAWN_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_PAWN_CONFIG_info;
}

struct SG_ENEMY_CONFIG : SG_PAWN_CONFIG
{
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ENEMY_CONFIG>(SG_ENEMY_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_ENEMY_CONFIG>(const SG_ENEMY_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_ENEMY_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_ENEMY_CONFIG_info;
}

struct SG_SOLDIER_CONFIG : SG_PAWN_CONFIG
{
	_U16 type;
	_U16 level;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SOLDIER_CONFIG>(SG_SOLDIER_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_SOLDIER_CONFIG>(const SG_SOLDIER_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_SOLDIER_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_SOLDIER_CONFIG_info;
}

struct SG_GENERAL_CONFIG : SG_PAWN_CONFIG
{
	_U32 type;
	_U16 level;
	_U32 exp;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GENERAL_CONFIG>(SG_GENERAL_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_GENERAL_CONFIG>(const SG_GENERAL_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GENERAL_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_GENERAL_CONFIG_info;
}

struct SG_EQUIP_SLOTS
{
	A_UUID head;
	A_UUID hand;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_EQUIP_SLOTS>(SG_EQUIP_SLOTS& Value);
	template<>
	bool BufferWriter::Write<SG_EQUIP_SLOTS>(const SG_EQUIP_SLOTS& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_EQUIP_SLOTS>();
	extern STRUCT_INFO _rfl_struct_SG_EQUIP_SLOTS_info;
}

struct SG_GENERAL : A_LIVE_OBJECT
{
	_U32 type;
	_U16 level;
	_U32 exp;
	SG_EQUIP_SLOTS equip_slots;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GENERAL>(SG_GENERAL& Value);
	template<>
	bool BufferWriter::Write<SG_GENERAL>(const SG_GENERAL& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GENERAL>();
	extern STRUCT_INFO _rfl_struct_SG_GENERAL_info;
}

struct SG_SOLDIER : A_LIVE_OBJECT
{
	_U32 type;
	_U16 level;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SOLDIER>(SG_SOLDIER& Value);
	template<>
	bool BufferWriter::Write<SG_SOLDIER>(const SG_SOLDIER& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_SOLDIER>();
	extern STRUCT_INFO _rfl_struct_SG_SOLDIER_info;
}

struct SG_PLAYER : A_LIVE_OBJECT
{
	DDL::String<SG_PLAYERNAME_LENMAX> nick;
	_U32 gold;
	_U32 rmb;
	_U8 sex;
	DDL::Array<_U16, 2> equip_generals;
	DDL::Array<_U16, 3> equip_soldiers;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PLAYER>(SG_PLAYER& Value);
	template<>
	bool BufferWriter::Write<SG_PLAYER>(const SG_PLAYER& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PLAYER>();
	extern STRUCT_INFO _rfl_struct_SG_PLAYER_info;
}

class SGGAME_C2S;

class SGGAME_S2C;

namespace DDLStub
{

	template<typename CALLER, typename CLASS>
	class SGGAME_C2S : public DDLStub<CALLER, CLASS>
	{
	public:
		SGGAME_C2S(CLASS* Class) : DDLStub<CALLER, CLASS>(Class)
		{
		}

		virtual bool Dispatcher(CALLER* Caller, _U16 fid, DDL::BufferReader& Buf)
		{
			if(fid==0)
			{
				_U16 __length;
				_S8* _prefix_name;

				// <_S8> <name> <> <SG_PLAYERNAME_LENMAX>;
				if(!Buf.Read(__length)) return false;
				_prefix_name = (_S8*)alloca(sizeof(_prefix_name[0])*__length);
				if(!_prefix_name) return false;
				if(!Buf.ReadPointer(_prefix_name, __length)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->CreateAvatar(Caller, _prefix_name);
				return true;
			}
			if(fid==1)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryAvatar(Caller);
				return true;
			}
			return false;
		}
	};

}

namespace DDLProxy
{

	template<typename CLIENT, typename BUFFER>
	class SGGAME_C2S : public DDLProxy<CLIENT, BUFFER>
	{
	public:
		SGGAME_C2S(CLIENT* Client) : DDLProxy<CLIENT, BUFFER>(Client, DDLReflect::GetClassID<typename ::SGGAME_C2S>())
		{
		}

		static SGGAME_C2S<CLIENT, BUFFER> Get(CLIENT* Client)
		{
			SGGAME_C2S<CLIENT, BUFFER> Proxy(Client);
			return Proxy;
		}

		bool CreateAvatar(_S8* name)
		{
			BUFFER Buf;
			_U16 __length;
			// <_S8> <name> <> <SG_PLAYERNAME_LENMAX>
			__length = (_U16)(SG_PLAYERNAME_LENMAX);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(name, __length)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 0, Buf);
		}

		bool QueryAvatar()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 1, Buf);
		}
	};

}

namespace DDLReflect
{
	template<>
	const CLASS_INFO* GetClass<SGGAME_C2S>();
}

namespace DDLStub
{

	template<typename CALLER, typename CLASS>
	class SGGAME_S2C : public DDLStub<CALLER, CLASS>
	{
	public:
		SGGAME_S2C(CLASS* Class) : DDLStub<CALLER, CLASS>(Class)
		{
		}

		virtual bool Dispatcher(CALLER* Caller, _U16 fid, DDL::BufferReader& Buf)
		{
			if(fid==0)
			{
				_U32 _prefix_code;

				// <_U32> <code> <> <>;
				if(!Buf.Read(_prefix_code)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->CreatAvatarResult(Caller, _prefix_code);
				return true;
			}
			if(fid==1)
			{
				_U32 _prefix_code;

				// <_U32> <code> <> <>;
				if(!Buf.Read(_prefix_code)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryAvatarResult(Caller, _prefix_code);
				return true;
			}
			return false;
		}
	};

}

namespace DDLProxy
{

	template<typename CLIENT, typename BUFFER>
	class SGGAME_S2C : public DDLProxy<CLIENT, BUFFER>
	{
	public:
		SGGAME_S2C(CLIENT* Client) : DDLProxy<CLIENT, BUFFER>(Client, DDLReflect::GetClassID<typename ::SGGAME_S2C>())
		{
		}

		static SGGAME_S2C<CLIENT, BUFFER> Get(CLIENT* Client)
		{
			SGGAME_S2C<CLIENT, BUFFER> Proxy(Client);
			return Proxy;
		}

		bool CreatAvatarResult(_U32 code)
		{
			BUFFER Buf;
			// <_U32> <code> <> <>
			if(!Buf.Write(code)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 0, Buf);
		}

		bool QueryAvatarResult(_U32 code)
		{
			BUFFER Buf;
			// <_U32> <code> <> <>
			if(!Buf.Write(code)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 1, Buf);
		}
	};

}

namespace DDLReflect
{
	template<>
	const CLASS_INFO* GetClass<SGGAME_S2C>();
}


#pragma pack(pop)

#endif
