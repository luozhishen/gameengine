////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED. DO NOT MODIFY! //
////////////////////////////////////////////////

#include <AtlasBase.h>
#include <AsyncRPCImpl.h>
#include "ServerRpc.s.h"

static bool SRPC_UserLoginDone_stub_0(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* sndx;
	_U64* cndx;
	if(!buf.Serialize(sndx)) return false;
	if(!buf.Serialize(cndx)) return false;
	SRPC_UserLoginDone(hClient, *sndx, *cndx);
	return true;
}

static bool SRPC_KickUser_stub_1(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* sndx;
	if(!buf.Serialize(sndx)) return false;
	SRPC_KickUser(hClient, *sndx);
	return true;
}

static bool SRPC_ForwardUserData_stub_2(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* sndx;
	_U16* code;
	_U32* len;
	_U8* data;
	_U32* data__length;
	if(!buf.Serialize(sndx)) return false;
	if(!buf.Serialize(code)) return false;
	if(!buf.Serialize(len)) return false;
	if(!buf.Serialize(data__length)) return false;
	if(!buf.Serialize(*data__length, data)) return false;
	SRPC_ForwardUserData(hClient, *sndx, *code, *len, data);
	return true;
}

static bool SRPC_SetNode_stub_3(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* sndx;
	_U32* nodeid;
	_U64* nndx;
	_U32* ip;
	_U16* port;
	if(!buf.Serialize(sndx)) return false;
	if(!buf.Serialize(nodeid)) return false;
	if(!buf.Serialize(nndx)) return false;
	if(!buf.Serialize(ip)) return false;
	if(!buf.Serialize(port)) return false;
	SRPC_SetNode(hClient, *sndx, *nodeid, *nndx, *ip, *port);
	return true;
}

static bool CRPC_UserLogin_stub_4(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U32* uid;
	char* token;
	_U32* token__length;
	_U64* sndx;
	if(!buf.Serialize(uid)) return false;
	if(!buf.Serialize(token__length)) return false;
	if(!buf.Serialize(*token__length, token)) return false;
	if(!buf.Serialize(sndx)) return false;
	CRPC_UserLogin(hClient, *uid, token, *sndx);
	return true;
}

static bool CRPC_UserLogout_stub_5(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U32* uid;
	_U64* sndx;
	if(!buf.Serialize(uid)) return false;
	if(!buf.Serialize(sndx)) return false;
	CRPC_UserLogout(hClient, *uid, *sndx);
	return true;
}

static bool CRPC_KickUser_stub_6(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U32* uid;
	if(!buf.Serialize(uid)) return false;
	CRPC_KickUser(hClient, *uid);
	return true;
}

static bool CRPC_OnUserData_stub_7(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* cndx;
	_U16* code;
	_U32* len;
	_U8* data;
	_U32* data__length;
	if(!buf.Serialize(cndx)) return false;
	if(!buf.Serialize(code)) return false;
	if(!buf.Serialize(len)) return false;
	if(!buf.Serialize(data__length)) return false;
	if(!buf.Serialize(*data__length, data)) return false;
	CRPC_OnUserData(hClient, *cndx, *code, *len, data);
	return true;
}

static bool CRPC_ForwardUserDataByCNDX_stub_8(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* cndx;
	_U16* code;
	_U32* len;
	_U8* data;
	_U32* data__length;
	if(!buf.Serialize(cndx)) return false;
	if(!buf.Serialize(code)) return false;
	if(!buf.Serialize(len)) return false;
	if(!buf.Serialize(data__length)) return false;
	if(!buf.Serialize(*data__length, data)) return false;
	CRPC_ForwardUserDataByCNDX(hClient, *cndx, *code, *len, data);
	return true;
}

static bool CRPC_ForwardUserDataByUID_stub_9(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U32* uid;
	_U16* code;
	_U32* len;
	_U8* data;
	_U32* data__length;
	if(!buf.Serialize(uid)) return false;
	if(!buf.Serialize(code)) return false;
	if(!buf.Serialize(len)) return false;
	if(!buf.Serialize(data__length)) return false;
	if(!buf.Serialize(*data__length, data)) return false;
	CRPC_ForwardUserDataByUID(hClient, *uid, *code, *len, data);
	return true;
}

static bool CRPC_ForwardUserDataByAID_stub_10(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U32* aid;
	_U16* code;
	_U32* len;
	_U8* data;
	_U32* data__length;
	if(!buf.Serialize(aid)) return false;
	if(!buf.Serialize(code)) return false;
	if(!buf.Serialize(len)) return false;
	if(!buf.Serialize(data__length)) return false;
	if(!buf.Serialize(*data__length, data)) return false;
	CRPC_ForwardUserDataByAID(hClient, *aid, *code, *len, data);
	return true;
}

static bool CRPC_ForwardEventByCNDX_stub_11(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* cndx;
	_U32* nodeid;
	_U16* code;
	_U32* len;
	_U8* data;
	_U32* data__length;
	if(!buf.Serialize(cndx)) return false;
	if(!buf.Serialize(nodeid)) return false;
	if(!buf.Serialize(code)) return false;
	if(!buf.Serialize(len)) return false;
	if(!buf.Serialize(data__length)) return false;
	if(!buf.Serialize(*data__length, data)) return false;
	CRPC_ForwardEventByCNDX(hClient, *cndx, *nodeid, *code, *len, data);
	return true;
}

static bool CRPC_ForwardEventByUID_stub_12(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U32* uid;
	_U32* nodeid;
	_U16* code;
	_U32* len;
	_U8* data;
	_U32* data__length;
	if(!buf.Serialize(uid)) return false;
	if(!buf.Serialize(nodeid)) return false;
	if(!buf.Serialize(code)) return false;
	if(!buf.Serialize(len)) return false;
	if(!buf.Serialize(data__length)) return false;
	if(!buf.Serialize(*data__length, data)) return false;
	CRPC_ForwardEventByUID(hClient, *uid, *nodeid, *code, *len, data);
	return true;
}

static bool CRPC_ForwardEventByAID_stub_13(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U32* aid;
	_U32* nodeid;
	_U16* code;
	_U32* len;
	_U8* data;
	_U32* data__length;
	if(!buf.Serialize(aid)) return false;
	if(!buf.Serialize(nodeid)) return false;
	if(!buf.Serialize(code)) return false;
	if(!buf.Serialize(len)) return false;
	if(!buf.Serialize(data__length)) return false;
	if(!buf.Serialize(*data__length, data)) return false;
	CRPC_ForwardEventByAID(hClient, *aid, *nodeid, *code, *len, data);
	return true;
}

static bool CRPC_NodeConnect_stub_14(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* cndx;
	_U32* nodeid;
	_U32* nodeseq;
	_U64* nndx;
	if(!buf.Serialize(cndx)) return false;
	if(!buf.Serialize(nodeid)) return false;
	if(!buf.Serialize(nodeseq)) return false;
	if(!buf.Serialize(nndx)) return false;
	CRPC_NodeConnect(hClient, *cndx, *nodeid, *nodeseq, *nndx);
	return true;
}

static bool CRPC_NodeDisconnect_stub_15(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* cndx;
	_U32* nodeid;
	_U32* nodeseq;
	if(!buf.Serialize(cndx)) return false;
	if(!buf.Serialize(nodeid)) return false;
	if(!buf.Serialize(nodeseq)) return false;
	CRPC_NodeDisconnect(hClient, *cndx, *nodeid, *nodeseq);
	return true;
}

static bool CRPC_SetSessionWorkload_stub_16(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	WORKLOAD_INFO* info;
	if(!buf.Serialize(info)) return false;
	CRPC_SetSessionWorkload(hClient, *info);
	return true;
}

static bool CRPC_GetSessionWorkload_stub_17(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	CRPC_GetSessionWorkload(hClient);
	return true;
}

Atlas::RPC_RESULT CRPC_SessionWorkLoadResult(Atlas::HCLIENT hClient, const WORKLOAD_INFO* info, _U32 count)
{
	unsigned int info__length = (_U32)(count);	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(info__length)+_buffer_alignof(sizeof(info[0])*info__length)+_aligned_sizeof(count));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(info__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(info__length, info)) return(RPC_RES_TMP);
	if(!buf.Serialize(count)) return(RPC_RES_TMP);
	buf.SetID(1, 0);
	return(buf.SendTo(hClient));
}

static bool CRPC_SetNodeWorkload_stub_18(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	WORKLOAD_INFO* info;
	_U32* type;
	if(!buf.Serialize(info)) return false;
	if(!buf.Serialize(type)) return false;
	CRPC_SetNodeWorkload(hClient, *info, *type);
	return true;
}

static bool CRPC_GetNodeWorkload_stub_19(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U32* type;
	if(!buf.Serialize(type)) return false;
	CRPC_GetNodeWorkload(hClient, *type);
	return true;
}

Atlas::RPC_RESULT CRPC_NodeWorkLoadResult(Atlas::HCLIENT hClient, _U32 type, const WORKLOAD_INFO* info, _U32 count)
{
	unsigned int info__length = (_U32)(count);	Atlas::RPC_OUTPUT_BUF buf(RPC_PACKET_OVERHEAD+_aligned_sizeof(type)+_aligned_sizeof(info__length)+_buffer_alignof(sizeof(info[0])*info__length)+_aligned_sizeof(count));
	if(!buf) return(RPC_RES_OOM);
	if(!buf.Serialize(type)) return(RPC_RES_TMP);
	if(!buf.Serialize(info__length)) return(RPC_RES_TMP);
	if(!buf.Serialize(info__length, info)) return(RPC_RES_TMP);
	if(!buf.Serialize(count)) return(RPC_RES_TMP);
	buf.SetID(1, 1);
	return(buf.SendTo(hClient));
}

static bool NRPC_Connect_stub_20(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* cndx;
	_U32* nodeid;
	_U32* nodeseq;
	_U32* len;
	_U8* data;
	_U32* data__length;
	if(!buf.Serialize(cndx)) return false;
	if(!buf.Serialize(nodeid)) return false;
	if(!buf.Serialize(nodeseq)) return false;
	if(!buf.Serialize(len)) return false;
	if(!buf.Serialize(data__length)) return false;
	if(!buf.Serialize(*data__length, data)) return false;
	NRPC_Connect(hClient, *cndx, *nodeid, *nodeseq, *len, data);
	return true;
}

static bool NRPC_SessionAck_stub_21(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* nndx;
	_U64* sndx;
	if(!buf.Serialize(nndx)) return false;
	if(!buf.Serialize(sndx)) return false;
	NRPC_SessionAck(hClient, *nndx, *sndx);
	return true;
}

static bool NRPC_Disconnect_stub_22(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* nndx;
	_U32* nodeseq;
	if(!buf.Serialize(nndx)) return false;
	if(!buf.Serialize(nodeseq)) return false;
	NRPC_Disconnect(hClient, *nndx, *nodeseq);
	return true;
}

static bool NRPC_OnUserData_stub_23(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* nndx;
	_U16* code;
	_U32* len;
	_U8* data;
	_U32* data__length;
	if(!buf.Serialize(nndx)) return false;
	if(!buf.Serialize(code)) return false;
	if(!buf.Serialize(len)) return false;
	if(!buf.Serialize(data__length)) return false;
	if(!buf.Serialize(*data__length, data)) return false;
	NRPC_OnUserData(hClient, *nndx, *code, *len, data);
	return true;
}

static bool NRPC_OnForwardEvent_stub_24(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* nndx;
	_U16* code;
	_U32* len;
	_U8* data;
	_U32* data__length;
	if(!buf.Serialize(nndx)) return false;
	if(!buf.Serialize(code)) return false;
	if(!buf.Serialize(len)) return false;
	if(!buf.Serialize(data__length)) return false;
	if(!buf.Serialize(*data__length, data)) return false;
	NRPC_OnForwardEvent(hClient, *nndx, *code, *len, data);
	return true;
}

static bool WRPC_DoRequest_stub_25(Atlas::HCLIENT hClient, Atlas::RPC_INPUT_BUF& buf)
{
	_U64* tid;
	_U16* code;
	_U32* len;
	_U8* data;
	_U32* data__length;
	if(!buf.Serialize(tid)) return false;
	if(!buf.Serialize(code)) return false;
	if(!buf.Serialize(len)) return false;
	if(!buf.Serialize(data__length)) return false;
	if(!buf.Serialize(*data__length, data)) return false;
	WRPC_DoRequest(hClient, *tid, *code, *len, data);
	return true;
}

static Atlas::RPC_FUNC_STUB SessionRpc_server_table[] =
{
SRPC_UserLoginDone_stub_0,
SRPC_KickUser_stub_1,
SRPC_ForwardUserData_stub_2,
SRPC_SetNode_stub_3,
NULL };
void SessionRpc_Server_Register() {
	Atlas::lwrpc_interface_table[0].fcount = sizeof(SessionRpc_server_table)/sizeof(SessionRpc_server_table[0]) - 1;
	Atlas::lwrpc_interface_table[0].func_tbl = SessionRpc_server_table;
}
static Atlas::RPC_FUNC_STUB ClusterRpc_server_table[] =
{
CRPC_UserLogin_stub_4,
CRPC_UserLogout_stub_5,
CRPC_KickUser_stub_6,
CRPC_OnUserData_stub_7,
CRPC_ForwardUserDataByCNDX_stub_8,
CRPC_ForwardUserDataByUID_stub_9,
CRPC_ForwardUserDataByAID_stub_10,
CRPC_ForwardEventByCNDX_stub_11,
CRPC_ForwardEventByUID_stub_12,
CRPC_ForwardEventByAID_stub_13,
CRPC_NodeConnect_stub_14,
CRPC_NodeDisconnect_stub_15,
CRPC_SetSessionWorkload_stub_16,
CRPC_GetSessionWorkload_stub_17,
CRPC_SetNodeWorkload_stub_18,
CRPC_GetNodeWorkload_stub_19,
NULL };
void ClusterRpc_Server_Register() {
	Atlas::lwrpc_interface_table[1].fcount = sizeof(ClusterRpc_server_table)/sizeof(ClusterRpc_server_table[0]) - 1;
	Atlas::lwrpc_interface_table[1].func_tbl = ClusterRpc_server_table;
}
static Atlas::RPC_FUNC_STUB NodeRpc_server_table[] =
{
NRPC_Connect_stub_20,
NRPC_SessionAck_stub_21,
NRPC_Disconnect_stub_22,
NRPC_OnUserData_stub_23,
NRPC_OnForwardEvent_stub_24,
NULL };
void NodeRpc_Server_Register() {
	Atlas::lwrpc_interface_table[2].fcount = sizeof(NodeRpc_server_table)/sizeof(NodeRpc_server_table[0]) - 1;
	Atlas::lwrpc_interface_table[2].func_tbl = NodeRpc_server_table;
}
static Atlas::RPC_FUNC_STUB WorkerRpc_server_table[] =
{
WRPC_DoRequest_stub_25,
NULL };
void WorkerRpc_Server_Register() {
	Atlas::lwrpc_interface_table[3].fcount = sizeof(WorkerRpc_server_table)/sizeof(WorkerRpc_server_table[0]) - 1;
	Atlas::lwrpc_interface_table[3].func_tbl = WorkerRpc_server_table;
}
