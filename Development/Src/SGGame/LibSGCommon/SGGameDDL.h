////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED. DO NOT MODIFY! //
////////////////////////////////////////////////

#ifndef __SGGAMEDDL_DDL_CODEGEN__
#define __SGGAMEDDL_DDL_CODEGEN__

#include <AtlasDefines.h>
#include <AtlasUUID.h>
#include <DDL.h>
#include <DDLProxy.h>
#include <DDLStub.h>
#include <DDLReflect.h>

#pragma pack(push)
#pragma pack(4)

#include "../../LibCommon/CommonDDL.h"

const _U32 SG_PLAYERNAME_LENMAX = 100;

const _U32 ARCHETYPE_URL_LENGTH_MAX = 128;

const _U32 SG_DESCRIPTION_MAX = 512;

const _U32 SG_PLAYER_NAME_MAX = 10;

struct SG_PLAYER_RANDOM_NAME_CONFIG : A_CONTENT_OBJECT
{
	DDL::String<SG_PLAYER_NAME_MAX> family_name;
	DDL::String<SG_PLAYER_NAME_MAX> male_name;
	DDL::String<SG_PLAYER_NAME_MAX> female_name;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PLAYER_RANDOM_NAME_CONFIG>(SG_PLAYER_RANDOM_NAME_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_PLAYER_RANDOM_NAME_CONFIG>(const SG_PLAYER_RANDOM_NAME_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PLAYER_RANDOM_NAME_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_PLAYER_RANDOM_NAME_CONFIG_info;
}

struct SG_LEVEL_DROP_CONFIG : A_CONTENT_OBJECT
{
	DDL::String<100> level_name;
	_U32 exp;
	_U32 gold;
	_U32 group1_id;
	_F32 group1_rate;
	_U32 group2_id;
	_F32 group2_rate;
	_U32 group3_id;
	_F32 group3_rate;
	_U32 group4_id;
	_F32 group4_rate;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEVEL_DROP_CONFIG>(SG_LEVEL_DROP_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_LEVEL_DROP_CONFIG>(const SG_LEVEL_DROP_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_LEVEL_DROP_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_LEVEL_DROP_CONFIG_info;
}

struct SG_DROP_ITEM_BASE : A_CONTENT_OBJECT
{
	_U32 item_id;
	_U32 count;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DROP_ITEM_BASE>(SG_DROP_ITEM_BASE& Value);
	template<>
	bool BufferWriter::Write<SG_DROP_ITEM_BASE>(const SG_DROP_ITEM_BASE& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_DROP_ITEM_BASE>();
	extern STRUCT_INFO _rfl_struct_SG_DROP_ITEM_BASE_info;
}

struct SG_DROP_ITEM_CONFIG : SG_DROP_ITEM_BASE
{
	_U32 group_id;
	_F32 rate;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DROP_ITEM_CONFIG>(SG_DROP_ITEM_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_DROP_ITEM_CONFIG>(const SG_DROP_ITEM_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_DROP_ITEM_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_DROP_ITEM_CONFIG_info;
}

struct SG_ATTR_MOD_CONFIG
{
	_F32 MOD_HPAddition;
	_F32 MOD_HPPercent;
	_F32 MOD_ExtraHP;
	_F32 MOD_ATKAddition;
	_F32 MOD_ATKPercent;
	_F32 MOD_ExtraATK;
	_F32 MOD_DEFAddition;
	_F32 MOD_DEFPercent;
	_F32 MOD_ExtraDEF;
	_F32 MOD_HITAddition;
	_F32 MOD_EvasionAddition;
	_F32 MOD_CRITAddition;
	_F32 MOD_SPAddition;
	_F32 MOD_WSAddition;
	_F32 MOD_WSPercent;
	_F32 MOD_ExtraWS;
	_F32 MOD_STRAddition;
	_F32 MOD_STRPercent;
	_F32 MOD_ExtraSTR;
	_F32 MOD_INTAddition;
	_F32 MOD_INTPercent;
	_F32 MOD_ExtraINT;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ATTR_MOD_CONFIG>(SG_ATTR_MOD_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_ATTR_MOD_CONFIG>(const SG_ATTR_MOD_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_ATTR_MOD_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_ATTR_MOD_CONFIG_info;
}

struct SG_ATTR_BASE_CONFIG
{
	_F32 Base_HP;
	_F32 Base_ATK;
	_F32 Base_DEF;
	_F32 Base_HIT;
	_F32 Base_Evasion;
	_F32 Base_CRIT;
	_F32 Base_SP;
	_F32 Base_WS;
	_F32 Base_STR;
	_F32 Base_INT;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ATTR_BASE_CONFIG>(SG_ATTR_BASE_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_ATTR_BASE_CONFIG>(const SG_ATTR_BASE_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_ATTR_BASE_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_ATTR_BASE_CONFIG_info;
}

struct SG_PAWN_CONFIG
{
	SG_ATTR_BASE_CONFIG BaseConfig;
	SG_ATTR_MOD_CONFIG SigmaConfig;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PAWN_CONFIG>(SG_PAWN_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_PAWN_CONFIG>(const SG_PAWN_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PAWN_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_PAWN_CONFIG_info;
}

struct SG_ITEM_CONFIG : A_CONTENT_OBJECT
{
	_U32 item_id;
	_U32 stack_max;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ITEM_CONFIG>(SG_ITEM_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_ITEM_CONFIG>(const SG_ITEM_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_ITEM_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_ITEM_CONFIG_info;
}

struct SG_EQUIPT_ITEM_CONFIG : SG_ITEM_CONFIG
{
	SG_ATTR_MOD_CONFIG mod_config;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_EQUIPT_ITEM_CONFIG>(SG_EQUIPT_ITEM_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_EQUIPT_ITEM_CONFIG>(const SG_EQUIPT_ITEM_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_EQUIPT_ITEM_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_EQUIPT_ITEM_CONFIG_info;
}

struct SG_USABLE_ITEM_CONFIG : SG_ITEM_CONFIG
{
	DDL::String<100> functional;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_USABLE_ITEM_CONFIG>(SG_USABLE_ITEM_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_USABLE_ITEM_CONFIG>(const SG_USABLE_ITEM_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_USABLE_ITEM_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_USABLE_ITEM_CONFIG_info;
}

struct SG_GEM_ITEM_CONFIG : SG_ITEM_CONFIG
{
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GEM_ITEM_CONFIG>(SG_GEM_ITEM_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_GEM_ITEM_CONFIG>(const SG_GEM_ITEM_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GEM_ITEM_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_GEM_ITEM_CONFIG_info;
}

struct SG_ENEMY_CONFIG : A_CONTENT_OBJECT
{
	_U32 enemy_id;
	SG_PAWN_CONFIG PawnConfig;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ENEMY_CONFIG>(SG_ENEMY_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_ENEMY_CONFIG>(const SG_ENEMY_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_ENEMY_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_ENEMY_CONFIG_info;
}

struct SG_SOLDIER_LEVEL_CONFIG : A_CONTENT_OBJECT
{
	_U32 attr_id;
	_U32 level;
	SG_PAWN_CONFIG PawnConfig;
	_U32 exp;
	_S32 levelup_gold;
	_S32 levelup_rmb;
	_S32 levelup_XP;
	_U16 mod_scale;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SOLDIER_LEVEL_CONFIG>(SG_SOLDIER_LEVEL_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_SOLDIER_LEVEL_CONFIG>(const SG_SOLDIER_LEVEL_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_SOLDIER_LEVEL_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_SOLDIER_LEVEL_CONFIG_info;
}

struct SG_GENERAL_LEVEL_CONFIG : A_CONTENT_OBJECT
{
	_U32 attr_id;
	_U32 level;
	SG_PAWN_CONFIG PawnConfig;
	_S32 levelup_gold;
	_S32 levelup_rmb;
	_S32 levelup_XP;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GENERAL_LEVEL_CONFIG>(SG_GENERAL_LEVEL_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_GENERAL_LEVEL_CONFIG>(const SG_GENERAL_LEVEL_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GENERAL_LEVEL_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_GENERAL_LEVEL_CONFIG_info;
}

struct SG_SOLDIER_CONFIG : A_CONTENT_OBJECT
{
	_U32 soldier_id;
	_U32 attr_id;
	DDL::String<SG_DESCRIPTION_MAX> description;
	_S32 req_gold;
	_S32 req_rmb;
	_S32 unlock_level;
	_S32 pre_general_id;
	_S32 pre_level;
	DDL::String<ARCHETYPE_URL_LENGTH_MAX> archetype;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SOLDIER_CONFIG>(SG_SOLDIER_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_SOLDIER_CONFIG>(const SG_SOLDIER_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_SOLDIER_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_SOLDIER_CONFIG_info;
}

struct SG_GENERAL_CONFIG : A_CONTENT_OBJECT
{
	_U32 general_id;
	_U32 attr_id;
	DDL::String<SG_DESCRIPTION_MAX> description;
	_S32 req_title;
	_S32 req_gold;
	_S32 req_rmb;
	_S32 unlock_level;
	_S32 pre_general_id;
	_S32 pre_level;
	DDL::String<ARCHETYPE_URL_LENGTH_MAX> archetype;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GENERAL_CONFIG>(SG_GENERAL_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_GENERAL_CONFIG>(const SG_GENERAL_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GENERAL_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_GENERAL_CONFIG_info;
}

struct SG_EQUIPPED_UNIT_PVE
{
	DDL::String<ARCHETYPE_URL_LENGTH_MAX> ArchetypeURL;
	SG_PAWN_CONFIG PawnConfig;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_EQUIPPED_UNIT_PVE>(SG_EQUIPPED_UNIT_PVE& Value);
	template<>
	bool BufferWriter::Write<SG_EQUIPPED_UNIT_PVE>(const SG_EQUIPPED_UNIT_PVE& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_EQUIPPED_UNIT_PVE>();
	extern STRUCT_INFO _rfl_struct_SG_EQUIPPED_UNIT_PVE_info;
}

struct SG_PLAYER_PVE
{
	DDL::String<ARCHETYPE_URL_LENGTH_MAX> ArchetypeURL;
	SG_PAWN_CONFIG PawnConfig;
	DDL::Array<SG_EQUIPPED_UNIT_PVE, 2> EquippedGenerals;
	DDL::Array<SG_EQUIPPED_UNIT_PVE, 3> EquippedSoldiers;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PLAYER_PVE>(SG_PLAYER_PVE& Value);
	template<>
	bool BufferWriter::Write<SG_PLAYER_PVE>(const SG_PLAYER_PVE& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PLAYER_PVE>();
	extern STRUCT_INFO _rfl_struct_SG_PLAYER_PVE_info;
}

struct SG_EQUIP_SLOTS
{
	A_UUID head;
	A_UUID hand;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_EQUIP_SLOTS>(SG_EQUIP_SLOTS& Value);
	template<>
	bool BufferWriter::Write<SG_EQUIP_SLOTS>(const SG_EQUIP_SLOTS& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_EQUIP_SLOTS>();
	extern STRUCT_INFO _rfl_struct_SG_EQUIP_SLOTS_info;
}

struct SG_GENERAL : A_LIVE_OBJECT
{
	_U32 general_id;
	_U16 level;
	_U32 exp;
	SG_EQUIP_SLOTS equip_slots;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GENERAL>(SG_GENERAL& Value);
	template<>
	bool BufferWriter::Write<SG_GENERAL>(const SG_GENERAL& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GENERAL>();
	extern STRUCT_INFO _rfl_struct_SG_GENERAL_info;
}

struct SG_SOLDIER : A_LIVE_OBJECT
{
	_U32 soldier_id;
	_U16 level;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SOLDIER>(SG_SOLDIER& Value);
	template<>
	bool BufferWriter::Write<SG_SOLDIER>(const SG_SOLDIER& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_SOLDIER>();
	extern STRUCT_INFO _rfl_struct_SG_SOLDIER_info;
}

struct SG_PLAYER : SG_GENERAL
{
	DDL::String<SG_PLAYERNAME_LENMAX> nick;
	_U32 gold;
	_U32 rmb;
	DDL::Array<_U32, 2> equip_generals;
	DDL::Array<_U32, 3> equip_soldiers;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PLAYER>(SG_PLAYER& Value);
	template<>
	bool BufferWriter::Write<SG_PLAYER>(const SG_PLAYER& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PLAYER>();
	extern STRUCT_INFO _rfl_struct_SG_PLAYER_info;
}

struct SG_ITEM : A_LIVE_OBJECT
{
	_U32 item_id;
	_U32 count;
	_U32 expired_time;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ITEM>(SG_ITEM& Value);
	template<>
	bool BufferWriter::Write<SG_ITEM>(const SG_ITEM& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_ITEM>();
	extern STRUCT_INFO _rfl_struct_SG_ITEM_info;
}

struct SG_EQUIPT_ITEM : SG_ITEM
{
	SG_ATTR_MOD_CONFIG mod_config;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_EQUIPT_ITEM>(SG_EQUIPT_ITEM& Value);
	template<>
	bool BufferWriter::Write<SG_EQUIPT_ITEM>(const SG_EQUIPT_ITEM& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_EQUIPT_ITEM>();
	extern STRUCT_INFO _rfl_struct_SG_EQUIPT_ITEM_info;
}

struct SG_USABLE_ITEM : SG_ITEM
{
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_USABLE_ITEM>(SG_USABLE_ITEM& Value);
	template<>
	bool BufferWriter::Write<SG_USABLE_ITEM>(const SG_USABLE_ITEM& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_USABLE_ITEM>();
	extern STRUCT_INFO _rfl_struct_SG_USABLE_ITEM_info;
}

struct SG_GEM_ITEM : SG_ITEM
{
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GEM_ITEM>(SG_GEM_ITEM& Value);
	template<>
	bool BufferWriter::Write<SG_GEM_ITEM>(const SG_GEM_ITEM& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GEM_ITEM>();
	extern STRUCT_INFO _rfl_struct_SG_GEM_ITEM_info;
}

struct SG_SERVER_INFO
{
	_U32 server_id;
	DDL::String<100> server_name;
	_U32 server_state;
	DDL::String<100> avatar_nick;
	_U32 general_id;
	_U32 level;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SERVER_INFO>(SG_SERVER_INFO& Value);
	template<>
	bool BufferWriter::Write<SG_SERVER_INFO>(const SG_SERVER_INFO& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_SERVER_INFO>();
	extern STRUCT_INFO _rfl_struct_SG_SERVER_INFO_info;
}

class SGGAME_C2S;

class SGGAME_S2C;

namespace DDLStub
{

	template<typename CALLER, typename CLASS>
	class SGGAME_C2S : public DDLStub<CALLER, CLASS>
	{
	public:
		SGGAME_C2S(CLASS* Class) : DDLStub<CALLER, CLASS>(Class)
		{
		}

		virtual bool Dispatcher(CALLER* Caller, _U16 fid, DDL::BufferReader& Buf)
		{
			if(fid==0)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->Ping(Caller);
				return true;
			}
			if(fid==1)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->GetServerList(Caller);
				return true;
			}
			if(fid==2)
			{
				_U32 _prefix_server_id;

				// <_U32> <server_id> <> <>;
				if(!Buf.Read(_prefix_server_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EnterServer(Caller, _prefix_server_id);
				return true;
			}
			if(fid==3)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryAvatar(Caller);
				return true;
			}
			if(fid==4)
			{
				_U32 __length;
				char* _prefix_nick;
				_U32 _prefix_general_id;

				// <string> <nick> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_nick = (char*)alloca(sizeof(_prefix_nick[0])*(__length+1));
				if(!_prefix_nick) return false;
				if(!Buf.ReadBuffer(_prefix_nick, (unsigned int)sizeof(_prefix_nick[0])*__length)) return false;
				_prefix_nick[__length] = '\0';
				// <_U32> <general_id> <> <>;
				if(!Buf.Read(_prefix_general_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->CreateAvatar(Caller, _prefix_nick, _prefix_general_id);
				return true;
			}
			if(fid==5)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->DeleteAvatar(Caller);
				return true;
			}
			if(fid==6)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EnterGame(Caller);
				return true;
			}
			if(fid==7)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->LeaveGame(Caller);
				return true;
			}
			if(fid==8)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryPlayer(Caller);
				return true;
			}
			if(fid==9)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryGenerals(Caller);
				return true;
			}
			if(fid==10)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QuerySoldiers(Caller);
				return true;
			}
			if(fid==11)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryBag(Caller);
				return true;
			}
			if(fid==12)
			{
				_U32 _prefix_general_id;
				A_UUID _prefix_item_uuid;

				// <_U32> <general_id> <> <>;
				if(!Buf.Read(_prefix_general_id)) return false;
				// <A_UUID> <item_uuid> <> <>;
				if(!Buf.Read(_prefix_item_uuid)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EquipItem(Caller, _prefix_general_id, _prefix_item_uuid);
				return true;
			}
			if(fid==13)
			{
				_U32 __length;
				char* _prefix_name;

				// <string> <name> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_name = (char*)alloca(sizeof(_prefix_name[0])*(__length+1));
				if(!_prefix_name) return false;
				if(!Buf.ReadBuffer(_prefix_name, (unsigned int)sizeof(_prefix_name[0])*__length)) return false;
				_prefix_name[__length] = '\0';

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->BeginBattle(Caller, _prefix_name);
				return true;
			}
			if(fid==14)
			{
				_U32 __length;
				char* _prefix_name;
				_U32 _prefix_result;

				// <string> <name> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_name = (char*)alloca(sizeof(_prefix_name[0])*(__length+1));
				if(!_prefix_name) return false;
				if(!Buf.ReadBuffer(_prefix_name, (unsigned int)sizeof(_prefix_name[0])*__length)) return false;
				_prefix_name[__length] = '\0';
				// <_U32> <result> <> <>;
				if(!Buf.Read(_prefix_result)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EndBattle(Caller, _prefix_name, _prefix_result);
				return true;
			}
			return false;
		}
	};

}

namespace DDLProxy
{

	template<typename CLIENT, typename BUFFER>
	class SGGAME_C2S : public DDLProxy<CLIENT, BUFFER>
	{
	public:
		SGGAME_C2S(CLIENT* Client) : DDLProxy<CLIENT, BUFFER>(Client, DDLReflect::GetClassID<typename ::SGGAME_C2S>())
		{
		}

		static SGGAME_C2S<CLIENT, BUFFER> Get(CLIENT* Client)
		{
			SGGAME_C2S<CLIENT, BUFFER> Proxy(Client);
			return Proxy;
		}

		bool Ping()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 0, Buf);
		}

		bool GetServerList()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 1, Buf);
		}

		bool EnterServer(_U32 server_id)
		{
			BUFFER Buf;
			// <_U32> <server_id> <> <>
			if(!Buf.Write(server_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 2, Buf);
		}

		bool QueryAvatar()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 3, Buf);
		}

		bool CreateAvatar(const char* nick, _U32 general_id)
		{
			BUFFER Buf;
			_U32 __length;
			// <string> <nick> <> <>
			__length = DDL::StringLength(nick);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(nick, (unsigned int)sizeof(nick[0])*__length)) return false;
			// <_U32> <general_id> <> <>
			if(!Buf.Write(general_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 4, Buf);
		}

		bool DeleteAvatar()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 5, Buf);
		}

		bool EnterGame()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 6, Buf);
		}

		bool LeaveGame()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 7, Buf);
		}

		bool QueryPlayer()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 8, Buf);
		}

		bool QueryGenerals()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 9, Buf);
		}

		bool QuerySoldiers()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 10, Buf);
		}

		bool QueryBag()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 11, Buf);
		}

		bool EquipItem(_U32 general_id, const A_UUID& item_uuid)
		{
			BUFFER Buf;
			// <_U32> <general_id> <> <>
			if(!Buf.Write(general_id)) return false;
			// <A_UUID> <item_uuid> <> <>
			if(!Buf.Write(item_uuid)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 12, Buf);
		}

		bool BeginBattle(const char* name)
		{
			BUFFER Buf;
			_U32 __length;
			// <string> <name> <> <>
			__length = DDL::StringLength(name);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(name, (unsigned int)sizeof(name[0])*__length)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 13, Buf);
		}

		bool EndBattle(const char* name, _U32 result)
		{
			BUFFER Buf;
			_U32 __length;
			// <string> <name> <> <>
			__length = DDL::StringLength(name);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(name, (unsigned int)sizeof(name[0])*__length)) return false;
			// <_U32> <result> <> <>
			if(!Buf.Write(result)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 14, Buf);
		}
	};

}

namespace DDLReflect
{
	template<>
	const CLASS_INFO* GetClass<SGGAME_C2S>();
}

namespace DDLStub
{

	template<typename CALLER, typename CLASS>
	class SGGAME_S2C : public DDLStub<CALLER, CLASS>
	{
	public:
		SGGAME_S2C(CLASS* Class) : DDLStub<CALLER, CLASS>(Class)
		{
		}

		virtual bool Dispatcher(CALLER* Caller, _U16 fid, DDL::BufferReader& Buf)
		{
			if(fid==0)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->Pong(Caller);
				return true;
			}
			if(fid==1)
			{
				_U32 __length;
				SG_SERVER_INFO* _prefix_infos;
				_U32 _prefix_count;

				// <SG_SERVER_INFO> <infos> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_infos = (SG_SERVER_INFO*)alloca(sizeof(_prefix_infos[0])*__length);
				if(!_prefix_infos) return false;
				if(!Buf.ReadPointer(_prefix_infos, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->GetServerListResult(Caller, _prefix_infos, _prefix_count);
				return true;
			}
			if(fid==2)
			{
				_U32 _prefix_code;

				// <_U32> <code> <> <>;
				if(!Buf.Read(_prefix_code)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryAvatarFailed(Caller, _prefix_code);
				return true;
			}
			if(fid==3)
			{
				SG_PLAYER _prefix_player;

				// <SG_PLAYER> <player> <> <>;
				if(!Buf.Read(_prefix_player)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryAvatarResult(Caller, _prefix_player);
				return true;
			}
			if(fid==4)
			{
				_U32 _prefix_code;

				// <_U32> <code> <> <>;
				if(!Buf.Read(_prefix_code)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->CreateAvatarResult(Caller, _prefix_code);
				return true;
			}
			if(fid==5)
			{
				SG_PLAYER _prefix_player;

				// <SG_PLAYER> <player> <> <>;
				if(!Buf.Read(_prefix_player)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryPlayerResult(Caller, _prefix_player);
				return true;
			}
			if(fid==6)
			{
				_U32 __length;
				SG_GENERAL* _prefix_generals;
				_U32 _prefix_count;

				// <SG_GENERAL> <generals> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_generals = (SG_GENERAL*)alloca(sizeof(_prefix_generals[0])*__length);
				if(!_prefix_generals) return false;
				if(!Buf.ReadPointer(_prefix_generals, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryGeneralResult(Caller, _prefix_generals, _prefix_count);
				return true;
			}
			if(fid==7)
			{
				_U32 __length;
				SG_SOLDIER* _prefix_soldiers;
				_U32 _prefix_count;

				// <SG_SOLDIER> <soldiers> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_soldiers = (SG_SOLDIER*)alloca(sizeof(_prefix_soldiers[0])*__length);
				if(!_prefix_soldiers) return false;
				if(!Buf.ReadPointer(_prefix_soldiers, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QuerySoldierResult(Caller, _prefix_soldiers, _prefix_count);
				return true;
			}
			if(fid==8)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryBagBegin(Caller);
				return true;
			}
			if(fid==9)
			{
				_U32 __length;
				SG_EQUIPT_ITEM* _prefix_items;
				_U32 _prefix_count;

				// <SG_EQUIPT_ITEM> <items> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_items = (SG_EQUIPT_ITEM*)alloca(sizeof(_prefix_items[0])*__length);
				if(!_prefix_items) return false;
				if(!Buf.ReadPointer(_prefix_items, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryBagEquipt(Caller, _prefix_items, _prefix_count);
				return true;
			}
			if(fid==10)
			{
				_U32 __length;
				SG_USABLE_ITEM* _prefix_items;
				_U32 _prefix_count;

				// <SG_USABLE_ITEM> <items> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_items = (SG_USABLE_ITEM*)alloca(sizeof(_prefix_items[0])*__length);
				if(!_prefix_items) return false;
				if(!Buf.ReadPointer(_prefix_items, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryBagUsable(Caller, _prefix_items, _prefix_count);
				return true;
			}
			if(fid==11)
			{
				_U32 __length;
				SG_GEM_ITEM* _prefix_items;
				_U32 _prefix_count;

				// <SG_GEM_ITEM> <items> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_items = (SG_GEM_ITEM*)alloca(sizeof(_prefix_items[0])*__length);
				if(!_prefix_items) return false;
				if(!Buf.ReadPointer(_prefix_items, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryBagGen(Caller, _prefix_items, _prefix_count);
				return true;
			}
			if(fid==12)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryBagEnd(Caller);
				return true;
			}
			if(fid==13)
			{
				SG_PLAYER_PVE _prefix_PlayerPVE;

				// <SG_PLAYER_PVE> <PlayerPVE> <> <>;
				if(!Buf.Read(_prefix_PlayerPVE)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->BeginBattleResult(Caller, _prefix_PlayerPVE);
				return true;
			}
			if(fid==14)
			{
				_U32 __length;
				_U32 _prefix_level;
				_U32 _prefix_exp;
				_U32 _prefix_gold;
				SG_DROP_ITEM_CONFIG* _prefix_drops;
				_U32 _prefix_drop_count;

				// <_U32> <level> <> <>;
				if(!Buf.Read(_prefix_level)) return false;
				// <_U32> <exp> <> <>;
				if(!Buf.Read(_prefix_exp)) return false;
				// <_U32> <gold> <> <>;
				if(!Buf.Read(_prefix_gold)) return false;
				// <SG_DROP_ITEM_CONFIG> <drops> <> <drop_count>;
				if(!Buf.Read(__length)) return false;
				_prefix_drops = (SG_DROP_ITEM_CONFIG*)alloca(sizeof(_prefix_drops[0])*__length);
				if(!_prefix_drops) return false;
				if(!Buf.ReadPointer(_prefix_drops, __length)) return false;
				// <_U32> <drop_count> <> <>;
				if(!Buf.Read(_prefix_drop_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EndBattleResult(Caller, _prefix_level, _prefix_exp, _prefix_gold, _prefix_drops, _prefix_drop_count);
				return true;
			}
			return false;
		}
	};

}

namespace DDLProxy
{

	template<typename CLIENT, typename BUFFER>
	class SGGAME_S2C : public DDLProxy<CLIENT, BUFFER>
	{
	public:
		SGGAME_S2C(CLIENT* Client) : DDLProxy<CLIENT, BUFFER>(Client, DDLReflect::GetClassID<typename ::SGGAME_S2C>())
		{
		}

		static SGGAME_S2C<CLIENT, BUFFER> Get(CLIENT* Client)
		{
			SGGAME_S2C<CLIENT, BUFFER> Proxy(Client);
			return Proxy;
		}

		bool Pong()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 0, Buf);
		}

		bool GetServerListResult(const SG_SERVER_INFO* infos, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_SERVER_INFO> <infos> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(infos, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 1, Buf);
		}

		bool QueryAvatarFailed(_U32 code)
		{
			BUFFER Buf;
			// <_U32> <code> <> <>
			if(!Buf.Write(code)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 2, Buf);
		}

		bool QueryAvatarResult(const SG_PLAYER& player)
		{
			BUFFER Buf;
			// <SG_PLAYER> <player> <> <>
			if(!Buf.Write(player)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 3, Buf);
		}

		bool CreateAvatarResult(_U32 code)
		{
			BUFFER Buf;
			// <_U32> <code> <> <>
			if(!Buf.Write(code)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 4, Buf);
		}

		bool QueryPlayerResult(const SG_PLAYER& player)
		{
			BUFFER Buf;
			// <SG_PLAYER> <player> <> <>
			if(!Buf.Write(player)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 5, Buf);
		}

		bool QueryGeneralResult(const SG_GENERAL* generals, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_GENERAL> <generals> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(generals, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 6, Buf);
		}

		bool QuerySoldierResult(const SG_SOLDIER* soldiers, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_SOLDIER> <soldiers> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(soldiers, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 7, Buf);
		}

		bool QueryBagBegin()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 8, Buf);
		}

		bool QueryBagEquipt(const SG_EQUIPT_ITEM* items, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_EQUIPT_ITEM> <items> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(items, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 9, Buf);
		}

		bool QueryBagUsable(const SG_USABLE_ITEM* items, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_USABLE_ITEM> <items> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(items, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 10, Buf);
		}

		bool QueryBagGen(const SG_GEM_ITEM* items, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_GEM_ITEM> <items> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(items, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 11, Buf);
		}

		bool QueryBagEnd()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 12, Buf);
		}

		bool BeginBattleResult(const SG_PLAYER_PVE& PlayerPVE)
		{
			BUFFER Buf;
			// <SG_PLAYER_PVE> <PlayerPVE> <> <>
			if(!Buf.Write(PlayerPVE)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 13, Buf);
		}

		bool EndBattleResult(_U32 level, _U32 exp, _U32 gold, const SG_DROP_ITEM_CONFIG* drops, _U32 drop_count)
		{
			BUFFER Buf;
			_U32 __length;
			// <_U32> <level> <> <>
			if(!Buf.Write(level)) return false;
			// <_U32> <exp> <> <>
			if(!Buf.Write(exp)) return false;
			// <_U32> <gold> <> <>
			if(!Buf.Write(gold)) return false;
			// <SG_DROP_ITEM_CONFIG> <drops> <> <drop_count>
			__length = (_U16)(drop_count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(drops, __length)) return false;
			// <_U32> <drop_count> <> <>
			if(!Buf.Write(drop_count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 14, Buf);
		}
	};

}

namespace DDLReflect
{
	template<>
	const CLASS_INFO* GetClass<SGGAME_S2C>();
}


#pragma pack(pop)

#endif
