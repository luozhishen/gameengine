////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED. DO NOT MODIFY! //
////////////////////////////////////////////////

#ifndef __SGGAMEDDL_DDL_CODEGEN__
#define __SGGAMEDDL_DDL_CODEGEN__

#include <AtlasDefines.h>
#include <AtlasSTL.h>
#include <AtlasUUID.h>
#include <DDL.h>
#include <DDLProxy.h>
#include <DDLStub.h>
#include <DDLReflect.h>

#pragma pack(push)
#pragma pack(4)

#include "../../LibCommon/CommonDDL.h"

const _U8 SG_CLIENT_STATUS_READY = 0;

const _U8 SG_CLIENT_STATUS_UNINIT = 1;

const _U8 SG_CLIENT_STATUS_SYNCING = 2;

const _U8 SG_CLIENT_STATUS_DISCONNECT = 3;

const _U8 SG_CLIENT_STATUS_TERMINED = 4;

const _U8 SG_CLIENT_STATUS_UNKOWN = 5;

const _U8 SG_CLIENT_PING_TIMEOUT = 10;

const _U8 SG_CLIENT_EVENT_POLL_TIMEOUT = 10;

const _U32 ARCHETYPE_URL_LENGTH_MAX = 256;

const _U32 SG_DESCRIPTION_MAX = 512;

const _U32 SG_INVALID_SERVER_ID = 255;

const _U32 SG_ICON_MAX = 256;

const _U32 SG_MAP_URL_MAX = 256;

const _U8 SG_SYNC_NONE = 0;

const _U8 SG_SYNC_PLAYER = 1;

const _U8 SG_SYNC_Generals = 2;

const _U8 SG_SYNC_SOLDIERS = 3;

const _U8 SG_SYNC_BAG = 4;

const _U8 SG_SYNC_EQUIPT = 5;

const _U8 SG_SYNC_USABLE = 6;

const _U8 SG_SYNC_GEM = 7;

const _U8 SG_SYNC_PLAYERQUEST = 9;

const _U32 SG_PLAYER_NAME_MAX = 32;

const _U32 SG_PLAYER_TITLE_NAME_MAX = 12;

const _U32 SG_PLAYER_WUSHENG_MALE_ID = 11001;

const _U32 SG_PLAYER_WUSHENG_FEMALE_ID = 11002;

const _U32 SG_SOLDIER_NAME_MAX = 12;

const _U32 SG_LEVEL_SOLDIERS_INFO_MAX = 6;

const _U32 SG_SKILL_NAME_MAX = 10;

const _U32 SG_SKILL_DESC_MAX = 256;

const _U32 SG_GENERAL_NOT_EMPLOYEE = 0;

const _U32 SG_GENERAL_EMPLOYEED_OUTQUEUE = 1;

const _U32 SG_GENERAL_EMPLOYEED_INQUEUE = 2;

const _U32 SG_ITEM_USABLE_ID_START = 10000;

const _U32 SG_ITEM_USABLE_ID_END = 19999;

const _U32 SG_ITEM_MATERIAL_ID_START = 20000;

const _U32 SG_ITEM_MATERIAL_ID_END = 29999;

const _U32 SG_ITEM_GEM_ID_START = 30000;

const _U32 SG_ITEM_GEM_ID_END = 39999;

const _U32 SG_ITEM_EQUIPT_ID_START = 40000;

const _U32 SG_ITEM_EQUIPT_ID_END = 49999;

const _U32 SG_ITEM_NAME_MAX = 32;

const _U32 SG_MATERIAL_DESC_MAX = 256;

const _U32 SG_GEM_DESC_MAX = 256;

const _U32 SG_EQUIPT_TEX_MAX = 256;

const _U32 SG_EUQIPT_GEM_SLOTS_MAX = 8;

const _U32 SG_EQUIPT_GENERAL_MAX = 2;

const _U32 SG_EQUIPT_SOLDIER_MAX = 3;

const _U8 SG_EQUIPT_TYPE_WEAPON_JINZHAN = 0;

const _U8 SG_EQUIPT_TYPE_WEAPON_YUANCHENG = 1;

const _U8 SG_EQUIPT_TYPE_WEAPON_FASHU = 2;

const _U8 SG_EQUIPT_TYPE_HEAD = 3;

const _U8 SG_EQUIPT_TYPE_SHOULDER = 4;

const _U8 SG_EQUIPT_TYPE_CHEST = 5;

const _U8 SG_EQUIPT_TYPE_LEG = 6;

const _U8 SG_EQUIPT_TYPE_DECORATION = 7;

const _U32 SG_QUEST_DIALOG_MAX = 512;

const _U32 SG_QUEST_NAME_MAX = 32;

const _U32 SG_QUEST_URL_MAX = 128;

const _U32 SG_QUEST_COND_MAX = 128;

const _U32 SG_QUEST_GOAL_MAX = 512;

const _U32 SG_QUEST_GOAL_DESC_MAX = 256;

const _U8 SG_QUEST_STATUS_NOTAVALIABLE = 0;

const _U8 SG_QUEST_STATUS_AVALIABLE = 1;

const _U8 SG_QUEST_STATUS_AVALIABLE_NEXT_LEVEL = 2;

const _U8 SG_QUEST_STATUS_WIP = 3;

const _U8 SG_QUEST_STATUS_READY = 4;

const _U8 SG_QUEST_STATUS_FINISHED = 5;

const _U32 SG_TITLE_GENERAL_DESC = 512;

const _U32 SG_TITLE_PROP_DESC = 768;

const _U32 SG_TITLE_ACRHTYPE_MAX = 512;

const _U32 SG_LEAGUE_NAME_MAX = 32;

const _U32 SG_LEAGUE_NOTICE_MAX = 512;

const _U32 SG_LEAGUE_LOG_MAX = 256;

const _U32 SG_GOODS_GROUP_NAME_MAX = 128;

const _U32 SG_INSTANCE_REWARD_DES_MAX = 128;

const _U32 SG_LEAGUE_APPLY_MAX = 10;

const _U8 SG_LEAGUE_CREATE_SUCC = 0;

const _U8 SG_LEAGUE_CREATE_FAILED = 1;

const _U8 SG_LEAUGE_WINE_NAME_MAX = 32;

const _U32 SG_DAILY_ACTION_TYPE_MAX = 12;

const _U8 SG_DAILY_ACTION_TYPE_PAID = 0;

const _U8 SG_DAILY_ACTION_TYPE_PVP_LEVEL = 1;

const _U8 SG_DAILY_ACTION_TYPE_PVP_BATTLE = 2;

const _U8 SG_DAILY_ACTION_TYPE_PVP_REWARD = 3;

const _U8 SG_DAILY_ACTION_TYPE_SALARY = 4;

const _U32 SG_DAILY_ACTION_NAME_MAX = 128;

const _U32 SG_DAILY_ACTION_DESC = 512;

const _U32 SG_VIP_ICON_MAX = 256;

const _U32 SG_TURBO_CHARPTER_NAME_MAX = 128;

const _U32 SG_TURBO_UNLOCK_SKILL_MAX = 15;

const _U32 SG_TURBO_EQUIP_SKILL_MAX = 3;

struct SG_TURBO_CONFIG : A_CONTENT_OBJECT
{
	_U32 general_id;
	_U32 turbo_level;
	DDL::String<SG_SKILL_NAME_MAX> skill_name;
	_U8 charpter_id;
	DDL::String<SG_TURBO_CHARPTER_NAME_MAX> charpter_name;
	_U32 req_wake_pt;
	_U8 skill_type;
	_U32 HP;
	_U32 POW;
	_U32 INT;
	_F32 ATK;
	_F32 DEF;
	_F32 HIT;
	_F32 EVASION;
	_F32 CRIT;
	_F32 X;
	_F32 Y;
	DDL::String<ARCHETYPE_URL_LENGTH_MAX> skill_archetype;
	DDL::String<SG_SKILL_DESC_MAX> skill_desc;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_TURBO_CONFIG>(SG_TURBO_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_TURBO_CONFIG>(const SG_TURBO_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_TURBO_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_TURBO_CONFIG_info;
}

struct SG_TURBO_SKILL_SLOT
{
	DDL::String<ARCHETYPE_URL_LENGTH_MAX> skill_archetype1;
	DDL::String<ARCHETYPE_URL_LENGTH_MAX> skill_archetype2;
	DDL::String<ARCHETYPE_URL_LENGTH_MAX> skill_archetype3;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_TURBO_SKILL_SLOT>(SG_TURBO_SKILL_SLOT& Value);
	template<>
	bool BufferWriter::Write<SG_TURBO_SKILL_SLOT>(const SG_TURBO_SKILL_SLOT& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_TURBO_SKILL_SLOT>();
	extern STRUCT_INFO _rfl_struct_SG_TURBO_SKILL_SLOT_info;
}

struct SG_VIP_CONFIG : A_CONTENT_OBJECT
{
	_U32 vip_level;
	_U32 recharge_rmb;
	_U32 pay_times;
	_U32 energy_times;
	_U32 energy_upper;
	_U32 reset_instance_times;
	_U8 hangup_free;
	_U8 enhance_free;
	DDL::String<SG_VIP_ICON_MAX> res;
	_U32 U;
	_U32 V;
	_U32 UL;
	_U32 VL;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_VIP_CONFIG>(SG_VIP_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_VIP_CONFIG>(const SG_VIP_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_VIP_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_VIP_CONFIG_info;
}

struct SG_PAY_CONSUME_CONFIG : A_CONTENT_OBJECT
{
	_U32 apply_times;
	_U32 consume_rmb;
	_F32 reward_rate;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PAY_CONSUME_CONFIG>(SG_PAY_CONSUME_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_PAY_CONSUME_CONFIG>(const SG_PAY_CONSUME_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PAY_CONSUME_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_PAY_CONSUME_CONFIG_info;
}

struct SG_PAY_REWARD_CONFIG : A_CONTENT_OBJECT
{
	_U32 player_level;
	_U32 reward_gold;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PAY_REWARD_CONFIG>(SG_PAY_REWARD_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_PAY_REWARD_CONFIG>(const SG_PAY_REWARD_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PAY_REWARD_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_PAY_REWARD_CONFIG_info;
}

struct SG_INSTANCE_CONFIG : A_CONTENT_OBJECT
{
	_U32 instance_id;
	_U8 total_maps;
	DDL::String<SG_INSTANCE_REWARD_DES_MAX> reward_normal1;
	DDL::String<SG_INSTANCE_REWARD_DES_MAX> reward_normal2;
	DDL::String<SG_INSTANCE_REWARD_DES_MAX> reward_hard1;
	DDL::String<SG_INSTANCE_REWARD_DES_MAX> reward_hard2;
	_U32 reset_rmb;
	_U32 wake_pt;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_INSTANCE_CONFIG>(SG_INSTANCE_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_INSTANCE_CONFIG>(const SG_INSTANCE_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_INSTANCE_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_INSTANCE_CONFIG_info;
}

struct SG_INSTANCE_INFO : A_LIVE_OBJECT
{
	_U32 instance_id;
	_U8 difficulty;
	_S8 progress;
	_U8 num_today;
	_U8 normal_completed;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_INSTANCE_INFO>(SG_INSTANCE_INFO& Value);
	template<>
	bool BufferWriter::Write<SG_INSTANCE_INFO>(const SG_INSTANCE_INFO& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_INSTANCE_INFO>();
	extern STRUCT_INFO _rfl_struct_SG_INSTANCE_INFO_info;
}

struct SG_LEAGUE_CONFIG : A_CONTENT_OBJECT
{
	_U32 league_level;
	_U32 XP;
	_U32 members_count;
	_F32 rmb_xp_rate;
	_F32 rmb_contribution_rate;
	_F32 energy_xp_rate;
	_F32 energy_contribution_rate;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_CONFIG>(SG_LEAGUE_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_LEAGUE_CONFIG>(const SG_LEAGUE_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_LEAGUE_CONFIG_info;
}

struct SG_LEAGUE_POW_CONFIG : A_CONTENT_OBJECT
{
	_U8 pow_type;
	_U8 master_pow;
	_U8 vice_master_pow;
	_U8 member_pow;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_POW_CONFIG>(SG_LEAGUE_POW_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_LEAGUE_POW_CONFIG>(const SG_LEAGUE_POW_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_POW_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_LEAGUE_POW_CONFIG_info;
}

struct SG_LEAGUE_MEMBER_SETTING_CONFIG : A_CONTENT_OBJECT
{
	_U32 master_num;
	_U32 vice_master_num;
	_U32 member_num;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_MEMBER_SETTING_CONFIG>(SG_LEAGUE_MEMBER_SETTING_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_LEAGUE_MEMBER_SETTING_CONFIG>(const SG_LEAGUE_MEMBER_SETTING_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_MEMBER_SETTING_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_LEAGUE_MEMBER_SETTING_CONFIG_info;
}

struct SG_LEAGUE_ACTION_CONFIG : A_CONTENT_OBJECT
{
	_U32 action_id;
	DDL::String<SG_DAILY_ACTION_NAME_MAX> action_name;
	DDL::String<SG_DAILY_ACTION_DESC> desc;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_ACTION_CONFIG>(SG_LEAGUE_ACTION_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_LEAGUE_ACTION_CONFIG>(const SG_LEAGUE_ACTION_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_ACTION_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_LEAGUE_ACTION_CONFIG_info;
}

struct SG_LEAGUE_TOAST_CONFIG : A_CONTENT_OBJECT
{
	_U8 wine_id;
	DDL::String<SG_LEAGUE_LOG_MAX> wine_name;
	_U32 req_vid;
	_U32 consume_gold;
	_U32 consume_rmb;
	_U32 reward_reputation;
	_U32 reward_league_xp;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_TOAST_CONFIG>(SG_LEAGUE_TOAST_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_LEAGUE_TOAST_CONFIG>(const SG_LEAGUE_TOAST_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_TOAST_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_LEAGUE_TOAST_CONFIG_info;
}

struct SG_PVP_RECORD_ITEM : A_LIVE_OBJECT
{
	_U32 challenger;
	_U32 defender;
	DDL::String<SG_PLAYER_NAME_MAX> defender_name;
	_U8 type;
	_U32 time;
	_U32 param;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PVP_RECORD_ITEM>(SG_PVP_RECORD_ITEM& Value);
	template<>
	bool BufferWriter::Write<SG_PVP_RECORD_ITEM>(const SG_PVP_RECORD_ITEM& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PVP_RECORD_ITEM>();
	extern STRUCT_INFO _rfl_struct_SG_PVP_RECORD_ITEM_info;
}

struct SG_PVP_INFO_CONFIG : A_CONTENT_OBJECT
{
	_U32 server_level_lower;
	_U32 server_level_upper;
	_U32 lower;
	_U32 upper;
	_U32 span;
	_U32 daily_reputation;
	_U32 reward_gold;
	_U32 reward_item;
	_U32 reward_item_count;
	_U32 succ_reputation;
	_U32 failed_reputation;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PVP_INFO_CONFIG>(SG_PVP_INFO_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_PVP_INFO_CONFIG>(const SG_PVP_INFO_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PVP_INFO_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_PVP_INFO_CONFIG_info;
}

struct SG_PVP_SETTING_CONFIG : A_CONTENT_OBJECT
{
	_U32 increase_pay_rmb;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PVP_SETTING_CONFIG>(SG_PVP_SETTING_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_PVP_SETTING_CONFIG>(const SG_PVP_SETTING_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PVP_SETTING_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_PVP_SETTING_CONFIG_info;
}

struct SG_GOODS_CONFIG : A_CONTENT_OBJECT
{
	_U32 good_id;
	_U8 display_condition;
	_U32 display_param1;
	_U32 display_param2;
	_U8 buy_condition;
	_U32 buy_param1;
	_U32 buy_param2;
	_U32 item_id;
	_U32 count;
	_U8 price_condition;
	_U32 price_param1;
	_U32 price_param2;
	_U32 price_discount;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GOODS_CONFIG>(SG_GOODS_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_GOODS_CONFIG>(const SG_GOODS_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GOODS_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_GOODS_CONFIG_info;
}

struct SG_GOODS_GROUP_CONFIG : A_CONTENT_OBJECT
{
	_U32 goods_group_id;
	_U32 good_id;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GOODS_GROUP_CONFIG>(SG_GOODS_GROUP_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_GOODS_GROUP_CONFIG>(const SG_GOODS_GROUP_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GOODS_GROUP_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_GOODS_GROUP_CONFIG_info;
}

struct SG_SHOP_CONFIG : A_CONTENT_OBJECT
{
	_U32 shop_id;
	DDL::String<SG_GOODS_GROUP_NAME_MAX> goods_group_name;
	_U32 goods_group_id;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SHOP_CONFIG>(SG_SHOP_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_SHOP_CONFIG>(const SG_SHOP_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_SHOP_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_SHOP_CONFIG_info;
}

struct SG_LEAGUE : A_LIVE_OBJECT
{
	_U32 league_id;
	DDL::String<SG_LEAGUE_NAME_MAX> league_name;
	_U32 rank;
	_U32 member_num;
	_U32 level;
	_U32 exp;
	_U32 create_time;
	_U32 owner_id;
	DDL::String<SG_PLAYER_NAME_MAX> owner_name;
	DDL::String<SG_LEAGUE_NOTICE_MAX> post_content;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE>(SG_LEAGUE& Value);
	template<>
	bool BufferWriter::Write<SG_LEAGUE>(const SG_LEAGUE& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE>();
	extern STRUCT_INFO _rfl_struct_SG_LEAGUE_info;
}

struct SG_LEAGUE_MEMBER : A_LIVE_OBJECT
{
	_U32 league_id;
	_U32 member_id;
	_U32 general_id;
	DDL::String<SG_PLAYER_NAME_MAX> member_name;
	_U32 member_level;
	_U32 member_battle_value;
	_U32 pvp_rank;
	_U8 position;
	_U32 contribution_value;
	_U32 total_contribution_value;
	_U32 last_ol_time;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_MEMBER>(SG_LEAGUE_MEMBER& Value);
	template<>
	bool BufferWriter::Write<SG_LEAGUE_MEMBER>(const SG_LEAGUE_MEMBER& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_MEMBER>();
	extern STRUCT_INFO _rfl_struct_SG_LEAGUE_MEMBER_info;
}

struct SG_LEAGUE_APPLYER : A_LIVE_OBJECT
{
	_U32 applyer_id;
	DDL::String<SG_PLAYER_NAME_MAX> applyer_name;
	_U32 general_id;
	_U32 level;
	_U32 rank;
	_U32 league_id;
	_U8 reason;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_APPLYER>(SG_LEAGUE_APPLYER& Value);
	template<>
	bool BufferWriter::Write<SG_LEAGUE_APPLYER>(const SG_LEAGUE_APPLYER& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_APPLYER>();
	extern STRUCT_INFO _rfl_struct_SG_LEAGUE_APPLYER_info;
}

struct SG_LEAGUE_LOG : A_LIVE_OBJECT
{
	_U32 league_id;
	_U32 result_time;
	_U8 type;
	DDL::String<SG_LEAGUE_LOG_MAX> log;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEAGUE_LOG>(SG_LEAGUE_LOG& Value);
	template<>
	bool BufferWriter::Write<SG_LEAGUE_LOG>(const SG_LEAGUE_LOG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_LEAGUE_LOG>();
	extern STRUCT_INFO _rfl_struct_SG_LEAGUE_LOG_info;
}

struct SG_HALO_CONFIG : A_CONTENT_OBJECT
{
	_U32 halo_level;
	_U32 EXP;
	_F32 ATK;
	_F32 DEF;
	_F32 HIT;
	_F32 EVASION;
	_F32 CRIT;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_HALO_CONFIG>(SG_HALO_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_HALO_CONFIG>(const SG_HALO_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_HALO_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_HALO_CONFIG_info;
}

struct SG_HALO_LEVELUP_CONFIG : A_CONTENT_OBJECT
{
	_U32 level;
	_U32 EXP;
	_U32 CD;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_HALO_LEVELUP_CONFIG>(SG_HALO_LEVELUP_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_HALO_LEVELUP_CONFIG>(const SG_HALO_LEVELUP_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_HALO_LEVELUP_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_HALO_LEVELUP_CONFIG_info;
}

struct SG_PLAYER_TITLE_CONFIG : A_CONTENT_OBJECT
{
	_U8 title_level;
	DDL::String<SG_PLAYER_TITLE_NAME_MAX> title_name;
	_U8 title_star;
	_U32 req_level_up_reputaion;
	_U32 daily_reputation_deduct;
	_U8 general_limit_num;
	_U32 daily_salary_gold;
	_U32 daily_reward_reserve;
	_U32 STRAddition;
	_U32 INTAddition;
	_U32 HP_AddExtra;
	_U32 ATK_AddExtra;
	_U32 DEF_AddExtra;
	DDL::String<SG_TITLE_PROP_DESC> employ_general_prop_desc;
	DDL::String<SG_TITLE_GENERAL_DESC> employ_general_desc;
	DDL::String<SG_TITLE_ACRHTYPE_MAX> wusheng_male;
	DDL::String<SG_TITLE_ACRHTYPE_MAX> wusheng_female;
	DDL::String<SG_TITLE_ACRHTYPE_MAX> junshi_male;
	DDL::String<SG_TITLE_ACRHTYPE_MAX> junshi_female;
	DDL::String<SG_TITLE_ACRHTYPE_MAX> jianshen_male;
	DDL::String<SG_TITLE_ACRHTYPE_MAX> jianshen_female;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PLAYER_TITLE_CONFIG>(SG_PLAYER_TITLE_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_PLAYER_TITLE_CONFIG>(const SG_PLAYER_TITLE_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PLAYER_TITLE_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_PLAYER_TITLE_CONFIG_info;
}

struct SG_QUEST_LIVE_INFO : A_LIVE_OBJECT
{
	_U32 quest_id;
	_U32 counter;
	_U8 status;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_QUEST_LIVE_INFO>(SG_QUEST_LIVE_INFO& Value);
	template<>
	bool BufferWriter::Write<SG_QUEST_LIVE_INFO>(const SG_QUEST_LIVE_INFO& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_QUEST_LIVE_INFO>();
	extern STRUCT_INFO _rfl_struct_SG_QUEST_LIVE_INFO_info;
}

struct SG_QUEST_INFO_CONFIG : A_CONTENT_OBJECT
{
	_U32 quest_id;
	_U8 quest_type;
	DDL::String<SG_QUEST_NAME_MAX> quest_name;
	DDL::String<SG_QUEST_GOAL_MAX> quest_goal_desc;
	DDL::String<SG_QUEST_GOAL_DESC_MAX> quest_goal_short_desc;
	_U8 trigger_type;
	DDL::String<SG_QUEST_URL_MAX> giver_url;
	_U8 submitee_type;
	DDL::String<SG_QUEST_URL_MAX> submitee_url;
	_U32 pre_quest_id;
	_U32 req_level;
	_U8 condition1_type;
	DDL::String<SG_QUEST_COND_MAX> condition1_param1;
	DDL::String<SG_QUEST_COND_MAX> condition1_param2;
	_U8 condition2_type;
	DDL::String<SG_QUEST_COND_MAX> condition2_param1;
	DDL::String<SG_QUEST_COND_MAX> condition2_param2;
	_U8 quest_goal_type;
	DDL::String<SG_QUEST_GOAL_MAX> goal_string_param;
	_U32 goal_int_param;
	DDL::String<SG_QUEST_GOAL_MAX> goal_string_param2;
	_U32 goal_int_param2;
	DDL::String<SG_QUEST_URL_MAX> goal_pathfinding_url;
	_U32 goal_pathfinding_prority;
	_U8 req_pack_slot;
	_U32 reward_xp;
	_U32 reward_gold;
	_U32 reward_rmb;
	_U32 reward_reputation;
	_U32 reward_energy;
	_U32 reward_item1;
	_U32 reward_item1_num;
	_U32 reward_item2;
	_U32 reward_item2_num;
	_U32 reward_item3;
	_U32 reward_item3_num;
	_U32 reward_item4;
	_U32 reward_item4_num;
	DDL::String<SG_QUEST_DIALOG_MAX> dialog_giving_npc1;
	DDL::String<SG_QUEST_DIALOG_MAX> dialog_giving_answer1;
	DDL::String<SG_QUEST_DIALOG_MAX> dialog_giving_npc2;
	DDL::String<SG_QUEST_DIALOG_MAX> dialog_giving_answer2;
	DDL::String<SG_QUEST_DIALOG_MAX> dialog_giving_npc3;
	DDL::String<SG_QUEST_DIALOG_MAX> dialog_giving_answer3;
	DDL::String<SG_QUEST_DIALOG_MAX> dialog_giving_npc4;
	DDL::String<SG_QUEST_DIALOG_MAX> dialog_giving_answer4;
	DDL::String<SG_QUEST_DIALOG_MAX> dialog_submit_npc1;
	DDL::String<SG_QUEST_DIALOG_MAX> dialog_submit_answer1;
	DDL::String<SG_QUEST_DIALOG_MAX> dialog_submit_npc2;
	DDL::String<SG_QUEST_DIALOG_MAX> dialog_submit_answer2;
	DDL::String<SG_QUEST_DIALOG_MAX> dialog_wip_npc;
	DDL::String<SG_QUEST_DIALOG_MAX> dialog_wip_answer;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_QUEST_INFO_CONFIG>(SG_QUEST_INFO_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_QUEST_INFO_CONFIG>(const SG_QUEST_INFO_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_QUEST_INFO_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_QUEST_INFO_CONFIG_info;
}

struct SG_LEVEL_INFO_CONFIG : A_CONTENT_OBJECT
{
	_U32 level_id;
	_U32 next_level;
	DDL::String<SG_DESCRIPTION_MAX> description;
	_U32 req_player_level;
	_U32 wake_pt;
	DDL::String<SG_SOLDIER_NAME_MAX> soldier_name1;
	DDL::String<SG_SOLDIER_NAME_MAX> soldier_name2;
	DDL::String<SG_SOLDIER_NAME_MAX> soldier_name3;
	DDL::String<SG_SOLDIER_NAME_MAX> soldier_name4;
	DDL::String<SG_SOLDIER_NAME_MAX> soldier_name5;
	DDL::String<SG_SOLDIER_NAME_MAX> soldier_name6;
	_U8 atk_type1;
	_U8 atk_type2;
	_U8 atk_type3;
	_U8 atk_type4;
	_U8 atk_type5;
	_U8 atk_type6;
	_U8 wpt_type1;
	_U8 wpt_type2;
	_U8 wpt_type3;
	_U8 wpt_type4;
	_U8 wpt_type5;
	_U8 wpt_type6;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEVEL_INFO_CONFIG>(SG_LEVEL_INFO_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_LEVEL_INFO_CONFIG>(const SG_LEVEL_INFO_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_LEVEL_INFO_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_LEVEL_INFO_CONFIG_info;
}

struct SG_DIRTY_WORD_CONFIG : A_CONTENT_OBJECT
{
	DDL::String<SG_PLAYER_NAME_MAX> dirty_word;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DIRTY_WORD_CONFIG>(SG_DIRTY_WORD_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_DIRTY_WORD_CONFIG>(const SG_DIRTY_WORD_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_DIRTY_WORD_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_DIRTY_WORD_CONFIG_info;
}

struct SG_PLAYER_RANDOM_NAME_CONFIG : A_CONTENT_OBJECT
{
	DDL::String<SG_PLAYER_NAME_MAX> family_name;
	DDL::String<SG_PLAYER_NAME_MAX> male_name;
	DDL::String<SG_PLAYER_NAME_MAX> female_name;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PLAYER_RANDOM_NAME_CONFIG>(SG_PLAYER_RANDOM_NAME_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_PLAYER_RANDOM_NAME_CONFIG>(const SG_PLAYER_RANDOM_NAME_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PLAYER_RANDOM_NAME_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_PLAYER_RANDOM_NAME_CONFIG_info;
}

struct SG_LEVEL_DROP_CONFIG : A_CONTENT_OBJECT
{
	DDL::String<100> level_name;
	_U32 exp;
	_U32 gold;
	_U32 level_id;
	_U32 next_level;
	_U32 group1_id;
	_F32 group1_rate;
	_U32 group2_id;
	_F32 group2_rate;
	_U32 group3_id;
	_F32 group3_rate;
	_U32 group4_id;
	_F32 group4_rate;
	_U32 wake_pt;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_LEVEL_DROP_CONFIG>(SG_LEVEL_DROP_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_LEVEL_DROP_CONFIG>(const SG_LEVEL_DROP_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_LEVEL_DROP_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_LEVEL_DROP_CONFIG_info;
}

struct SG_DROP_ITEM_BASE : A_CONTENT_OBJECT
{
	_U32 item_id;
	_U32 count;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DROP_ITEM_BASE>(SG_DROP_ITEM_BASE& Value);
	template<>
	bool BufferWriter::Write<SG_DROP_ITEM_BASE>(const SG_DROP_ITEM_BASE& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_DROP_ITEM_BASE>();
	extern STRUCT_INFO _rfl_struct_SG_DROP_ITEM_BASE_info;
}

struct SG_DROP_ITEM_CONFIG : SG_DROP_ITEM_BASE
{
	_U32 group_id;
	_F32 rate;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DROP_ITEM_CONFIG>(SG_DROP_ITEM_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_DROP_ITEM_CONFIG>(const SG_DROP_ITEM_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_DROP_ITEM_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_DROP_ITEM_CONFIG_info;
}

struct SG_ATTR_MOD_CONFIG
{
	_F32 MOD_HPAddition;
	_F32 MOD_HPPercent;
	_F32 MOD_ExtraHP;
	_F32 MOD_ATKAddition;
	_F32 MOD_ATKPercent;
	_F32 MOD_ExtraATK;
	_F32 MOD_DEFAddition;
	_F32 MOD_DEFPercent;
	_F32 MOD_ExtraDEF;
	_F32 MOD_HITAddition;
	_F32 MOD_EvasionAddition;
	_F32 MOD_CRITAddition;
	_F32 MOD_SPAddition;
	_F32 MOD_WSAddition;
	_F32 MOD_WSPercent;
	_F32 MOD_ExtraWS;
	_F32 MOD_STRAddition;
	_F32 MOD_STRPercent;
	_F32 MOD_ExtraSTR;
	_F32 MOD_INTAddition;
	_F32 MOD_INTPercent;
	_F32 MOD_ExtraINT;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ATTR_MOD_CONFIG>(SG_ATTR_MOD_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_ATTR_MOD_CONFIG>(const SG_ATTR_MOD_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_ATTR_MOD_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_ATTR_MOD_CONFIG_info;
}

struct SG_ATTR_BASE_CONFIG
{
	_F32 Base_HP;
	_F32 Base_ATK;
	_F32 Base_DEF;
	_F32 Base_HIT;
	_F32 Base_Evasion;
	_F32 Base_CRIT;
	_F32 Base_SP;
	_F32 Base_WS;
	_F32 Base_STR;
	_F32 Base_INT;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ATTR_BASE_CONFIG>(SG_ATTR_BASE_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_ATTR_BASE_CONFIG>(const SG_ATTR_BASE_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_ATTR_BASE_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_ATTR_BASE_CONFIG_info;
}

struct SG_PAWN_CONFIG
{
	SG_ATTR_BASE_CONFIG BaseConfig;
	SG_ATTR_MOD_CONFIG SigmaConfig;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PAWN_CONFIG>(SG_PAWN_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_PAWN_CONFIG>(const SG_PAWN_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PAWN_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_PAWN_CONFIG_info;
}

struct SG_ITEM_CONFIG : A_CONTENT_OBJECT
{
	_U32 item_id;
	_U32 stack_max;
	_U32 price;
	_U32 U;
	_U32 V;
	_U32 UL;
	_U32 VL;
	DDL::String<SG_EQUIPT_TEX_MAX> tex;
	DDL::String<SG_ITEM_NAME_MAX> item_name;
	_U8 quality;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ITEM_CONFIG>(SG_ITEM_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_ITEM_CONFIG>(const SG_ITEM_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_ITEM_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_ITEM_CONFIG_info;
}

struct SG_MATERIAL_CONFIG : SG_ITEM_CONFIG
{
	DDL::String<SG_MATERIAL_DESC_MAX> desc;
	_U32 req_level;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_MATERIAL_CONFIG>(SG_MATERIAL_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_MATERIAL_CONFIG>(const SG_MATERIAL_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_MATERIAL_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_MATERIAL_CONFIG_info;
}

struct SG_EQUIPT_ITEM_CONFIG : SG_ITEM_CONFIG
{
	SG_ATTR_MOD_CONFIG mod_config;
	_U8 item_type;
	_F32 quality_rate;
	_U32 req_level;
	_U8 major_attr;
	_U32 major_attr_num;
	_F32 turbo_rate;
	_U8 minor_attr_num;
	_U32 HP_MAX;
	_U32 POW_MAX;
	_U32 ITEM_INT_MAX;
	_F32 HIT_MAX;
	_F32 CRIT_MAX;
	_F32 MISS_MAX;
	_U32 SLOT_NUM;
	_U8 HAS_SKILL;
	_U32 COM_MATERIAL;
	_U32 COM_REQ_NUM;
	_U32 KEY_MATERIAL;
	_U32 KEY_REQ_NUM;
	_U32 COMBINE_COST;
	_U32 TURBO_BASE_COST;
	_U32 RESET_COST;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_EQUIPT_ITEM_CONFIG>(SG_EQUIPT_ITEM_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_EQUIPT_ITEM_CONFIG>(const SG_EQUIPT_ITEM_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_EQUIPT_ITEM_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_EQUIPT_ITEM_CONFIG_info;
}

struct SG_USABLE_ITEM_CONFIG : SG_ITEM_CONFIG
{
	DDL::String<100> functional;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_USABLE_ITEM_CONFIG>(SG_USABLE_ITEM_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_USABLE_ITEM_CONFIG>(const SG_USABLE_ITEM_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_USABLE_ITEM_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_USABLE_ITEM_CONFIG_info;
}

struct SG_GEM_ITEM_CONFIG : SG_ITEM_CONFIG
{
	DDL::String<SG_GEM_DESC_MAX> desc;
	_U8 level;
	_U8 attri_type;
	_F32 attri;
	_U32 compose_next;
	_U32 compose_num;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GEM_ITEM_CONFIG>(SG_GEM_ITEM_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_GEM_ITEM_CONFIG>(const SG_GEM_ITEM_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GEM_ITEM_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_GEM_ITEM_CONFIG_info;
}

struct SG_ENEMY_CONFIG : A_CONTENT_OBJECT
{
	_U32 enemy_id;
	SG_PAWN_CONFIG PawnConfig;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ENEMY_CONFIG>(SG_ENEMY_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_ENEMY_CONFIG>(const SG_ENEMY_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_ENEMY_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_ENEMY_CONFIG_info;
}

struct SG_SOLDIER_LEVEL_CONFIG : A_CONTENT_OBJECT
{
	_U32 attr_id;
	_U32 level;
	SG_PAWN_CONFIG PawnConfig;
	_U32 exp;
	_S32 levelup_gold;
	_S32 levelup_rmb;
	_S32 levelup_XP;
	_U16 mod_scale;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SOLDIER_LEVEL_CONFIG>(SG_SOLDIER_LEVEL_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_SOLDIER_LEVEL_CONFIG>(const SG_SOLDIER_LEVEL_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_SOLDIER_LEVEL_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_SOLDIER_LEVEL_CONFIG_info;
}

struct SG_GENERAL_LEVEL_CONFIG : A_CONTENT_OBJECT
{
	_U32 attr_id;
	_U32 level;
	SG_PAWN_CONFIG PawnConfig;
	_S32 levelup_gold;
	_S32 levelup_rmb;
	_S32 levelup_XP;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GENERAL_LEVEL_CONFIG>(SG_GENERAL_LEVEL_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_GENERAL_LEVEL_CONFIG>(const SG_GENERAL_LEVEL_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GENERAL_LEVEL_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_GENERAL_LEVEL_CONFIG_info;
}

struct SG_SOLDIER_CONFIG : A_CONTENT_OBJECT
{
	_U32 soldier_id;
	_U32 attr_id;
	_U8 type;
	_U8 atk_type;
	_U8 def_type;
	DDL::String<SG_DESCRIPTION_MAX> description;
	_S32 req_gold;
	_S32 req_rmb;
	_S32 unlock_level;
	_S32 pre_general_id;
	_S32 pre_level;
	DDL::String<ARCHETYPE_URL_LENGTH_MAX> archetype;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SOLDIER_CONFIG>(SG_SOLDIER_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_SOLDIER_CONFIG>(const SG_SOLDIER_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_SOLDIER_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_SOLDIER_CONFIG_info;
}

struct SG_GENERAL_CONFIG : A_CONTENT_OBJECT
{
	_U32 general_id;
	_U32 attr_id;
	DDL::String<SG_DESCRIPTION_MAX> description;
	_S32 req_title;
	_S32 req_gold;
	_S32 req_rmb;
	_S32 unlock_level;
	_S32 pre_general_id;
	_S32 pre_level;
	DDL::String<ARCHETYPE_URL_LENGTH_MAX> archetype;
	_U32 gift_id;
	DDL::String<SG_SKILL_DESC_MAX> skill_name;
	DDL::String<SG_DESCRIPTION_MAX> skill_desc;
	_S32 rank;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GENERAL_CONFIG>(SG_GENERAL_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_GENERAL_CONFIG>(const SG_GENERAL_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GENERAL_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_GENERAL_CONFIG_info;
}

struct SG_EQUIPPED_UNIT_PVE
{
	DDL::String<ARCHETYPE_URL_LENGTH_MAX> ArchetypeURL;
	SG_PAWN_CONFIG PawnConfig;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_EQUIPPED_UNIT_PVE>(SG_EQUIPPED_UNIT_PVE& Value);
	template<>
	bool BufferWriter::Write<SG_EQUIPPED_UNIT_PVE>(const SG_EQUIPPED_UNIT_PVE& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_EQUIPPED_UNIT_PVE>();
	extern STRUCT_INFO _rfl_struct_SG_EQUIPPED_UNIT_PVE_info;
}

struct SG_PLAYER_PVE
{
	DDL::String<ARCHETYPE_URL_LENGTH_MAX> ArchetypeURL;
	SG_PAWN_CONFIG PawnConfig;
	DDL::Array<SG_EQUIPPED_UNIT_PVE, 2> EquippedGenerals;
	DDL::Array<SG_EQUIPPED_UNIT_PVE, 3> EquippedSoldiers;
	DDL::String<SG_PLAYER_NAME_MAX> Nick;
	_U32 Avatar_ID;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PLAYER_PVE>(SG_PLAYER_PVE& Value);
	template<>
	bool BufferWriter::Write<SG_PLAYER_PVE>(const SG_PLAYER_PVE& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PLAYER_PVE>();
	extern STRUCT_INFO _rfl_struct_SG_PLAYER_PVE_info;
}

struct SG_EQUIP_SLOTS
{
	A_UUID head;
	A_UUID weapon;
	A_UUID shoulder;
	A_UUID chest;
	A_UUID leg;
	A_UUID decoration;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_EQUIP_SLOTS>(SG_EQUIP_SLOTS& Value);
	template<>
	bool BufferWriter::Write<SG_EQUIP_SLOTS>(const SG_EQUIP_SLOTS& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_EQUIP_SLOTS>();
	extern STRUCT_INFO _rfl_struct_SG_EQUIP_SLOTS_info;
}

struct SG_GENERAL : A_LIVE_OBJECT
{
	_U32 general_id;
	_U16 level;
	_U32 exp;
	_U8 status;
	SG_EQUIP_SLOTS equip_slots;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GENERAL>(SG_GENERAL& Value);
	template<>
	bool BufferWriter::Write<SG_GENERAL>(const SG_GENERAL& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GENERAL>();
	extern STRUCT_INFO _rfl_struct_SG_GENERAL_info;
}

struct SG_SOLDIER : A_LIVE_OBJECT
{
	_U32 soldier_id;
	_U16 level;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SOLDIER>(SG_SOLDIER& Value);
	template<>
	bool BufferWriter::Write<SG_SOLDIER>(const SG_SOLDIER& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_SOLDIER>();
	extern STRUCT_INFO _rfl_struct_SG_SOLDIER_info;
}

struct SG_DAILY_ACTION_CONFIG : A_CONTENT_OBJECT
{
	_U32 action_id;
	DDL::String<SG_DAILY_ACTION_NAME_MAX> action_name;
	_U8 display_position;
	_U8 type;
	_U32 req_league_level;
	_U32 req_level;
	_U8 condition1_type;
	_U32 condition1_param1;
	_U8 condition2_type;
	_U32 condition2_param1;
	_U32 hour;
	_U32 min;
	_U32 end_hour;
	_U32 end_min;
	_U32 times;
	_U32 prepare_min;
	_U32 reset_hour;
	_U32 reset_min;
	DDL::String<SG_ICON_MAX> icon;
	_U32 U;
	_U32 V;
	_U32 UL;
	_U32 VL;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DAILY_ACTION_CONFIG>(SG_DAILY_ACTION_CONFIG& Value);
	template<>
	bool BufferWriter::Write<SG_DAILY_ACTION_CONFIG>(const SG_DAILY_ACTION_CONFIG& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_DAILY_ACTION_CONFIG>();
	extern STRUCT_INFO _rfl_struct_SG_DAILY_ACTION_CONFIG_info;
}

struct SG_DAILY_ACTION_INFO : A_LIVE_OBJECT
{
	_U32 action_id;
	_U32 times;
	_U32 reset_time;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_DAILY_ACTION_INFO>(SG_DAILY_ACTION_INFO& Value);
	template<>
	bool BufferWriter::Write<SG_DAILY_ACTION_INFO>(const SG_DAILY_ACTION_INFO& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_DAILY_ACTION_INFO>();
	extern STRUCT_INFO _rfl_struct_SG_DAILY_ACTION_INFO_info;
}

struct SG_PLAYER : SG_GENERAL
{
	DDL::String<SG_PLAYER_NAME_MAX> nick;
	_U32 avatar_id;
	_U32 total_rmb;
	_U32 gold;
	_U32 rmb;
	DDL::Array<_U32, 2> equip_generals;
	DDL::Array<_U32, 3> equip_soldiers;
	_U8 increase_equipt_times;
	_U8 title;
	_U32 reputation;
	_U32 energy;
	_U32 halo_level;
	_U32 halo_exp;
	DDL::Array<SG_DAILY_ACTION_INFO, SG_DAILY_ACTION_TYPE_MAX> daily_actions;
	_U32 next_level;
	_U32 rank;
	_U32 last_rank;
	_U32 vip_level;
	_U32 league_id;
	DDL::Array<_U32, SG_LEAGUE_APPLY_MAX> league_apply_list;
	_U32 wake_pt;
	_U32 turbo_level;
	DDL::Array<DDL::String<ARCHETYPE_URL_LENGTH_MAX>,SG_TURBO_UNLOCK_SKILL_MAX> skills;
	SG_TURBO_SKILL_SLOT turbo_skill_slot;
	_U32 last_operation_time;
	DDL::String<SG_MAP_URL_MAX> last_town_map;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_PLAYER>(SG_PLAYER& Value);
	template<>
	bool BufferWriter::Write<SG_PLAYER>(const SG_PLAYER& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_PLAYER>();
	extern STRUCT_INFO _rfl_struct_SG_PLAYER_info;
}

struct SG_ITEM : A_LIVE_OBJECT
{
	_U32 item_id;
	_U32 count;
	_U32 expired_time;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_ITEM>(SG_ITEM& Value);
	template<>
	bool BufferWriter::Write<SG_ITEM>(const SG_ITEM& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_ITEM>();
	extern STRUCT_INFO _rfl_struct_SG_ITEM_info;
}

struct SG_EQUIPT_ITEM : SG_ITEM
{
	SG_ATTR_MOD_CONFIG mod_config;
	_U8 turbo_level;
	DDL::Array<_U32, SG_EUQIPT_GEM_SLOTS_MAX> gems_slots;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_EQUIPT_ITEM>(SG_EQUIPT_ITEM& Value);
	template<>
	bool BufferWriter::Write<SG_EQUIPT_ITEM>(const SG_EQUIPT_ITEM& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_EQUIPT_ITEM>();
	extern STRUCT_INFO _rfl_struct_SG_EQUIPT_ITEM_info;
}

struct SG_USABLE_ITEM : SG_ITEM
{
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_USABLE_ITEM>(SG_USABLE_ITEM& Value);
	template<>
	bool BufferWriter::Write<SG_USABLE_ITEM>(const SG_USABLE_ITEM& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_USABLE_ITEM>();
	extern STRUCT_INFO _rfl_struct_SG_USABLE_ITEM_info;
}

struct SG_GEM_ITEM : SG_ITEM
{
	_U8 status;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GEM_ITEM>(SG_GEM_ITEM& Value);
	template<>
	bool BufferWriter::Write<SG_GEM_ITEM>(const SG_GEM_ITEM& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GEM_ITEM>();
	extern STRUCT_INFO _rfl_struct_SG_GEM_ITEM_info;
}

struct SG_MATERIAL_ITEM : SG_ITEM
{
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_MATERIAL_ITEM>(SG_MATERIAL_ITEM& Value);
	template<>
	bool BufferWriter::Write<SG_MATERIAL_ITEM>(const SG_MATERIAL_ITEM& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_MATERIAL_ITEM>();
	extern STRUCT_INFO _rfl_struct_SG_MATERIAL_ITEM_info;
}

struct SG_SERVER_INFO
{
	_U32 server_id;
	DDL::String<100> server_name;
	_U32 server_state;
	DDL::String<100> avatar_nick;
	_U32 general_id;
	_U32 level;
	_U32 server_level;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_SERVER_INFO>(SG_SERVER_INFO& Value);
	template<>
	bool BufferWriter::Write<SG_SERVER_INFO>(const SG_SERVER_INFO& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_SERVER_INFO>();
	extern STRUCT_INFO _rfl_struct_SG_SERVER_INFO_info;
}

struct SG_GENERAL_QUERY_INFO
{
	SG_GENERAL general;
	SG_GENERAL_CONFIG general_config;
	SG_GENERAL_LEVEL_CONFIG level_config;
	SG_PAWN_CONFIG PawnConfig;
};

namespace DDL
{
	template<>
	bool BufferReader::Read<SG_GENERAL_QUERY_INFO>(SG_GENERAL_QUERY_INFO& Value);
	template<>
	bool BufferWriter::Write<SG_GENERAL_QUERY_INFO>(const SG_GENERAL_QUERY_INFO& Value);
}

namespace DDLReflect
{
	template<>
	const STRUCT_INFO* GetStruct<SG_GENERAL_QUERY_INFO>();
	extern STRUCT_INFO _rfl_struct_SG_GENERAL_QUERY_INFO_info;
}

class SGGAME_C2S;

class SGGAME_S2C;

namespace DDLStub
{

	template<typename CALLER, typename CLASS>
	class SGGAME_C2S : public DDLStub<CALLER, CLASS>
	{
	public:
		SGGAME_C2S(CLASS* Class) : DDLStub<CALLER, CLASS>(Class)
		{
		}

		virtual bool Dispatcher(CALLER* Caller, _U16 fid, DDL::BufferReader& Buf)
		{
			if(fid==0)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->Ping(Caller);
				return true;
			}
			if(fid==1)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->GetServerList(Caller);
				return true;
			}
			if(fid==2)
			{
				_U32 _prefix_server_id;

				// <_U32> <server_id> <> <>;
				if(!Buf.Read(_prefix_server_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EnterServer(Caller, _prefix_server_id);
				return true;
			}
			if(fid==3)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryAvatar(Caller);
				return true;
			}
			if(fid==4)
			{
				_U32 __length;
				char* _prefix_nick;
				_U32 _prefix_general_id;

				// <string> <nick> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_nick = (char*)alloca(sizeof(_prefix_nick[0])*(__length+1));
				if(!_prefix_nick) return false;
				if(!Buf.ReadBuffer(_prefix_nick, (unsigned int)sizeof(_prefix_nick[0])*__length)) return false;
				_prefix_nick[__length] = '\0';
				// <_U32> <general_id> <> <>;
				if(!Buf.Read(_prefix_general_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->CreateAvatar(Caller, _prefix_nick, _prefix_general_id);
				return true;
			}
			if(fid==5)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->DeleteAvatar(Caller);
				return true;
			}
			if(fid==6)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EnterGame(Caller);
				return true;
			}
			if(fid==7)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->LeaveGame(Caller);
				return true;
			}
			if(fid==8)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryServerTime(Caller);
				return true;
			}
			if(fid==9)
			{
				_U8 _prefix_nSync;

				// <_U8> <nSync> <> <>;
				if(!Buf.Read(_prefix_nSync)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryPlayer(Caller, _prefix_nSync);
				return true;
			}
			if(fid==10)
			{
				_U8 _prefix_nSync;

				// <_U8> <nSync> <> <>;
				if(!Buf.Read(_prefix_nSync)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryGenerals(Caller, _prefix_nSync);
				return true;
			}
			if(fid==11)
			{
				_U8 _prefix_nSync;

				// <_U8> <nSync> <> <>;
				if(!Buf.Read(_prefix_nSync)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QuerySoldiers(Caller, _prefix_nSync);
				return true;
			}
			if(fid==12)
			{
				_U8 _prefix_nSync;

				// <_U8> <nSync> <> <>;
				if(!Buf.Read(_prefix_nSync)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryBag(Caller, _prefix_nSync);
				return true;
			}
			if(fid==13)
			{
				_U32 __length;
				char* _prefix_current_town_map;
				_U32 _prefix_num;

				// <string> <current_town_map> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_current_town_map = (char*)alloca(sizeof(_prefix_current_town_map[0])*(__length+1));
				if(!_prefix_current_town_map) return false;
				if(!Buf.ReadBuffer(_prefix_current_town_map, (unsigned int)sizeof(_prefix_current_town_map[0])*__length)) return false;
				_prefix_current_town_map[__length] = '\0';
				// <_U32> <num> <> <>;
				if(!Buf.Read(_prefix_num)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryOtherPlayers(Caller, _prefix_current_town_map, _prefix_num);
				return true;
			}
			if(fid==14)
			{
				_U32 _prefix_general_id;
				SG_EQUIP_SLOTS _prefix_slots;

				// <_U32> <general_id> <> <>;
				if(!Buf.Read(_prefix_general_id)) return false;
				// <SG_EQUIP_SLOTS> <slots> <> <>;
				if(!Buf.Read(_prefix_slots)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EquipItem(Caller, _prefix_general_id, _prefix_slots);
				return true;
			}
			if(fid==15)
			{
				_U32 __length;
				_U32* _prefix_generals;
				_U32 _prefix_count;

				// <_U32> <generals> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_generals = (_U32*)alloca(sizeof(_prefix_generals[0])*__length);
				if(!_prefix_generals) return false;
				if(!Buf.ReadPointer(_prefix_generals, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EquipGenerals(Caller, _prefix_generals, _prefix_count);
				return true;
			}
			if(fid==16)
			{
				_U32 __length;
				_U32* _prefix_soldiers;
				_U32 _prefix_count;

				// <_U32> <soldiers> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_soldiers = (_U32*)alloca(sizeof(_prefix_soldiers[0])*__length);
				if(!_prefix_soldiers) return false;
				if(!Buf.ReadPointer(_prefix_soldiers, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EquipSoldiers(Caller, _prefix_soldiers, _prefix_count);
				return true;
			}
			if(fid==17)
			{
				_U32 _prefix_soldier_id;

				// <_U32> <soldier_id> <> <>;
				if(!Buf.Read(_prefix_soldier_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->UnLockSoldier(Caller, _prefix_soldier_id);
				return true;
			}
			if(fid==18)
			{
				_U32 _prefix_soldier_id;

				// <_U32> <soldier_id> <> <>;
				if(!Buf.Read(_prefix_soldier_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EnhanceSoldier(Caller, _prefix_soldier_id);
				return true;
			}
			if(fid==19)
			{
				A_UUID _prefix_uuid;

				// <A_UUID> <uuid> <> <>;
				if(!Buf.Read(_prefix_uuid)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EnhanceEquipt(Caller, _prefix_uuid);
				return true;
			}
			if(fid==20)
			{
				A_UUID _prefix_uuid;
				A_UUID _prefix_puuid;

				// <A_UUID> <uuid> <> <>;
				if(!Buf.Read(_prefix_uuid)) return false;
				// <A_UUID> <puuid> <> <>;
				if(!Buf.Read(_prefix_puuid)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->ExtendEquipt(Caller, _prefix_uuid, _prefix_puuid);
				return true;
			}
			if(fid==21)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EnhanceCoolDown(Caller);
				return true;
			}
			if(fid==22)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EnhanceCoolDownClear(Caller);
				return true;
			}
			if(fid==23)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->IncreaseEquipCoolDown(Caller);
				return true;
			}
			if(fid==24)
			{
				A_UUID _prefix_uuid;

				// <A_UUID> <uuid> <> <>;
				if(!Buf.Read(_prefix_uuid)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->RefreshEquipNormal(Caller, _prefix_uuid);
				return true;
			}
			if(fid==25)
			{
				A_UUID _prefix_uuid;

				// <A_UUID> <uuid> <> <>;
				if(!Buf.Read(_prefix_uuid)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->RefreshEquipProperty(Caller, _prefix_uuid);
				return true;
			}
			if(fid==26)
			{
				A_UUID _prefix_uuid;

				// <A_UUID> <uuid> <> <>;
				if(!Buf.Read(_prefix_uuid)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->RefreshEquipAbility(Caller, _prefix_uuid);
				return true;
			}
			if(fid==27)
			{
				A_UUID _prefix_uuid;

				// <A_UUID> <uuid> <> <>;
				if(!Buf.Read(_prefix_uuid)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->RefreshEquipDecideAccept(Caller, _prefix_uuid);
				return true;
			}
			if(fid==28)
			{
				_U32 __length;
				char* _prefix_name;

				// <string> <name> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_name = (char*)alloca(sizeof(_prefix_name[0])*(__length+1));
				if(!_prefix_name) return false;
				if(!Buf.ReadBuffer(_prefix_name, (unsigned int)sizeof(_prefix_name[0])*__length)) return false;
				_prefix_name[__length] = '\0';

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->BeginBattle(Caller, _prefix_name);
				return true;
			}
			if(fid==29)
			{
				_U32 __length;
				char* _prefix_name;
				_U32 _prefix_result;

				// <string> <name> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_name = (char*)alloca(sizeof(_prefix_name[0])*(__length+1));
				if(!_prefix_name) return false;
				if(!Buf.ReadBuffer(_prefix_name, (unsigned int)sizeof(_prefix_name[0])*__length)) return false;
				_prefix_name[__length] = '\0';
				// <_U32> <result> <> <>;
				if(!Buf.Read(_prefix_result)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EndBattle(Caller, _prefix_name, _prefix_result);
				return true;
			}
			if(fid==30)
			{
				A_UUID _prefix_item_uuid;
				_U32 _prefix_gem_id;

				// <A_UUID> <item_uuid> <> <>;
				if(!Buf.Read(_prefix_item_uuid)) return false;
				// <_U32> <gem_id> <> <>;
				if(!Buf.Read(_prefix_gem_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EquipGem(Caller, _prefix_item_uuid, _prefix_gem_id);
				return true;
			}
			if(fid==31)
			{
				A_UUID _prefix_item_uuid;
				_U32 _prefix_gem_id;

				// <A_UUID> <item_uuid> <> <>;
				if(!Buf.Read(_prefix_item_uuid)) return false;
				// <_U32> <gem_id> <> <>;
				if(!Buf.Read(_prefix_gem_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->UnequipGem(Caller, _prefix_item_uuid, _prefix_gem_id);
				return true;
			}
			if(fid==32)
			{
				_U32 _prefix_item_id;

				// <_U32> <item_id> <> <>;
				if(!Buf.Read(_prefix_item_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->GemCombine(Caller, _prefix_item_id);
				return true;
			}
			if(fid==33)
			{
				_U32 _prefix_general_id;
				_U8 _prefix_status;

				// <_U32> <general_id> <> <>;
				if(!Buf.Read(_prefix_general_id)) return false;
				// <_U8> <status> <> <>;
				if(!Buf.Read(_prefix_status)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->SetGeneralStatus(Caller, _prefix_general_id, _prefix_status);
				return true;
			}
			if(fid==34)
			{
				_U8 _prefix_nSync;

				// <_U8> <nSync> <> <>;
				if(!Buf.Read(_prefix_nSync)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryPlayerQuest(Caller, _prefix_nSync);
				return true;
			}
			if(fid==35)
			{
				_U32 _prefix_quest_id;
				_U32 _prefix_counter;
				_U8 _prefix_status;

				// <_U32> <quest_id> <> <>;
				if(!Buf.Read(_prefix_quest_id)) return false;
				// <_U32> <counter> <> <>;
				if(!Buf.Read(_prefix_counter)) return false;
				// <_U8> <status> <> <>;
				if(!Buf.Read(_prefix_status)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->SaveQuestData(Caller, _prefix_quest_id, _prefix_counter, _prefix_status);
				return true;
			}
			if(fid==36)
			{
				_U32 _prefix_quest_id;

				// <_U32> <quest_id> <> <>;
				if(!Buf.Read(_prefix_quest_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->FinishQuest(Caller, _prefix_quest_id);
				return true;
			}
			if(fid==37)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->HaloCoolDown(Caller);
				return true;
			}
			if(fid==38)
			{
				_U8 _prefix_halo_type;

				// <_U8> <halo_type> <> <>;
				if(!Buf.Read(_prefix_halo_type)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->HaloIncreaseEXP(Caller, _prefix_halo_type);
				return true;
			}
			if(fid==39)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->HaloGetCoolDown(Caller);
				return true;
			}
			if(fid==40)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->GetPaid(Caller);
				return true;
			}
			if(fid==41)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->UpgradeTitle(Caller);
				return true;
			}
			if(fid==42)
			{
				_U32 _prefix_item_id;

				// <_U32> <item_id> <> <>;
				if(!Buf.Read(_prefix_item_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->BuyGoods(Caller, _prefix_item_id);
				return true;
			}
			if(fid==43)
			{
				_U32 _prefix_avatar_id;

				// <_U32> <avatar_id> <> <>;
				if(!Buf.Read(_prefix_avatar_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryPlayerPVPInfo(Caller, _prefix_avatar_id);
				return true;
			}
			if(fid==44)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryPlayerRankList(Caller);
				return true;
			}
			if(fid==45)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPCoolDown(Caller);
				return true;
			}
			if(fid==46)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPGetRestTime(Caller);
				return true;
			}
			if(fid==47)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPRecord(Caller);
				return true;
			}
			if(fid==48)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPHeroList(Caller);
				return true;
			}
			if(fid==49)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPDailyReward(Caller);
				return true;
			}
			if(fid==50)
			{
				_U32 _prefix_defender;

				// <_U32> <defender> <> <>;
				if(!Buf.Read(_prefix_defender)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPBattleBegin(Caller, _prefix_defender);
				return true;
			}
			if(fid==51)
			{
				_U32 _prefix_defender;
				_U8 _prefix_ret;

				// <_U32> <defender> <> <>;
				if(!Buf.Read(_prefix_defender)) return false;
				// <_U8> <ret> <> <>;
				if(!Buf.Read(_prefix_ret)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPBattleEnd(Caller, _prefix_defender, _prefix_ret);
				return true;
			}
			if(fid==52)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPCoolDownClear(Caller);
				return true;
			}
			if(fid==53)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPIncreateBattleTimes(Caller);
				return true;
			}
			if(fid==54)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryInstance(Caller);
				return true;
			}
			if(fid==55)
			{
				_U32 _prefix_instance_id;
				_U8 _prefix_difficulty;

				// <_U32> <instance_id> <> <>;
				if(!Buf.Read(_prefix_instance_id)) return false;
				// <_U8> <difficulty> <> <>;
				if(!Buf.Read(_prefix_difficulty)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EnterInstance(Caller, _prefix_instance_id, _prefix_difficulty);
				return true;
			}
			if(fid==56)
			{
				_U32 __length;
				_U32 _prefix_instance_id;
				char* _prefix_map_url;

				// <_U32> <instance_id> <> <>;
				if(!Buf.Read(_prefix_instance_id)) return false;
				// <string> <map_url> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_map_url = (char*)alloca(sizeof(_prefix_map_url[0])*(__length+1));
				if(!_prefix_map_url) return false;
				if(!Buf.ReadBuffer(_prefix_map_url, (unsigned int)sizeof(_prefix_map_url[0])*__length)) return false;
				_prefix_map_url[__length] = '\0';

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->BeginInstanceBattle(Caller, _prefix_instance_id, _prefix_map_url);
				return true;
			}
			if(fid==57)
			{
				_U32 __length;
				_U32 _prefix_instance_id;
				char* _prefix_map_url;
				_U32 _prefix_result;

				// <_U32> <instance_id> <> <>;
				if(!Buf.Read(_prefix_instance_id)) return false;
				// <string> <map_url> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_map_url = (char*)alloca(sizeof(_prefix_map_url[0])*(__length+1));
				if(!_prefix_map_url) return false;
				if(!Buf.ReadBuffer(_prefix_map_url, (unsigned int)sizeof(_prefix_map_url[0])*__length)) return false;
				_prefix_map_url[__length] = '\0';
				// <_U32> <result> <> <>;
				if(!Buf.Read(_prefix_result)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EndInstanceBattle(Caller, _prefix_instance_id, _prefix_map_url, _prefix_result);
				return true;
			}
			if(fid==58)
			{
				_U32 _prefix_instance_id;

				// <_U32> <instance_id> <> <>;
				if(!Buf.Read(_prefix_instance_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->ResetInstance(Caller, _prefix_instance_id);
				return true;
			}
			if(fid==59)
			{
				_U32 __length;
				char* _prefix_last_town_map;

				// <string> <last_town_map> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_last_town_map = (char*)alloca(sizeof(_prefix_last_town_map[0])*(__length+1));
				if(!_prefix_last_town_map) return false;
				if(!Buf.ReadBuffer(_prefix_last_town_map, (unsigned int)sizeof(_prefix_last_town_map[0])*__length)) return false;
				_prefix_last_town_map[__length] = '\0';

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->SaveLastTownMap(Caller, _prefix_last_town_map);
				return true;
			}
			if(fid==60)
			{
				_U32 __length;
				char* _prefix_league_name;

				// <string> <league_name> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_league_name = (char*)alloca(sizeof(_prefix_league_name[0])*(__length+1));
				if(!_prefix_league_name) return false;
				if(!Buf.ReadBuffer(_prefix_league_name, (unsigned int)sizeof(_prefix_league_name[0])*__length)) return false;
				_prefix_league_name[__length] = '\0';

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->CreateLeague(Caller, _prefix_league_name);
				return true;
			}
			if(fid==61)
			{
				_U32 _prefix_league_id;

				// <_U32> <league_id> <> <>;
				if(!Buf.Read(_prefix_league_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->ApplyJoinLeague(Caller, _prefix_league_id);
				return true;
			}
			if(fid==62)
			{
				_U32 _prefix_league_id;

				// <_U32> <league_id> <> <>;
				if(!Buf.Read(_prefix_league_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryLeagueApplyList(Caller, _prefix_league_id);
				return true;
			}
			if(fid==63)
			{
				_U32 _prefix_league_id;

				// <_U32> <league_id> <> <>;
				if(!Buf.Read(_prefix_league_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryLeague(Caller, _prefix_league_id);
				return true;
			}
			if(fid==64)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryLeagueList(Caller);
				return true;
			}
			if(fid==65)
			{
				_U32 _prefix_league_id;

				// <_U32> <league_id> <> <>;
				if(!Buf.Read(_prefix_league_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryLeagueMemberList(Caller, _prefix_league_id);
				return true;
			}
			if(fid==66)
			{
				_U32 _prefix_member_id;

				// <_U32> <member_id> <> <>;
				if(!Buf.Read(_prefix_member_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryLeagueMemberInfo(Caller, _prefix_member_id);
				return true;
			}
			if(fid==67)
			{
				_U32 _prefix_rmb;
				_U32 _prefix_energy;

				// <_U32> <rmb> <> <>;
				if(!Buf.Read(_prefix_rmb)) return false;
				// <_U32> <energy> <> <>;
				if(!Buf.Read(_prefix_energy)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->ContributeLeague(Caller, _prefix_rmb, _prefix_energy);
				return true;
			}
			if(fid==68)
			{
				_U32 _prefix_applyer_id;
				_U8 _prefix_allowed;

				// <_U32> <applyer_id> <> <>;
				if(!Buf.Read(_prefix_applyer_id)) return false;
				// <_U8> <allowed> <> <>;
				if(!Buf.Read(_prefix_allowed)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->HandleApply(Caller, _prefix_applyer_id, _prefix_allowed);
				return true;
			}
			if(fid==69)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryLeagueNotice(Caller);
				return true;
			}
			if(fid==70)
			{
				_U32 __length;
				_U32 _prefix_league_id;
				char* _prefix_notice_content;

				// <_U32> <league_id> <> <>;
				if(!Buf.Read(_prefix_league_id)) return false;
				// <string> <notice_content> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_notice_content = (char*)alloca(sizeof(_prefix_notice_content[0])*(__length+1));
				if(!_prefix_notice_content) return false;
				if(!Buf.ReadBuffer(_prefix_notice_content, (unsigned int)sizeof(_prefix_notice_content[0])*__length)) return false;
				_prefix_notice_content[__length] = '\0';

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->SetLeagueNotice(Caller, _prefix_league_id, _prefix_notice_content);
				return true;
			}
			if(fid==71)
			{
				_U32 _prefix_member_id;

				// <_U32> <member_id> <> <>;
				if(!Buf.Read(_prefix_member_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->SetLeagueOwner(Caller, _prefix_member_id);
				return true;
			}
			if(fid==72)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->DissolveLeague(Caller);
				return true;
			}
			if(fid==73)
			{
				_U32 _prefix_member_id;
				_U8 _prefix_position;

				// <_U32> <member_id> <> <>;
				if(!Buf.Read(_prefix_member_id)) return false;
				// <_U8> <position> <> <>;
				if(!Buf.Read(_prefix_position)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->SetMemberPosition(Caller, _prefix_member_id, _prefix_position);
				return true;
			}
			if(fid==74)
			{
				_U32 _prefix_member_id;

				// <_U32> <member_id> <> <>;
				if(!Buf.Read(_prefix_member_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->DismissMember(Caller, _prefix_member_id);
				return true;
			}
			if(fid==75)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->ExitLeague(Caller);
				return true;
			}
			if(fid==76)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryLeagueLog(Caller);
				return true;
			}
			if(fid==77)
			{
				_U8 _prefix_wine_id;

				// <_U8> <wine_id> <> <>;
				if(!Buf.Read(_prefix_wine_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->LeagueToast(Caller, _prefix_wine_id);
				return true;
			}
			if(fid==78)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->SalaryGet(Caller);
				return true;
			}
			if(fid==79)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->SalaryGetBat(Caller);
				return true;
			}
			if(fid==80)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EnhanceTurbo(Caller);
				return true;
			}
			if(fid==81)
			{
				SG_TURBO_SKILL_SLOT _prefix_skill_slot;

				// <SG_TURBO_SKILL_SLOT> <skill_slot> <> <>;
				if(!Buf.Read(_prefix_skill_slot)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EquipTurboSkill(Caller, _prefix_skill_slot);
				return true;
			}
			if(fid==82)
			{
				_U32 _prefix_equipt_id;

				// <_U32> <equipt_id> <> <>;
				if(!Buf.Read(_prefix_equipt_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->MakeEquipt(Caller, _prefix_equipt_id);
				return true;
			}
			return false;
		}
	};

}

namespace DDLProxy
{

	template<typename CLIENT, typename BUFFER>
	class SGGAME_C2S : public DDLProxy<CLIENT, BUFFER>
	{
	public:
		SGGAME_C2S(CLIENT* Client) : DDLProxy<CLIENT, BUFFER>(Client, DDLReflect::GetClassID<typename ::SGGAME_C2S>())
		{
		}

		static SGGAME_C2S<CLIENT, BUFFER> Get(CLIENT* Client)
		{
			SGGAME_C2S<CLIENT, BUFFER> Proxy(Client);
			return Proxy;
		}

		bool Ping()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 0, Buf);
		}

		bool GetServerList()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 1, Buf);
		}

		bool EnterServer(_U32 server_id)
		{
			BUFFER Buf;
			// <_U32> <server_id> <> <>
			if(!Buf.Write(server_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 2, Buf);
		}

		bool QueryAvatar()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 3, Buf);
		}

		bool CreateAvatar(const char* nick, _U32 general_id)
		{
			BUFFER Buf;
			_U32 __length;
			// <string> <nick> <> <>
			__length = DDL::StringLength(nick);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(nick, (unsigned int)sizeof(nick[0])*__length)) return false;
			// <_U32> <general_id> <> <>
			if(!Buf.Write(general_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 4, Buf);
		}

		bool DeleteAvatar()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 5, Buf);
		}

		bool EnterGame()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 6, Buf);
		}

		bool LeaveGame()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 7, Buf);
		}

		bool QueryServerTime()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 8, Buf);
		}

		bool QueryPlayer(_U8 nSync)
		{
			BUFFER Buf;
			// <_U8> <nSync> <> <>
			if(!Buf.Write(nSync)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 9, Buf);
		}

		bool QueryGenerals(_U8 nSync)
		{
			BUFFER Buf;
			// <_U8> <nSync> <> <>
			if(!Buf.Write(nSync)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 10, Buf);
		}

		bool QuerySoldiers(_U8 nSync)
		{
			BUFFER Buf;
			// <_U8> <nSync> <> <>
			if(!Buf.Write(nSync)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 11, Buf);
		}

		bool QueryBag(_U8 nSync)
		{
			BUFFER Buf;
			// <_U8> <nSync> <> <>
			if(!Buf.Write(nSync)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 12, Buf);
		}

		bool QueryOtherPlayers(const char* current_town_map, _U32 num)
		{
			BUFFER Buf;
			_U32 __length;
			// <string> <current_town_map> <> <>
			__length = DDL::StringLength(current_town_map);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(current_town_map, (unsigned int)sizeof(current_town_map[0])*__length)) return false;
			// <_U32> <num> <> <>
			if(!Buf.Write(num)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 13, Buf);
		}

		bool EquipItem(_U32 general_id, const SG_EQUIP_SLOTS& slots)
		{
			BUFFER Buf;
			// <_U32> <general_id> <> <>
			if(!Buf.Write(general_id)) return false;
			// <SG_EQUIP_SLOTS> <slots> <> <>
			if(!Buf.Write(slots)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 14, Buf);
		}

		bool EquipGenerals(const _U32* generals, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <_U32> <generals> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(generals, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 15, Buf);
		}

		bool EquipSoldiers(const _U32* soldiers, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <_U32> <soldiers> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(soldiers, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 16, Buf);
		}

		bool UnLockSoldier(_U32 soldier_id)
		{
			BUFFER Buf;
			// <_U32> <soldier_id> <> <>
			if(!Buf.Write(soldier_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 17, Buf);
		}

		bool EnhanceSoldier(_U32 soldier_id)
		{
			BUFFER Buf;
			// <_U32> <soldier_id> <> <>
			if(!Buf.Write(soldier_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 18, Buf);
		}

		bool EnhanceEquipt(const A_UUID& uuid)
		{
			BUFFER Buf;
			// <A_UUID> <uuid> <> <>
			if(!Buf.Write(uuid)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 19, Buf);
		}

		bool ExtendEquipt(const A_UUID& uuid, const A_UUID& puuid)
		{
			BUFFER Buf;
			// <A_UUID> <uuid> <> <>
			if(!Buf.Write(uuid)) return false;
			// <A_UUID> <puuid> <> <>
			if(!Buf.Write(puuid)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 20, Buf);
		}

		bool EnhanceCoolDown()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 21, Buf);
		}

		bool EnhanceCoolDownClear()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 22, Buf);
		}

		bool IncreaseEquipCoolDown()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 23, Buf);
		}

		bool RefreshEquipNormal(const A_UUID& uuid)
		{
			BUFFER Buf;
			// <A_UUID> <uuid> <> <>
			if(!Buf.Write(uuid)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 24, Buf);
		}

		bool RefreshEquipProperty(const A_UUID& uuid)
		{
			BUFFER Buf;
			// <A_UUID> <uuid> <> <>
			if(!Buf.Write(uuid)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 25, Buf);
		}

		bool RefreshEquipAbility(const A_UUID& uuid)
		{
			BUFFER Buf;
			// <A_UUID> <uuid> <> <>
			if(!Buf.Write(uuid)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 26, Buf);
		}

		bool RefreshEquipDecideAccept(const A_UUID& uuid)
		{
			BUFFER Buf;
			// <A_UUID> <uuid> <> <>
			if(!Buf.Write(uuid)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 27, Buf);
		}

		bool BeginBattle(const char* name)
		{
			BUFFER Buf;
			_U32 __length;
			// <string> <name> <> <>
			__length = DDL::StringLength(name);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(name, (unsigned int)sizeof(name[0])*__length)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 28, Buf);
		}

		bool EndBattle(const char* name, _U32 result)
		{
			BUFFER Buf;
			_U32 __length;
			// <string> <name> <> <>
			__length = DDL::StringLength(name);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(name, (unsigned int)sizeof(name[0])*__length)) return false;
			// <_U32> <result> <> <>
			if(!Buf.Write(result)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 29, Buf);
		}

		bool EquipGem(const A_UUID& item_uuid, _U32 gem_id)
		{
			BUFFER Buf;
			// <A_UUID> <item_uuid> <> <>
			if(!Buf.Write(item_uuid)) return false;
			// <_U32> <gem_id> <> <>
			if(!Buf.Write(gem_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 30, Buf);
		}

		bool UnequipGem(const A_UUID& item_uuid, _U32 gem_id)
		{
			BUFFER Buf;
			// <A_UUID> <item_uuid> <> <>
			if(!Buf.Write(item_uuid)) return false;
			// <_U32> <gem_id> <> <>
			if(!Buf.Write(gem_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 31, Buf);
		}

		bool GemCombine(_U32 item_id)
		{
			BUFFER Buf;
			// <_U32> <item_id> <> <>
			if(!Buf.Write(item_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 32, Buf);
		}

		bool SetGeneralStatus(_U32 general_id, _U8 status)
		{
			BUFFER Buf;
			// <_U32> <general_id> <> <>
			if(!Buf.Write(general_id)) return false;
			// <_U8> <status> <> <>
			if(!Buf.Write(status)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 33, Buf);
		}

		bool QueryPlayerQuest(_U8 nSync)
		{
			BUFFER Buf;
			// <_U8> <nSync> <> <>
			if(!Buf.Write(nSync)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 34, Buf);
		}

		bool SaveQuestData(_U32 quest_id, _U32 counter, _U8 status)
		{
			BUFFER Buf;
			// <_U32> <quest_id> <> <>
			if(!Buf.Write(quest_id)) return false;
			// <_U32> <counter> <> <>
			if(!Buf.Write(counter)) return false;
			// <_U8> <status> <> <>
			if(!Buf.Write(status)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 35, Buf);
		}

		bool FinishQuest(_U32 quest_id)
		{
			BUFFER Buf;
			// <_U32> <quest_id> <> <>
			if(!Buf.Write(quest_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 36, Buf);
		}

		bool HaloCoolDown()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 37, Buf);
		}

		bool HaloIncreaseEXP(_U8 halo_type)
		{
			BUFFER Buf;
			// <_U8> <halo_type> <> <>
			if(!Buf.Write(halo_type)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 38, Buf);
		}

		bool HaloGetCoolDown()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 39, Buf);
		}

		bool GetPaid()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 40, Buf);
		}

		bool UpgradeTitle()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 41, Buf);
		}

		bool BuyGoods(_U32 item_id)
		{
			BUFFER Buf;
			// <_U32> <item_id> <> <>
			if(!Buf.Write(item_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 42, Buf);
		}

		bool QueryPlayerPVPInfo(_U32 avatar_id)
		{
			BUFFER Buf;
			// <_U32> <avatar_id> <> <>
			if(!Buf.Write(avatar_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 43, Buf);
		}

		bool QueryPlayerRankList()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 44, Buf);
		}

		bool PVPCoolDown()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 45, Buf);
		}

		bool PVPGetRestTime()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 46, Buf);
		}

		bool PVPRecord()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 47, Buf);
		}

		bool PVPHeroList()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 48, Buf);
		}

		bool PVPDailyReward()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 49, Buf);
		}

		bool PVPBattleBegin(_U32 defender)
		{
			BUFFER Buf;
			// <_U32> <defender> <> <>
			if(!Buf.Write(defender)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 50, Buf);
		}

		bool PVPBattleEnd(_U32 defender, _U8 ret)
		{
			BUFFER Buf;
			// <_U32> <defender> <> <>
			if(!Buf.Write(defender)) return false;
			// <_U8> <ret> <> <>
			if(!Buf.Write(ret)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 51, Buf);
		}

		bool PVPCoolDownClear()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 52, Buf);
		}

		bool PVPIncreateBattleTimes()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 53, Buf);
		}

		bool QueryInstance()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 54, Buf);
		}

		bool EnterInstance(_U32 instance_id, _U8 difficulty)
		{
			BUFFER Buf;
			// <_U32> <instance_id> <> <>
			if(!Buf.Write(instance_id)) return false;
			// <_U8> <difficulty> <> <>
			if(!Buf.Write(difficulty)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 55, Buf);
		}

		bool BeginInstanceBattle(_U32 instance_id, const char* map_url)
		{
			BUFFER Buf;
			_U32 __length;
			// <_U32> <instance_id> <> <>
			if(!Buf.Write(instance_id)) return false;
			// <string> <map_url> <> <>
			__length = DDL::StringLength(map_url);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(map_url, (unsigned int)sizeof(map_url[0])*__length)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 56, Buf);
		}

		bool EndInstanceBattle(_U32 instance_id, const char* map_url, _U32 result)
		{
			BUFFER Buf;
			_U32 __length;
			// <_U32> <instance_id> <> <>
			if(!Buf.Write(instance_id)) return false;
			// <string> <map_url> <> <>
			__length = DDL::StringLength(map_url);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(map_url, (unsigned int)sizeof(map_url[0])*__length)) return false;
			// <_U32> <result> <> <>
			if(!Buf.Write(result)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 57, Buf);
		}

		bool ResetInstance(_U32 instance_id)
		{
			BUFFER Buf;
			// <_U32> <instance_id> <> <>
			if(!Buf.Write(instance_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 58, Buf);
		}

		bool SaveLastTownMap(const char* last_town_map)
		{
			BUFFER Buf;
			_U32 __length;
			// <string> <last_town_map> <> <>
			__length = DDL::StringLength(last_town_map);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(last_town_map, (unsigned int)sizeof(last_town_map[0])*__length)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 59, Buf);
		}

		bool CreateLeague(const char* league_name)
		{
			BUFFER Buf;
			_U32 __length;
			// <string> <league_name> <> <>
			__length = DDL::StringLength(league_name);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(league_name, (unsigned int)sizeof(league_name[0])*__length)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 60, Buf);
		}

		bool ApplyJoinLeague(_U32 league_id)
		{
			BUFFER Buf;
			// <_U32> <league_id> <> <>
			if(!Buf.Write(league_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 61, Buf);
		}

		bool QueryLeagueApplyList(_U32 league_id)
		{
			BUFFER Buf;
			// <_U32> <league_id> <> <>
			if(!Buf.Write(league_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 62, Buf);
		}

		bool QueryLeague(_U32 league_id)
		{
			BUFFER Buf;
			// <_U32> <league_id> <> <>
			if(!Buf.Write(league_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 63, Buf);
		}

		bool QueryLeagueList()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 64, Buf);
		}

		bool QueryLeagueMemberList(_U32 league_id)
		{
			BUFFER Buf;
			// <_U32> <league_id> <> <>
			if(!Buf.Write(league_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 65, Buf);
		}

		bool QueryLeagueMemberInfo(_U32 member_id)
		{
			BUFFER Buf;
			// <_U32> <member_id> <> <>
			if(!Buf.Write(member_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 66, Buf);
		}

		bool ContributeLeague(_U32 rmb, _U32 energy)
		{
			BUFFER Buf;
			// <_U32> <rmb> <> <>
			if(!Buf.Write(rmb)) return false;
			// <_U32> <energy> <> <>
			if(!Buf.Write(energy)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 67, Buf);
		}

		bool HandleApply(_U32 applyer_id, _U8 allowed)
		{
			BUFFER Buf;
			// <_U32> <applyer_id> <> <>
			if(!Buf.Write(applyer_id)) return false;
			// <_U8> <allowed> <> <>
			if(!Buf.Write(allowed)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 68, Buf);
		}

		bool QueryLeagueNotice()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 69, Buf);
		}

		bool SetLeagueNotice(_U32 league_id, const char* notice_content)
		{
			BUFFER Buf;
			_U32 __length;
			// <_U32> <league_id> <> <>
			if(!Buf.Write(league_id)) return false;
			// <string> <notice_content> <> <>
			__length = DDL::StringLength(notice_content);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(notice_content, (unsigned int)sizeof(notice_content[0])*__length)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 70, Buf);
		}

		bool SetLeagueOwner(_U32 member_id)
		{
			BUFFER Buf;
			// <_U32> <member_id> <> <>
			if(!Buf.Write(member_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 71, Buf);
		}

		bool DissolveLeague()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 72, Buf);
		}

		bool SetMemberPosition(_U32 member_id, _U8 position)
		{
			BUFFER Buf;
			// <_U32> <member_id> <> <>
			if(!Buf.Write(member_id)) return false;
			// <_U8> <position> <> <>
			if(!Buf.Write(position)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 73, Buf);
		}

		bool DismissMember(_U32 member_id)
		{
			BUFFER Buf;
			// <_U32> <member_id> <> <>
			if(!Buf.Write(member_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 74, Buf);
		}

		bool ExitLeague()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 75, Buf);
		}

		bool QueryLeagueLog()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 76, Buf);
		}

		bool LeagueToast(_U8 wine_id)
		{
			BUFFER Buf;
			// <_U8> <wine_id> <> <>
			if(!Buf.Write(wine_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 77, Buf);
		}

		bool SalaryGet()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 78, Buf);
		}

		bool SalaryGetBat()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 79, Buf);
		}

		bool EnhanceTurbo()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 80, Buf);
		}

		bool EquipTurboSkill(const SG_TURBO_SKILL_SLOT& skill_slot)
		{
			BUFFER Buf;
			// <SG_TURBO_SKILL_SLOT> <skill_slot> <> <>
			if(!Buf.Write(skill_slot)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 81, Buf);
		}

		bool MakeEquipt(_U32 equipt_id)
		{
			BUFFER Buf;
			// <_U32> <equipt_id> <> <>
			if(!Buf.Write(equipt_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 82, Buf);
		}
	};

}

namespace DDLReflect
{
	template<>
	const CLASS_INFO* GetClass<SGGAME_C2S>();
}

namespace DDLStub
{

	template<typename CALLER, typename CLASS>
	class SGGAME_S2C : public DDLStub<CALLER, CLASS>
	{
	public:
		SGGAME_S2C(CLASS* Class) : DDLStub<CALLER, CLASS>(Class)
		{
		}

		virtual bool Dispatcher(CALLER* Caller, _U16 fid, DDL::BufferReader& Buf)
		{
			if(fid==0)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->Pong(Caller);
				return true;
			}
			if(fid==1)
			{
				_U32 _prefix_time;

				// <_U32> <time> <> <>;
				if(!Buf.Read(_prefix_time)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryServerTimeResult(Caller, _prefix_time);
				return true;
			}
			if(fid==2)
			{
				_U32 __length;
				SG_SERVER_INFO* _prefix_infos;
				_U32 _prefix_count;
				_U32 _prefix_last_server;

				// <SG_SERVER_INFO> <infos> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_infos = (SG_SERVER_INFO*)alloca(sizeof(_prefix_infos[0])*__length);
				if(!_prefix_infos) return false;
				if(!Buf.ReadPointer(_prefix_infos, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;
				// <_U32> <last_server> <> <>;
				if(!Buf.Read(_prefix_last_server)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->GetServerListResult(Caller, _prefix_infos, _prefix_count, _prefix_last_server);
				return true;
			}
			if(fid==3)
			{
				_U32 _prefix_code;

				// <_U32> <code> <> <>;
				if(!Buf.Read(_prefix_code)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryAvatarFailed(Caller, _prefix_code);
				return true;
			}
			if(fid==4)
			{
				SG_PLAYER _prefix_player;

				// <SG_PLAYER> <player> <> <>;
				if(!Buf.Read(_prefix_player)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryAvatarResult(Caller, _prefix_player);
				return true;
			}
			if(fid==5)
			{
				_U8 _prefix_ret;

				// <_U8> <ret> <> <>;
				if(!Buf.Read(_prefix_ret)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EnterGameResult(Caller, _prefix_ret);
				return true;
			}
			if(fid==6)
			{
				_U32 _prefix_code;

				// <_U32> <code> <> <>;
				if(!Buf.Read(_prefix_code)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->CreateAvatarResult(Caller, _prefix_code);
				return true;
			}
			if(fid==7)
			{
				SG_PLAYER _prefix_player;
				_U8 _prefix_nSync;

				// <SG_PLAYER> <player> <> <>;
				if(!Buf.Read(_prefix_player)) return false;
				// <_U8> <nSync> <> <>;
				if(!Buf.Read(_prefix_nSync)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryPlayerResult(Caller, _prefix_player, _prefix_nSync);
				return true;
			}
			if(fid==8)
			{
				_U32 __length;
				SG_GENERAL* _prefix_generals;
				_U32 _prefix_count;
				_U8 _prefix_nSync;

				// <SG_GENERAL> <generals> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_generals = (SG_GENERAL*)alloca(sizeof(_prefix_generals[0])*__length);
				if(!_prefix_generals) return false;
				if(!Buf.ReadPointer(_prefix_generals, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;
				// <_U8> <nSync> <> <>;
				if(!Buf.Read(_prefix_nSync)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryGeneralResult(Caller, _prefix_generals, _prefix_count, _prefix_nSync);
				return true;
			}
			if(fid==9)
			{
				_U32 __length;
				SG_SOLDIER* _prefix_soldiers;
				_U32 _prefix_count;
				_U8 _prefix_nSync;

				// <SG_SOLDIER> <soldiers> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_soldiers = (SG_SOLDIER*)alloca(sizeof(_prefix_soldiers[0])*__length);
				if(!_prefix_soldiers) return false;
				if(!Buf.ReadPointer(_prefix_soldiers, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;
				// <_U8> <nSync> <> <>;
				if(!Buf.Read(_prefix_nSync)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QuerySoldierResult(Caller, _prefix_soldiers, _prefix_count, _prefix_nSync);
				return true;
			}
			if(fid==10)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryBagBegin(Caller);
				return true;
			}
			if(fid==11)
			{
				_U32 __length;
				SG_EQUIPT_ITEM* _prefix_items;
				_U32 _prefix_count;

				// <SG_EQUIPT_ITEM> <items> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_items = (SG_EQUIPT_ITEM*)alloca(sizeof(_prefix_items[0])*__length);
				if(!_prefix_items) return false;
				if(!Buf.ReadPointer(_prefix_items, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryBagEquipt(Caller, _prefix_items, _prefix_count);
				return true;
			}
			if(fid==12)
			{
				_U32 __length;
				SG_USABLE_ITEM* _prefix_items;
				_U32 _prefix_count;

				// <SG_USABLE_ITEM> <items> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_items = (SG_USABLE_ITEM*)alloca(sizeof(_prefix_items[0])*__length);
				if(!_prefix_items) return false;
				if(!Buf.ReadPointer(_prefix_items, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryBagUsable(Caller, _prefix_items, _prefix_count);
				return true;
			}
			if(fid==13)
			{
				_U32 __length;
				SG_GEM_ITEM* _prefix_items;
				_U32 _prefix_count;

				// <SG_GEM_ITEM> <items> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_items = (SG_GEM_ITEM*)alloca(sizeof(_prefix_items[0])*__length);
				if(!_prefix_items) return false;
				if(!Buf.ReadPointer(_prefix_items, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryBagGen(Caller, _prefix_items, _prefix_count);
				return true;
			}
			if(fid==14)
			{
				_U32 __length;
				SG_MATERIAL_ITEM* _prefix_items;
				_U32 _prefix_count;

				// <SG_MATERIAL_ITEM> <items> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_items = (SG_MATERIAL_ITEM*)alloca(sizeof(_prefix_items[0])*__length);
				if(!_prefix_items) return false;
				if(!Buf.ReadPointer(_prefix_items, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryBagMaterial(Caller, _prefix_items, _prefix_count);
				return true;
			}
			if(fid==15)
			{
				_U8 _prefix_nSync;

				// <_U8> <nSync> <> <>;
				if(!Buf.Read(_prefix_nSync)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryBagEnd(Caller, _prefix_nSync);
				return true;
			}
			if(fid==16)
			{
				_U32 __length;
				SG_PLAYER* _prefix_players;
				_U32 _prefix_count;

				// <SG_PLAYER> <players> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_players = (SG_PLAYER*)alloca(sizeof(_prefix_players[0])*__length);
				if(!_prefix_players) return false;
				if(!Buf.ReadPointer(_prefix_players, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryOtherPlayersResult(Caller, _prefix_players, _prefix_count);
				return true;
			}
			if(fid==17)
			{
				_U32 _prefix_time;

				// <_U32> <time> <> <>;
				if(!Buf.Read(_prefix_time)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EnhanceCoolDownResult(Caller, _prefix_time);
				return true;
			}
			if(fid==18)
			{
				SG_EQUIPT_ITEM _prefix_euipt;

				// <SG_EQUIPT_ITEM> <euipt> <> <>;
				if(!Buf.Read(_prefix_euipt)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->RefreshEquipDone(Caller, _prefix_euipt);
				return true;
			}
			if(fid==19)
			{
				SG_GEM_ITEM _prefix_gem;

				// <SG_GEM_ITEM> <gem> <> <>;
				if(!Buf.Read(_prefix_gem)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->GemCombineResult(Caller, _prefix_gem);
				return true;
			}
			if(fid==20)
			{
				_U32 _prefix_time;

				// <_U32> <time> <> <>;
				if(!Buf.Read(_prefix_time)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->HaloIncreaseEXPResult(Caller, _prefix_time);
				return true;
			}
			if(fid==21)
			{
				_U32 _prefix_time;

				// <_U32> <time> <> <>;
				if(!Buf.Read(_prefix_time)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->HaloGetCoolDownResult(Caller, _prefix_time);
				return true;
			}
			if(fid==22)
			{
				SG_PLAYER_PVE _prefix_PlayerPVE;

				// <SG_PLAYER_PVE> <PlayerPVE> <> <>;
				if(!Buf.Read(_prefix_PlayerPVE)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->BeginBattleResult(Caller, _prefix_PlayerPVE);
				return true;
			}
			if(fid==23)
			{
				_U32 __length;
				_U32 _prefix_level;
				_U32 _prefix_exp_addition;
				_U32 _prefix_exp;
				_U32 _prefix_gold;
				SG_DROP_ITEM_CONFIG* _prefix_drops;
				_U32 _prefix_drop_count;

				// <_U32> <level> <> <>;
				if(!Buf.Read(_prefix_level)) return false;
				// <_U32> <exp_addition> <> <>;
				if(!Buf.Read(_prefix_exp_addition)) return false;
				// <_U32> <exp> <> <>;
				if(!Buf.Read(_prefix_exp)) return false;
				// <_U32> <gold> <> <>;
				if(!Buf.Read(_prefix_gold)) return false;
				// <SG_DROP_ITEM_CONFIG> <drops> <> <drop_count>;
				if(!Buf.Read(__length)) return false;
				_prefix_drops = (SG_DROP_ITEM_CONFIG*)alloca(sizeof(_prefix_drops[0])*__length);
				if(!_prefix_drops) return false;
				if(!Buf.ReadPointer(_prefix_drops, __length)) return false;
				// <_U32> <drop_count> <> <>;
				if(!Buf.Read(_prefix_drop_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EndBattleResult(Caller, _prefix_level, _prefix_exp_addition, _prefix_exp, _prefix_gold, _prefix_drops, _prefix_drop_count);
				return true;
			}
			if(fid==24)
			{
				_U32 __length;
				SG_QUEST_LIVE_INFO* _prefix_quest_list;
				_U32 _prefix_count;
				_U8 _prefix_nSync;

				// <SG_QUEST_LIVE_INFO> <quest_list> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_quest_list = (SG_QUEST_LIVE_INFO*)alloca(sizeof(_prefix_quest_list[0])*__length);
				if(!_prefix_quest_list) return false;
				if(!Buf.ReadPointer(_prefix_quest_list, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;
				// <_U8> <nSync> <> <>;
				if(!Buf.Read(_prefix_nSync)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryPlayerQuestResult(Caller, _prefix_quest_list, _prefix_count, _prefix_nSync);
				return true;
			}
			if(fid==25)
			{
				_U32 __length;
				_U32 _prefix_quest_id;
				_U32 _prefix_exp_addition;
				_U32 _prefix_exp;
				_U32 _prefix_level;
				_U32 _prefix_gold;
				_U32 _prefix_rmb;
				_U32 _prefix_reputation;
				_U32 _prefix_energy;
				SG_DROP_ITEM_BASE* _prefix_drops;
				_U32 _prefix_drop_count;

				// <_U32> <quest_id> <> <>;
				if(!Buf.Read(_prefix_quest_id)) return false;
				// <_U32> <exp_addition> <> <>;
				if(!Buf.Read(_prefix_exp_addition)) return false;
				// <_U32> <exp> <> <>;
				if(!Buf.Read(_prefix_exp)) return false;
				// <_U32> <level> <> <>;
				if(!Buf.Read(_prefix_level)) return false;
				// <_U32> <gold> <> <>;
				if(!Buf.Read(_prefix_gold)) return false;
				// <_U32> <rmb> <> <>;
				if(!Buf.Read(_prefix_rmb)) return false;
				// <_U32> <reputation> <> <>;
				if(!Buf.Read(_prefix_reputation)) return false;
				// <_U32> <energy> <> <>;
				if(!Buf.Read(_prefix_energy)) return false;
				// <SG_DROP_ITEM_BASE> <drops> <> <drop_count>;
				if(!Buf.Read(__length)) return false;
				_prefix_drops = (SG_DROP_ITEM_BASE*)alloca(sizeof(_prefix_drops[0])*__length);
				if(!_prefix_drops) return false;
				if(!Buf.ReadPointer(_prefix_drops, __length)) return false;
				// <_U32> <drop_count> <> <>;
				if(!Buf.Read(_prefix_drop_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->FinishQuestDone(Caller, _prefix_quest_id, _prefix_exp_addition, _prefix_exp, _prefix_level, _prefix_gold, _prefix_rmb, _prefix_reputation, _prefix_energy, _prefix_drops, _prefix_drop_count);
				return true;
			}
			if(fid==26)
			{
				_U32 __length;
				A_UUID* _prefix_goods;
				_U32 _prefix_count;

				// <A_UUID> <goods> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_goods = (A_UUID*)alloca(sizeof(_prefix_goods[0])*__length);
				if(!_prefix_goods) return false;
				if(!Buf.ReadPointer(_prefix_goods, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->BuyGoodsResult(Caller, _prefix_goods, _prefix_count);
				return true;
			}
			if(fid==27)
			{
				SG_PLAYER_PVE _prefix_pve;

				// <SG_PLAYER_PVE> <pve> <> <>;
				if(!Buf.Read(_prefix_pve)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryPlayerPVPInfoResult(Caller, _prefix_pve);
				return true;
			}
			if(fid==28)
			{
				_U32 __length;
				SG_PLAYER* _prefix_players;
				_U32 _prefix_count;

				// <SG_PLAYER> <players> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_players = (SG_PLAYER*)alloca(sizeof(_prefix_players[0])*__length);
				if(!_prefix_players) return false;
				if(!Buf.ReadPointer(_prefix_players, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryPlayerRankListResult(Caller, _prefix_players, _prefix_count);
				return true;
			}
			if(fid==29)
			{
				_U32 _prefix_time;

				// <_U32> <time> <> <>;
				if(!Buf.Read(_prefix_time)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPCoolDownResult(Caller, _prefix_time);
				return true;
			}
			if(fid==30)
			{
				_U32 _prefix_rest_time;

				// <_U32> <rest_time> <> <>;
				if(!Buf.Read(_prefix_rest_time)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPGetRestTimeResult(Caller, _prefix_rest_time);
				return true;
			}
			if(fid==31)
			{
				_U32 __length;
				SG_PVP_RECORD_ITEM* _prefix_record;
				_U32 _prefix_count;

				// <SG_PVP_RECORD_ITEM> <record> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_record = (SG_PVP_RECORD_ITEM*)alloca(sizeof(_prefix_record[0])*__length);
				if(!_prefix_record) return false;
				if(!Buf.ReadPointer(_prefix_record, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPRecordResult(Caller, _prefix_record, _prefix_count);
				return true;
			}
			if(fid==32)
			{
				_U32 __length;
				SG_PLAYER* _prefix_players;
				_U32 _prefix_count;

				// <SG_PLAYER> <players> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_players = (SG_PLAYER*)alloca(sizeof(_prefix_players[0])*__length);
				if(!_prefix_players) return false;
				if(!Buf.ReadPointer(_prefix_players, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPHeroListRecord(Caller, _prefix_players, _prefix_count);
				return true;
			}
			if(fid==33)
			{
				_U32 __length;
				_U32 _prefix_gold;
				_U32 _prefix_reputation;
				SG_ITEM* _prefix_items;
				_U32 _prefix_count;

				// <_U32> <gold> <> <>;
				if(!Buf.Read(_prefix_gold)) return false;
				// <_U32> <reputation> <> <>;
				if(!Buf.Read(_prefix_reputation)) return false;
				// <SG_ITEM> <items> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_items = (SG_ITEM*)alloca(sizeof(_prefix_items[0])*__length);
				if(!_prefix_items) return false;
				if(!Buf.ReadPointer(_prefix_items, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPDailyReward(Caller, _prefix_gold, _prefix_reputation, _prefix_items, _prefix_count);
				return true;
			}
			if(fid==34)
			{
				SG_PLAYER_PVE _prefix_SelfPVE;
				SG_PLAYER_PVE _prefix_DefenderPVE;
				SG_PLAYER _prefix_DefenderPlayerInfo;

				// <SG_PLAYER_PVE> <SelfPVE> <> <>;
				if(!Buf.Read(_prefix_SelfPVE)) return false;
				// <SG_PLAYER_PVE> <DefenderPVE> <> <>;
				if(!Buf.Read(_prefix_DefenderPVE)) return false;
				// <SG_PLAYER> <DefenderPlayerInfo> <> <>;
				if(!Buf.Read(_prefix_DefenderPlayerInfo)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPBattleBeginResult(Caller, _prefix_SelfPVE, _prefix_DefenderPVE, _prefix_DefenderPlayerInfo);
				return true;
			}
			if(fid==35)
			{
				_U32 _prefix_reputation;

				// <_U32> <reputation> <> <>;
				if(!Buf.Read(_prefix_reputation)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPBattleEndResult(Caller, _prefix_reputation);
				return true;
			}
			if(fid==36)
			{


				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPCoolDownClearResult(Caller);
				return true;
			}
			if(fid==37)
			{
				_U32 _prefix_rest_times;

				// <_U32> <rest_times> <> <>;
				if(!Buf.Read(_prefix_rest_times)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->PVPIncreateBattleTimesResult(Caller, _prefix_rest_times);
				return true;
			}
			if(fid==38)
			{
				_U32 __length;
				SG_INSTANCE_INFO* _prefix_instances;
				_U32 _prefix_count;

				// <SG_INSTANCE_INFO> <instances> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_instances = (SG_INSTANCE_INFO*)alloca(sizeof(_prefix_instances[0])*__length);
				if(!_prefix_instances) return false;
				if(!Buf.ReadPointer(_prefix_instances, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryInstanceResult(Caller, _prefix_instances, _prefix_count);
				return true;
			}
			if(fid==39)
			{
				SG_PLAYER_PVE _prefix_PlayerPVE;

				// <SG_PLAYER_PVE> <PlayerPVE> <> <>;
				if(!Buf.Read(_prefix_PlayerPVE)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->BeginInstanceBattleResult(Caller, _prefix_PlayerPVE);
				return true;
			}
			if(fid==40)
			{
				SG_INSTANCE_INFO _prefix_instance;

				// <SG_INSTANCE_INFO> <instance> <> <>;
				if(!Buf.Read(_prefix_instance)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EnterInstanceResult(Caller, _prefix_instance);
				return true;
			}
			if(fid==41)
			{
				_U32 __length;
				_U32 _prefix_level;
				_U32 _prefix_exp_addition;
				_U32 _prefix_exp;
				_U32 _prefix_gold;
				SG_DROP_ITEM_CONFIG* _prefix_drops;
				_U32 _prefix_drop_count;

				// <_U32> <level> <> <>;
				if(!Buf.Read(_prefix_level)) return false;
				// <_U32> <exp_addition> <> <>;
				if(!Buf.Read(_prefix_exp_addition)) return false;
				// <_U32> <exp> <> <>;
				if(!Buf.Read(_prefix_exp)) return false;
				// <_U32> <gold> <> <>;
				if(!Buf.Read(_prefix_gold)) return false;
				// <SG_DROP_ITEM_CONFIG> <drops> <> <drop_count>;
				if(!Buf.Read(__length)) return false;
				_prefix_drops = (SG_DROP_ITEM_CONFIG*)alloca(sizeof(_prefix_drops[0])*__length);
				if(!_prefix_drops) return false;
				if(!Buf.ReadPointer(_prefix_drops, __length)) return false;
				// <_U32> <drop_count> <> <>;
				if(!Buf.Read(_prefix_drop_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EndInstanceBattleResult(Caller, _prefix_level, _prefix_exp_addition, _prefix_exp, _prefix_gold, _prefix_drops, _prefix_drop_count);
				return true;
			}
			if(fid==42)
			{
				_U8 _prefix_result;
				_U32 _prefix_rmb;
				SG_INSTANCE_INFO _prefix_instance;

				// <_U8> <result> <> <>;
				if(!Buf.Read(_prefix_result)) return false;
				// <_U32> <rmb> <> <>;
				if(!Buf.Read(_prefix_rmb)) return false;
				// <SG_INSTANCE_INFO> <instance> <> <>;
				if(!Buf.Read(_prefix_instance)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->ResetInstanceResult(Caller, _prefix_result, _prefix_rmb, _prefix_instance);
				return true;
			}
			if(fid==43)
			{
				_U8 _prefix_ret;
				SG_LEAGUE _prefix_league;

				// <_U8> <ret> <> <>;
				if(!Buf.Read(_prefix_ret)) return false;
				// <SG_LEAGUE> <league> <> <>;
				if(!Buf.Read(_prefix_league)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->CreateLeagueResult(Caller, _prefix_ret, _prefix_league);
				return true;
			}
			if(fid==44)
			{
				_U32 __length;
				SG_LEAGUE_APPLYER* _prefix_applyer;
				_U32 _prefix_count;

				// <SG_LEAGUE_APPLYER> <applyer> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_applyer = (SG_LEAGUE_APPLYER*)alloca(sizeof(_prefix_applyer[0])*__length);
				if(!_prefix_applyer) return false;
				if(!Buf.ReadPointer(_prefix_applyer, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryLeagueApplyListResult(Caller, _prefix_applyer, _prefix_count);
				return true;
			}
			if(fid==45)
			{
				SG_LEAGUE _prefix_league;

				// <SG_LEAGUE> <league> <> <>;
				if(!Buf.Read(_prefix_league)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryLeagueResult(Caller, _prefix_league);
				return true;
			}
			if(fid==46)
			{
				_U32 __length;
				SG_LEAGUE* _prefix_league_list;
				_U32 _prefix_count;

				// <SG_LEAGUE> <league_list> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_league_list = (SG_LEAGUE*)alloca(sizeof(_prefix_league_list[0])*__length);
				if(!_prefix_league_list) return false;
				if(!Buf.ReadPointer(_prefix_league_list, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryLeagueListResult(Caller, _prefix_league_list, _prefix_count);
				return true;
			}
			if(fid==47)
			{
				_U32 __length;
				SG_LEAGUE_MEMBER* _prefix_league_members;
				_U32 _prefix_count;

				// <SG_LEAGUE_MEMBER> <league_members> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_league_members = (SG_LEAGUE_MEMBER*)alloca(sizeof(_prefix_league_members[0])*__length);
				if(!_prefix_league_members) return false;
				if(!Buf.ReadPointer(_prefix_league_members, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryLeagueMemberListResult(Caller, _prefix_league_members, _prefix_count);
				return true;
			}
			if(fid==48)
			{
				SG_LEAGUE_MEMBER _prefix_member_info;

				// <SG_LEAGUE_MEMBER> <member_info> <> <>;
				if(!Buf.Read(_prefix_member_info)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryLeagueMemberInfoResult(Caller, _prefix_member_info);
				return true;
			}
			if(fid==49)
			{
				SG_LEAGUE_MEMBER _prefix_self_info;
				SG_LEAGUE _prefix_league_info;

				// <SG_LEAGUE_MEMBER> <self_info> <> <>;
				if(!Buf.Read(_prefix_self_info)) return false;
				// <SG_LEAGUE> <league_info> <> <>;
				if(!Buf.Read(_prefix_league_info)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->ContributeLeagueResult(Caller, _prefix_self_info, _prefix_league_info);
				return true;
			}
			if(fid==50)
			{
				_U8 _prefix_ret;
				SG_LEAGUE_MEMBER _prefix_new_joiner;

				// <_U8> <ret> <> <>;
				if(!Buf.Read(_prefix_ret)) return false;
				// <SG_LEAGUE_MEMBER> <new_joiner> <> <>;
				if(!Buf.Read(_prefix_new_joiner)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->HandleApplyResult(Caller, _prefix_ret, _prefix_new_joiner);
				return true;
			}
			if(fid==51)
			{
				_U32 __length;
				char* _prefix_notice_content;

				// <string> <notice_content> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_notice_content = (char*)alloca(sizeof(_prefix_notice_content[0])*(__length+1));
				if(!_prefix_notice_content) return false;
				if(!Buf.ReadBuffer(_prefix_notice_content, (unsigned int)sizeof(_prefix_notice_content[0])*__length)) return false;
				_prefix_notice_content[__length] = '\0';

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryLeagueNoticeResult(Caller, _prefix_notice_content);
				return true;
			}
			if(fid==52)
			{
				_U32 __length;
				_U8 _prefix_ret;
				char* _prefix_notice_content;

				// <_U8> <ret> <> <>;
				if(!Buf.Read(_prefix_ret)) return false;
				// <string> <notice_content> <> <>;
				if(!Buf.Read(__length)) return false;
				_prefix_notice_content = (char*)alloca(sizeof(_prefix_notice_content[0])*(__length+1));
				if(!_prefix_notice_content) return false;
				if(!Buf.ReadBuffer(_prefix_notice_content, (unsigned int)sizeof(_prefix_notice_content[0])*__length)) return false;
				_prefix_notice_content[__length] = '\0';

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->SetLeagueNoticeResult(Caller, _prefix_ret, _prefix_notice_content);
				return true;
			}
			if(fid==53)
			{
				_U8 _prefix_ret;
				_U32 _prefix_member_id;

				// <_U8> <ret> <> <>;
				if(!Buf.Read(_prefix_ret)) return false;
				// <_U32> <member_id> <> <>;
				if(!Buf.Read(_prefix_member_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->SetLeagueOwnerResult(Caller, _prefix_ret, _prefix_member_id);
				return true;
			}
			if(fid==54)
			{
				_U8 _prefix_ret;
				_U32 _prefix_member_id;
				_U8 _prefix_position;

				// <_U8> <ret> <> <>;
				if(!Buf.Read(_prefix_ret)) return false;
				// <_U32> <member_id> <> <>;
				if(!Buf.Read(_prefix_member_id)) return false;
				// <_U8> <position> <> <>;
				if(!Buf.Read(_prefix_position)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->SetMemberPositionResult(Caller, _prefix_ret, _prefix_member_id, _prefix_position);
				return true;
			}
			if(fid==55)
			{
				_U8 _prefix_ret;
				_U32 _prefix_member_id;

				// <_U8> <ret> <> <>;
				if(!Buf.Read(_prefix_ret)) return false;
				// <_U32> <member_id> <> <>;
				if(!Buf.Read(_prefix_member_id)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->DismissMemberResult(Caller, _prefix_ret, _prefix_member_id);
				return true;
			}
			if(fid==56)
			{
				_U8 _prefix_ret;

				// <_U8> <ret> <> <>;
				if(!Buf.Read(_prefix_ret)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->ExitLeagueResult(Caller, _prefix_ret);
				return true;
			}
			if(fid==57)
			{
				_U32 __length;
				SG_LEAGUE_LOG* _prefix_league_log;
				_U32 _prefix_count;

				// <SG_LEAGUE_LOG> <league_log> <> <count>;
				if(!Buf.Read(__length)) return false;
				_prefix_league_log = (SG_LEAGUE_LOG*)alloca(sizeof(_prefix_league_log[0])*__length);
				if(!_prefix_league_log) return false;
				if(!Buf.ReadPointer(_prefix_league_log, __length)) return false;
				// <_U32> <count> <> <>;
				if(!Buf.Read(_prefix_count)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->QueryLeagueLogResult(Caller, _prefix_league_log, _prefix_count);
				return true;
			}
			if(fid==58)
			{
				_U8 _prefix_ret;
				_U32 _prefix_gold;
				_U32 _prefix_rmb;
				_U32 _prefix_reward_reputation;
				_U32 _prefix_reward_league_xp;

				// <_U8> <ret> <> <>;
				if(!Buf.Read(_prefix_ret)) return false;
				// <_U32> <gold> <> <>;
				if(!Buf.Read(_prefix_gold)) return false;
				// <_U32> <rmb> <> <>;
				if(!Buf.Read(_prefix_rmb)) return false;
				// <_U32> <reward_reputation> <> <>;
				if(!Buf.Read(_prefix_reward_reputation)) return false;
				// <_U32> <reward_league_xp> <> <>;
				if(!Buf.Read(_prefix_reward_league_xp)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->LeagueToastResult(Caller, _prefix_ret, _prefix_gold, _prefix_rmb, _prefix_reward_reputation, _prefix_reward_league_xp);
				return true;
			}
			if(fid==59)
			{
				_U8 _prefix_ret;
				_U32 _prefix_rmb;
				_U32 _prefix_gold;

				// <_U8> <ret> <> <>;
				if(!Buf.Read(_prefix_ret)) return false;
				// <_U32> <rmb> <> <>;
				if(!Buf.Read(_prefix_rmb)) return false;
				// <_U32> <gold> <> <>;
				if(!Buf.Read(_prefix_gold)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->SalaryGetResult(Caller, _prefix_ret, _prefix_rmb, _prefix_gold);
				return true;
			}
			if(fid==60)
			{
				_U8 _prefix_ret;
				_U32 _prefix_rmb;
				_U32 _prefix_gold;
				_U32 _prefix_times;

				// <_U8> <ret> <> <>;
				if(!Buf.Read(_prefix_ret)) return false;
				// <_U32> <rmb> <> <>;
				if(!Buf.Read(_prefix_rmb)) return false;
				// <_U32> <gold> <> <>;
				if(!Buf.Read(_prefix_gold)) return false;
				// <_U32> <times> <> <>;
				if(!Buf.Read(_prefix_times)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->SalaryGetBatResult(Caller, _prefix_ret, _prefix_rmb, _prefix_gold, _prefix_times);
				return true;
			}
			if(fid==61)
			{
				_U8 _prefix_ret;
				_U32 _prefix_turbo_level;
				_U32 _prefix_wake_pt;

				// <_U8> <ret> <> <>;
				if(!Buf.Read(_prefix_ret)) return false;
				// <_U32> <turbo_level> <> <>;
				if(!Buf.Read(_prefix_turbo_level)) return false;
				// <_U32> <wake_pt> <> <>;
				if(!Buf.Read(_prefix_wake_pt)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->EnhanceTurboResult(Caller, _prefix_ret, _prefix_turbo_level, _prefix_wake_pt);
				return true;
			}
			if(fid==62)
			{
				_U8 _prefix_ret;
				SG_EQUIPT_ITEM _prefix_new_euqipt;
				SG_MATERIAL_ITEM _prefix_com_material;
				SG_MATERIAL_ITEM _prefix_key_material;

				// <_U8> <ret> <> <>;
				if(!Buf.Read(_prefix_ret)) return false;
				// <SG_EQUIPT_ITEM> <new_euqipt> <> <>;
				if(!Buf.Read(_prefix_new_euqipt)) return false;
				// <SG_MATERIAL_ITEM> <com_material> <> <>;
				if(!Buf.Read(_prefix_com_material)) return false;
				// <SG_MATERIAL_ITEM> <key_material> <> <>;
				if(!Buf.Read(_prefix_key_material)) return false;

				// call implement
				DDLStub<CALLER, CLASS>::GetClass()->MakeEquiptResult(Caller, _prefix_ret, _prefix_new_euqipt, _prefix_com_material, _prefix_key_material);
				return true;
			}
			return false;
		}
	};

}

namespace DDLProxy
{

	template<typename CLIENT, typename BUFFER>
	class SGGAME_S2C : public DDLProxy<CLIENT, BUFFER>
	{
	public:
		SGGAME_S2C(CLIENT* Client) : DDLProxy<CLIENT, BUFFER>(Client, DDLReflect::GetClassID<typename ::SGGAME_S2C>())
		{
		}

		static SGGAME_S2C<CLIENT, BUFFER> Get(CLIENT* Client)
		{
			SGGAME_S2C<CLIENT, BUFFER> Proxy(Client);
			return Proxy;
		}

		bool Pong()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 0, Buf);
		}

		bool QueryServerTimeResult(_U32 time)
		{
			BUFFER Buf;
			// <_U32> <time> <> <>
			if(!Buf.Write(time)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 1, Buf);
		}

		bool GetServerListResult(const SG_SERVER_INFO* infos, _U32 count, _U32 last_server)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_SERVER_INFO> <infos> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(infos, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;
			// <_U32> <last_server> <> <>
			if(!Buf.Write(last_server)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 2, Buf);
		}

		bool QueryAvatarFailed(_U32 code)
		{
			BUFFER Buf;
			// <_U32> <code> <> <>
			if(!Buf.Write(code)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 3, Buf);
		}

		bool QueryAvatarResult(const SG_PLAYER& player)
		{
			BUFFER Buf;
			// <SG_PLAYER> <player> <> <>
			if(!Buf.Write(player)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 4, Buf);
		}

		bool EnterGameResult(_U8 ret)
		{
			BUFFER Buf;
			// <_U8> <ret> <> <>
			if(!Buf.Write(ret)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 5, Buf);
		}

		bool CreateAvatarResult(_U32 code)
		{
			BUFFER Buf;
			// <_U32> <code> <> <>
			if(!Buf.Write(code)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 6, Buf);
		}

		bool QueryPlayerResult(const SG_PLAYER& player, _U8 nSync)
		{
			BUFFER Buf;
			// <SG_PLAYER> <player> <> <>
			if(!Buf.Write(player)) return false;
			// <_U8> <nSync> <> <>
			if(!Buf.Write(nSync)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 7, Buf);
		}

		bool QueryGeneralResult(const SG_GENERAL* generals, _U32 count, _U8 nSync)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_GENERAL> <generals> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(generals, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;
			// <_U8> <nSync> <> <>
			if(!Buf.Write(nSync)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 8, Buf);
		}

		bool QuerySoldierResult(const SG_SOLDIER* soldiers, _U32 count, _U8 nSync)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_SOLDIER> <soldiers> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(soldiers, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;
			// <_U8> <nSync> <> <>
			if(!Buf.Write(nSync)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 9, Buf);
		}

		bool QueryBagBegin()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 10, Buf);
		}

		bool QueryBagEquipt(const SG_EQUIPT_ITEM* items, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_EQUIPT_ITEM> <items> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(items, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 11, Buf);
		}

		bool QueryBagUsable(const SG_USABLE_ITEM* items, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_USABLE_ITEM> <items> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(items, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 12, Buf);
		}

		bool QueryBagGen(const SG_GEM_ITEM* items, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_GEM_ITEM> <items> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(items, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 13, Buf);
		}

		bool QueryBagMaterial(const SG_MATERIAL_ITEM* items, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_MATERIAL_ITEM> <items> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(items, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 14, Buf);
		}

		bool QueryBagEnd(_U8 nSync)
		{
			BUFFER Buf;
			// <_U8> <nSync> <> <>
			if(!Buf.Write(nSync)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 15, Buf);
		}

		bool QueryOtherPlayersResult(const SG_PLAYER* players, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_PLAYER> <players> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(players, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 16, Buf);
		}

		bool EnhanceCoolDownResult(_U32 time)
		{
			BUFFER Buf;
			// <_U32> <time> <> <>
			if(!Buf.Write(time)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 17, Buf);
		}

		bool RefreshEquipDone(const SG_EQUIPT_ITEM& euipt)
		{
			BUFFER Buf;
			// <SG_EQUIPT_ITEM> <euipt> <> <>
			if(!Buf.Write(euipt)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 18, Buf);
		}

		bool GemCombineResult(const SG_GEM_ITEM& gem)
		{
			BUFFER Buf;
			// <SG_GEM_ITEM> <gem> <> <>
			if(!Buf.Write(gem)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 19, Buf);
		}

		bool HaloIncreaseEXPResult(_U32 time)
		{
			BUFFER Buf;
			// <_U32> <time> <> <>
			if(!Buf.Write(time)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 20, Buf);
		}

		bool HaloGetCoolDownResult(_U32 time)
		{
			BUFFER Buf;
			// <_U32> <time> <> <>
			if(!Buf.Write(time)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 21, Buf);
		}

		bool BeginBattleResult(const SG_PLAYER_PVE& PlayerPVE)
		{
			BUFFER Buf;
			// <SG_PLAYER_PVE> <PlayerPVE> <> <>
			if(!Buf.Write(PlayerPVE)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 22, Buf);
		}

		bool EndBattleResult(_U32 level, _U32 exp_addition, _U32 exp, _U32 gold, const SG_DROP_ITEM_CONFIG* drops, _U32 drop_count)
		{
			BUFFER Buf;
			_U32 __length;
			// <_U32> <level> <> <>
			if(!Buf.Write(level)) return false;
			// <_U32> <exp_addition> <> <>
			if(!Buf.Write(exp_addition)) return false;
			// <_U32> <exp> <> <>
			if(!Buf.Write(exp)) return false;
			// <_U32> <gold> <> <>
			if(!Buf.Write(gold)) return false;
			// <SG_DROP_ITEM_CONFIG> <drops> <> <drop_count>
			__length = (_U16)(drop_count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(drops, __length)) return false;
			// <_U32> <drop_count> <> <>
			if(!Buf.Write(drop_count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 23, Buf);
		}

		bool QueryPlayerQuestResult(const SG_QUEST_LIVE_INFO* quest_list, _U32 count, _U8 nSync)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_QUEST_LIVE_INFO> <quest_list> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(quest_list, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;
			// <_U8> <nSync> <> <>
			if(!Buf.Write(nSync)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 24, Buf);
		}

		bool FinishQuestDone(_U32 quest_id, _U32 exp_addition, _U32 exp, _U32 level, _U32 gold, _U32 rmb, _U32 reputation, _U32 energy, const SG_DROP_ITEM_BASE* drops, _U32 drop_count)
		{
			BUFFER Buf;
			_U32 __length;
			// <_U32> <quest_id> <> <>
			if(!Buf.Write(quest_id)) return false;
			// <_U32> <exp_addition> <> <>
			if(!Buf.Write(exp_addition)) return false;
			// <_U32> <exp> <> <>
			if(!Buf.Write(exp)) return false;
			// <_U32> <level> <> <>
			if(!Buf.Write(level)) return false;
			// <_U32> <gold> <> <>
			if(!Buf.Write(gold)) return false;
			// <_U32> <rmb> <> <>
			if(!Buf.Write(rmb)) return false;
			// <_U32> <reputation> <> <>
			if(!Buf.Write(reputation)) return false;
			// <_U32> <energy> <> <>
			if(!Buf.Write(energy)) return false;
			// <SG_DROP_ITEM_BASE> <drops> <> <drop_count>
			__length = (_U16)(drop_count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(drops, __length)) return false;
			// <_U32> <drop_count> <> <>
			if(!Buf.Write(drop_count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 25, Buf);
		}

		bool BuyGoodsResult(const A_UUID* goods, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <A_UUID> <goods> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(goods, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 26, Buf);
		}

		bool QueryPlayerPVPInfoResult(const SG_PLAYER_PVE& pve)
		{
			BUFFER Buf;
			// <SG_PLAYER_PVE> <pve> <> <>
			if(!Buf.Write(pve)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 27, Buf);
		}

		bool QueryPlayerRankListResult(const SG_PLAYER* players, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_PLAYER> <players> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(players, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 28, Buf);
		}

		bool PVPCoolDownResult(_U32 time)
		{
			BUFFER Buf;
			// <_U32> <time> <> <>
			if(!Buf.Write(time)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 29, Buf);
		}

		bool PVPGetRestTimeResult(_U32 rest_time)
		{
			BUFFER Buf;
			// <_U32> <rest_time> <> <>
			if(!Buf.Write(rest_time)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 30, Buf);
		}

		bool PVPRecordResult(const SG_PVP_RECORD_ITEM* record, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_PVP_RECORD_ITEM> <record> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(record, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 31, Buf);
		}

		bool PVPHeroListRecord(const SG_PLAYER* players, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_PLAYER> <players> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(players, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 32, Buf);
		}

		bool PVPDailyReward(_U32 gold, _U32 reputation, const SG_ITEM* items, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <_U32> <gold> <> <>
			if(!Buf.Write(gold)) return false;
			// <_U32> <reputation> <> <>
			if(!Buf.Write(reputation)) return false;
			// <SG_ITEM> <items> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(items, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 33, Buf);
		}

		bool PVPBattleBeginResult(const SG_PLAYER_PVE& SelfPVE, const SG_PLAYER_PVE& DefenderPVE, const SG_PLAYER& DefenderPlayerInfo)
		{
			BUFFER Buf;
			// <SG_PLAYER_PVE> <SelfPVE> <> <>
			if(!Buf.Write(SelfPVE)) return false;
			// <SG_PLAYER_PVE> <DefenderPVE> <> <>
			if(!Buf.Write(DefenderPVE)) return false;
			// <SG_PLAYER> <DefenderPlayerInfo> <> <>
			if(!Buf.Write(DefenderPlayerInfo)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 34, Buf);
		}

		bool PVPBattleEndResult(_U32 reputation)
		{
			BUFFER Buf;
			// <_U32> <reputation> <> <>
			if(!Buf.Write(reputation)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 35, Buf);
		}

		bool PVPCoolDownClearResult()
		{
			BUFFER Buf;

			// send
			return this->GetClient()->Send(this->GetClassID(), 36, Buf);
		}

		bool PVPIncreateBattleTimesResult(_U32 rest_times)
		{
			BUFFER Buf;
			// <_U32> <rest_times> <> <>
			if(!Buf.Write(rest_times)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 37, Buf);
		}

		bool QueryInstanceResult(const SG_INSTANCE_INFO* instances, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_INSTANCE_INFO> <instances> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(instances, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 38, Buf);
		}

		bool BeginInstanceBattleResult(const SG_PLAYER_PVE& PlayerPVE)
		{
			BUFFER Buf;
			// <SG_PLAYER_PVE> <PlayerPVE> <> <>
			if(!Buf.Write(PlayerPVE)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 39, Buf);
		}

		bool EnterInstanceResult(const SG_INSTANCE_INFO& instance)
		{
			BUFFER Buf;
			// <SG_INSTANCE_INFO> <instance> <> <>
			if(!Buf.Write(instance)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 40, Buf);
		}

		bool EndInstanceBattleResult(_U32 level, _U32 exp_addition, _U32 exp, _U32 gold, const SG_DROP_ITEM_CONFIG* drops, _U32 drop_count)
		{
			BUFFER Buf;
			_U32 __length;
			// <_U32> <level> <> <>
			if(!Buf.Write(level)) return false;
			// <_U32> <exp_addition> <> <>
			if(!Buf.Write(exp_addition)) return false;
			// <_U32> <exp> <> <>
			if(!Buf.Write(exp)) return false;
			// <_U32> <gold> <> <>
			if(!Buf.Write(gold)) return false;
			// <SG_DROP_ITEM_CONFIG> <drops> <> <drop_count>
			__length = (_U16)(drop_count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(drops, __length)) return false;
			// <_U32> <drop_count> <> <>
			if(!Buf.Write(drop_count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 41, Buf);
		}

		bool ResetInstanceResult(_U8 result, _U32 rmb, const SG_INSTANCE_INFO& instance)
		{
			BUFFER Buf;
			// <_U8> <result> <> <>
			if(!Buf.Write(result)) return false;
			// <_U32> <rmb> <> <>
			if(!Buf.Write(rmb)) return false;
			// <SG_INSTANCE_INFO> <instance> <> <>
			if(!Buf.Write(instance)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 42, Buf);
		}

		bool CreateLeagueResult(_U8 ret, const SG_LEAGUE& league)
		{
			BUFFER Buf;
			// <_U8> <ret> <> <>
			if(!Buf.Write(ret)) return false;
			// <SG_LEAGUE> <league> <> <>
			if(!Buf.Write(league)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 43, Buf);
		}

		bool QueryLeagueApplyListResult(const SG_LEAGUE_APPLYER* applyer, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_LEAGUE_APPLYER> <applyer> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(applyer, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 44, Buf);
		}

		bool QueryLeagueResult(const SG_LEAGUE& league)
		{
			BUFFER Buf;
			// <SG_LEAGUE> <league> <> <>
			if(!Buf.Write(league)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 45, Buf);
		}

		bool QueryLeagueListResult(const SG_LEAGUE* league_list, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_LEAGUE> <league_list> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(league_list, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 46, Buf);
		}

		bool QueryLeagueMemberListResult(const SG_LEAGUE_MEMBER* league_members, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_LEAGUE_MEMBER> <league_members> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(league_members, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 47, Buf);
		}

		bool QueryLeagueMemberInfoResult(const SG_LEAGUE_MEMBER& member_info)
		{
			BUFFER Buf;
			// <SG_LEAGUE_MEMBER> <member_info> <> <>
			if(!Buf.Write(member_info)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 48, Buf);
		}

		bool ContributeLeagueResult(const SG_LEAGUE_MEMBER& self_info, const SG_LEAGUE& league_info)
		{
			BUFFER Buf;
			// <SG_LEAGUE_MEMBER> <self_info> <> <>
			if(!Buf.Write(self_info)) return false;
			// <SG_LEAGUE> <league_info> <> <>
			if(!Buf.Write(league_info)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 49, Buf);
		}

		bool HandleApplyResult(_U8 ret, const SG_LEAGUE_MEMBER& new_joiner)
		{
			BUFFER Buf;
			// <_U8> <ret> <> <>
			if(!Buf.Write(ret)) return false;
			// <SG_LEAGUE_MEMBER> <new_joiner> <> <>
			if(!Buf.Write(new_joiner)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 50, Buf);
		}

		bool QueryLeagueNoticeResult(const char* notice_content)
		{
			BUFFER Buf;
			_U32 __length;
			// <string> <notice_content> <> <>
			__length = DDL::StringLength(notice_content);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(notice_content, (unsigned int)sizeof(notice_content[0])*__length)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 51, Buf);
		}

		bool SetLeagueNoticeResult(_U8 ret, const char* notice_content)
		{
			BUFFER Buf;
			_U32 __length;
			// <_U8> <ret> <> <>
			if(!Buf.Write(ret)) return false;
			// <string> <notice_content> <> <>
			__length = DDL::StringLength(notice_content);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WriteData(notice_content, (unsigned int)sizeof(notice_content[0])*__length)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 52, Buf);
		}

		bool SetLeagueOwnerResult(_U8 ret, _U32 member_id)
		{
			BUFFER Buf;
			// <_U8> <ret> <> <>
			if(!Buf.Write(ret)) return false;
			// <_U32> <member_id> <> <>
			if(!Buf.Write(member_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 53, Buf);
		}

		bool SetMemberPositionResult(_U8 ret, _U32 member_id, _U8 position)
		{
			BUFFER Buf;
			// <_U8> <ret> <> <>
			if(!Buf.Write(ret)) return false;
			// <_U32> <member_id> <> <>
			if(!Buf.Write(member_id)) return false;
			// <_U8> <position> <> <>
			if(!Buf.Write(position)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 54, Buf);
		}

		bool DismissMemberResult(_U8 ret, _U32 member_id)
		{
			BUFFER Buf;
			// <_U8> <ret> <> <>
			if(!Buf.Write(ret)) return false;
			// <_U32> <member_id> <> <>
			if(!Buf.Write(member_id)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 55, Buf);
		}

		bool ExitLeagueResult(_U8 ret)
		{
			BUFFER Buf;
			// <_U8> <ret> <> <>
			if(!Buf.Write(ret)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 56, Buf);
		}

		bool QueryLeagueLogResult(const SG_LEAGUE_LOG* league_log, _U32 count)
		{
			BUFFER Buf;
			_U32 __length;
			// <SG_LEAGUE_LOG> <league_log> <> <count>
			__length = (_U16)(count);
			if(!Buf.Write(__length)) return false;
			if(!Buf.WritePointer(league_log, __length)) return false;
			// <_U32> <count> <> <>
			if(!Buf.Write(count)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 57, Buf);
		}

		bool LeagueToastResult(_U8 ret, _U32 gold, _U32 rmb, _U32 reward_reputation, _U32 reward_league_xp)
		{
			BUFFER Buf;
			// <_U8> <ret> <> <>
			if(!Buf.Write(ret)) return false;
			// <_U32> <gold> <> <>
			if(!Buf.Write(gold)) return false;
			// <_U32> <rmb> <> <>
			if(!Buf.Write(rmb)) return false;
			// <_U32> <reward_reputation> <> <>
			if(!Buf.Write(reward_reputation)) return false;
			// <_U32> <reward_league_xp> <> <>
			if(!Buf.Write(reward_league_xp)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 58, Buf);
		}

		bool SalaryGetResult(_U8 ret, _U32 rmb, _U32 gold)
		{
			BUFFER Buf;
			// <_U8> <ret> <> <>
			if(!Buf.Write(ret)) return false;
			// <_U32> <rmb> <> <>
			if(!Buf.Write(rmb)) return false;
			// <_U32> <gold> <> <>
			if(!Buf.Write(gold)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 59, Buf);
		}

		bool SalaryGetBatResult(_U8 ret, _U32 rmb, _U32 gold, _U32 times)
		{
			BUFFER Buf;
			// <_U8> <ret> <> <>
			if(!Buf.Write(ret)) return false;
			// <_U32> <rmb> <> <>
			if(!Buf.Write(rmb)) return false;
			// <_U32> <gold> <> <>
			if(!Buf.Write(gold)) return false;
			// <_U32> <times> <> <>
			if(!Buf.Write(times)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 60, Buf);
		}

		bool EnhanceTurboResult(_U8 ret, _U32 turbo_level, _U32 wake_pt)
		{
			BUFFER Buf;
			// <_U8> <ret> <> <>
			if(!Buf.Write(ret)) return false;
			// <_U32> <turbo_level> <> <>
			if(!Buf.Write(turbo_level)) return false;
			// <_U32> <wake_pt> <> <>
			if(!Buf.Write(wake_pt)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 61, Buf);
		}

		bool MakeEquiptResult(_U8 ret, const SG_EQUIPT_ITEM& new_euqipt, const SG_MATERIAL_ITEM& com_material, const SG_MATERIAL_ITEM& key_material)
		{
			BUFFER Buf;
			// <_U8> <ret> <> <>
			if(!Buf.Write(ret)) return false;
			// <SG_EQUIPT_ITEM> <new_euqipt> <> <>
			if(!Buf.Write(new_euqipt)) return false;
			// <SG_MATERIAL_ITEM> <com_material> <> <>
			if(!Buf.Write(com_material)) return false;
			// <SG_MATERIAL_ITEM> <key_material> <> <>
			if(!Buf.Write(key_material)) return false;

			// send
			return this->GetClient()->Send(this->GetClassID(), 62, Buf);
		}
	};

}

namespace DDLReflect
{
	template<>
	const CLASS_INFO* GetClass<SGGAME_S2C>();
}


#pragma pack(pop)

#endif
