////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED. DO NOT MODIFY! //
////////////////////////////////////////////////

#include <ZionBase.h>
#include "ConfusedNumberDDL.h"

namespace DDL
{
	template<>
	bool BufferReader::Read<A_CONFUSED_U32>(A_CONFUSED_U32& Value)
	{
		if(!Read<_U32>(Value.value)) return false;
		if(!Read<_U32>(Value.mask)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<A_CONFUSED_U32>(const A_CONFUSED_U32& Value)
	{
		if(!Write<_U32>(Value.value)) return false;
		if(!Write<_U32>(Value.mask)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_A_CONFUSED_U32_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<A_CONFUSED_U32>(*((A_CONFUSED_U32*)data));
	}

	static bool _struct_A_CONFUSED_U32_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<A_CONFUSED_U32>(*((const A_CONFUSED_U32*)data));
	}

	static FIELD_INFO _struct_A_CONFUSED_U32_fieldinfo[] =
	{
		{TYPE_U32, "value", 0, (_U16)ZION_OFFSETOF(A_CONFUSED_U32, value), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "mask", 0, (_U16)ZION_OFFSETOF(A_CONFUSED_U32, mask), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_A_CONFUSED_U32_info = { NULL, "A_CONFUSED_U32", sizeof(A_CONFUSED_U32), 2, _struct_A_CONFUSED_U32_fieldinfo, _struct_A_CONFUSED_U32_readproc, _struct_A_CONFUSED_U32_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<A_CONFUSED_U32>()
	{
		return &_rfl_struct_A_CONFUSED_U32_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<A_CONFUSED_S32>(A_CONFUSED_S32& Value)
	{
		if(!BufferReader::Read<A_CONFUSED_U32>(Value)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<A_CONFUSED_S32>(const A_CONFUSED_S32& Value)
	{
		if(!BufferWriter::Write<A_CONFUSED_U32>(Value)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_A_CONFUSED_S32_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<A_CONFUSED_S32>(*((A_CONFUSED_S32*)data));
	}

	static bool _struct_A_CONFUSED_S32_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<A_CONFUSED_S32>(*((const A_CONFUSED_S32*)data));
	}

	STRUCT_INFO _rfl_struct_A_CONFUSED_S32_info = { &_rfl_struct_A_CONFUSED_U32_info, "A_CONFUSED_S32", sizeof(A_CONFUSED_S32), 0, NULL, _struct_A_CONFUSED_S32_readproc, _struct_A_CONFUSED_S32_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<A_CONFUSED_S32>()
	{
		return &_rfl_struct_A_CONFUSED_S32_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<A_CONFUSED_F32>(A_CONFUSED_F32& Value)
	{
		if(!BufferReader::Read<A_CONFUSED_U32>(Value)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<A_CONFUSED_F32>(const A_CONFUSED_F32& Value)
	{
		if(!BufferWriter::Write<A_CONFUSED_U32>(Value)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_A_CONFUSED_F32_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<A_CONFUSED_F32>(*((A_CONFUSED_F32*)data));
	}

	static bool _struct_A_CONFUSED_F32_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<A_CONFUSED_F32>(*((const A_CONFUSED_F32*)data));
	}

	STRUCT_INFO _rfl_struct_A_CONFUSED_F32_info = { &_rfl_struct_A_CONFUSED_U32_info, "A_CONFUSED_F32", sizeof(A_CONFUSED_F32), 0, NULL, _struct_A_CONFUSED_F32_readproc, _struct_A_CONFUSED_F32_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<A_CONFUSED_F32>()
	{
		return &_rfl_struct_A_CONFUSED_F32_info;
	}
}

