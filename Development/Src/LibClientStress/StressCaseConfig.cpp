////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED. DO NOT MODIFY! //
////////////////////////////////////////////////

#include <ZionBase.h>
#include "StressCaseConfig.h"

namespace DDL
{
	template<>
	bool BufferReader::Read<STRESSCASE_LOGIN_CONFIG>(STRESSCASE_LOGIN_CONFIG& Value)
	{
		if(!Read<_S32>(Value.reset_time)) return false;
		if(!Read<_U32>(Value.retry_time)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<STRESSCASE_LOGIN_CONFIG>(const STRESSCASE_LOGIN_CONFIG& Value)
	{
		if(!Write<_S32>(Value.reset_time)) return false;
		if(!Write<_U32>(Value.retry_time)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_STRESSCASE_LOGIN_CONFIG_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<STRESSCASE_LOGIN_CONFIG>(*((STRESSCASE_LOGIN_CONFIG*)data));
	}

	static bool _struct_STRESSCASE_LOGIN_CONFIG_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<STRESSCASE_LOGIN_CONFIG>(*((const STRESSCASE_LOGIN_CONFIG*)data));
	}

	static FIELD_INFO _struct_STRESSCASE_LOGIN_CONFIG_fieldinfo[] =
	{
		{TYPE_S32, "reset_time", 0, (_U16)ZION_OFFSETOF(STRESSCASE_LOGIN_CONFIG, reset_time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_S32), NULL},
		{TYPE_U32, "retry_time", 0, (_U16)ZION_OFFSETOF(STRESSCASE_LOGIN_CONFIG, retry_time), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_STRESSCASE_LOGIN_CONFIG_info = { NULL, "STRESSCASE_LOGIN_CONFIG", sizeof(STRESSCASE_LOGIN_CONFIG), 2, _struct_STRESSCASE_LOGIN_CONFIG_fieldinfo, _struct_STRESSCASE_LOGIN_CONFIG_readproc, _struct_STRESSCASE_LOGIN_CONFIG_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<STRESSCASE_LOGIN_CONFIG>()
	{
		return &_rfl_struct_STRESSCASE_LOGIN_CONFIG_info;
	}
}

namespace DDL
{
	template<>
	bool BufferReader::Read<STRESSCASE_LOGIN_STATUS>(STRESSCASE_LOGIN_STATUS& Value)
	{
		if(!Read<_U32>(Value.failed_times)) return false;
		if(!Read<_U32>(Value.sucess_times)) return false;
		return true;
	}
	template<>
	bool BufferWriter::Write<STRESSCASE_LOGIN_STATUS>(const STRESSCASE_LOGIN_STATUS& Value)
	{
		if(!Write<_U32>(Value.failed_times)) return false;
		if(!Write<_U32>(Value.sucess_times)) return false;
		return true;
	}
}

namespace DDLReflect
{

	static bool _struct_STRESSCASE_LOGIN_STATUS_readproc(DDL::BufferReader& buf, void* data)
	{
		return buf.Read<STRESSCASE_LOGIN_STATUS>(*((STRESSCASE_LOGIN_STATUS*)data));
	}

	static bool _struct_STRESSCASE_LOGIN_STATUS_writeproc(DDL::BufferWriter& buf, const void* data)
	{
		return buf.Write<STRESSCASE_LOGIN_STATUS>(*((const STRESSCASE_LOGIN_STATUS*)data));
	}

	static FIELD_INFO _struct_STRESSCASE_LOGIN_STATUS_fieldinfo[] =
	{
		{TYPE_U32, "failed_times", 0, (_U16)ZION_OFFSETOF(STRESSCASE_LOGIN_STATUS, failed_times), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
		{TYPE_U32, "sucess_times", 0, (_U16)ZION_OFFSETOF(STRESSCASE_LOGIN_STATUS, sucess_times), NULL, (_U16)-1, (_U16)-1, (_U16)0, (_U16)sizeof(_U32), NULL},
	};
	STRUCT_INFO _rfl_struct_STRESSCASE_LOGIN_STATUS_info = { NULL, "STRESSCASE_LOGIN_STATUS", sizeof(STRESSCASE_LOGIN_STATUS), 2, _struct_STRESSCASE_LOGIN_STATUS_fieldinfo, _struct_STRESSCASE_LOGIN_STATUS_readproc, _struct_STRESSCASE_LOGIN_STATUS_writeproc };
	template<>
	const STRUCT_INFO* GetStruct<STRESSCASE_LOGIN_STATUS>()
	{
		return &_rfl_struct_STRESSCASE_LOGIN_STATUS_info;
	}
}

